from typing import Union, Any, Callable, Optional, List  # NOQA

try:
    from . import __lib_lvgl as _lib_lvgl  # NOQA
except ImportError:
    import __lib_lvgl as _lib_lvgl  # NOQA

_MPY_API = False


__version__ = "0.1.1b"


def binding_version():
    return __version__


def _get_py_obj(c_obj, c_type):
    if c_type == 'None':
        return None

    if c_obj == _lib_lvgl.ffi.NULL:
        return None

    if not isinstance(c_obj, (int, float, str, bytes)):
        type_ = _lib_lvgl.ffi.typeof(c_obj)

        while type_.kind == 'pointer':
            type_ = type_.item

        if type_.kind == 'array':
            # not used at the moment, need to find a way to test it
            size = type_.length  # NOQA

        if c_type.lower().startswith('list'):
            c_type = c_type.split('[')[-1][:-1]
            cls = type(c_type + '[]', (_Array,), {'_c_obj': c_type})
            instance = cls()
            instance._obj = c_obj

            return instance

    glob = globals()

    if c_type in glob:
        cls = glob[c_type]
        if issubclass(cls, _StructUnion):
            instance = cls()
            instance._obj = c_obj  # NOQA
            return instance

        cls = type(c_type, (cls,), {'_obj': c_obj, '_c_type': c_type + ' *'})
        res = cls(c_obj)

        return res

    if c_type + '_' in glob:
        cls = glob[c_type + '_']
        if issubclass(cls, _StructUnion):
            instance = cls()
            instance._obj = c_obj  # NOQA
            return instance

        cls = type(c_type, (cls,), {'_obj': c_obj, '_c_type': c_type + ' *'})
        res = cls(c_obj)

        return res

    if isinstance(c_obj, bool):
        return _convert_basic_type(c_obj, c_type)

    if isinstance(c_obj, (int, float)):
        return _convert_basic_type(c_obj, c_type)

    if isinstance(c_obj, bytes) and c_type == 'char':
        return _convert_basic_type(c_obj, c_type)

    if c_type is None:
        try:
            c_type = _get_c_type(c_obj)
        except Exception:  # NOQA
            return c_obj

    try:
        _ = c_obj[0]

        cls = type(c_type, (_Array,), {'_c_type': c_type})
        array = cls()
        array._obj = c_obj  # NOQA
        return array
    except Exception:  # NOQA
        pass

    return c_obj


def _get_c_obj(py_obj, c_type):
    if isinstance(py_obj, dict):
        return py_obj

    if py_obj is None:
        return _lib_lvgl.ffi.NULL

    if hasattr(py_obj, '_obj'):
        return py_obj._obj  # NOQA

    if c_type is not None:
        globs = globals()

        if c_type.startswith('List'):
            c_type = c_type.split('[')[-1][:-1]
            cls = type(f'{c_type}[]', (_Array,), {'_c_type': c_type})
            instance = cls()

            type_cls = globs[c_type]

            for i, item in enumerate(py_obj):
                if hasattr(item, '_obj'):
                    continue

                item_inst = (
                    type_cls(**item) if isinstance(item, dict)
                    else type_cls(item)
                )
                py_obj[i] = item_inst

            instance.extend(py_obj)

            return instance._obj  # NOQA

        def _instance(_c_type):
            c = globs[_c_type]

            try:
                if isinstance(py_obj, dict):
                    ins = c(**py_obj)
                else:
                    ins = c(py_obj)

                return ins._obj  # NOQA
            except Exception:  # NOQA
                pass


        if c_type in globs:
            obj = _instance(c_type)
            if obj is not None:
                return obj

        if f'{c_type}_' in globs:
            obj = _instance(f'{c_type}_')
            if obj is not None:
                return obj

    if isinstance(py_obj, (int, float)):
        return py_obj
    if isinstance(py_obj, str):
        return py_obj.encode('utf-8')

    if isinstance(py_obj, tuple):
        py_obj = list(py_obj)

    return [py_obj] if isinstance(py_obj, list) else py_obj


def _get_c_type(c_obj):
    if isinstance(c_obj, int):
        return None

    cdata = str(_lib_lvgl.ffi.typeof(c_obj)).replace("'", '')
    c_type = ''

    for itm in cdata.split(' '):
        if '*' in itm:
            break

        c_type = itm

    c_type = c_type.replace('>', '')

    return c_type.replace('struct', '').replace('union', '').strip()


class _CBStore(dict):
    pass


class va_list(list):
    pass


class _DefaultArg:
    pass


class _AsArrayMixin:
    _c_type = ''

    @classmethod
    def as_array(cls, size=None):
        new_cls = type(
            cls.__name__ + ('[]' if size is None else f'[{size}]'),
            (_Array,),
            {'_c_type': cls._c_type.split(' ')[0]}
        )

        return new_cls()


class _Array(list):
    _c_type = ''

    def as_buffer(self, c_type, size=None):
        if size is None:
            cast = _lib_lvgl.ffi.cast(f'{c_type}[]', self._obj)
        else:
            cast = _lib_lvgl.ffi.cast(f'{c_type}[{size}]', self._obj)
        return _lib_lvgl.ffi.buffer(cast)[:]

    @property
    def _obj(self):
        if self.__obj is None:
            c_array = []
            dim = self._dim

            for item in self._array:

                c_obj = _get_c_obj(item, self._c_type)
                py_obj = _get_py_obj(c_obj, self._c_type)
                c_array.append(py_obj.as_dict())
                if isinstance(item, _Array):
                    dim += item._dim

            if '[' in self.__class__.__name__:
                size = self.__class__.__name__.split('[')[-1]
                size = size.split(']')[0]

                if not size:
                    size = str(len(c_array))

                if size and size.isdigit():
                    dim = dim.split(']', 1)[-1]

                    dim = '[{0}]'.format(size) + dim

                    if c_array:
                        try:
                            self.__obj = _lib_lvgl.ffi.new(
                                self._c_type + dim,
                                c_array
                            )
                        except _lib_lvgl.ffi.error:
                            self.__obj = _lib_lvgl.ffi.new(
                                f'lv_{self._c_type}{dim}',
                                c_array
                            )
                    else:
                        self.__obj = _lib_lvgl.ffi.new(
                            self._c_type + dim
                        )
                    return self.__obj

            c_type = self._c_type + dim

            try:
                self.__obj = _lib_lvgl.ffi.new(
                    c_type,
                    [c_array]
                )
            except _lib_lvgl.ffi.error:
                self.__obj = _lib_lvgl.ffi.new(f'lv_{c_type}', [c_array])

        return self.__obj

    @_obj.setter
    def _obj(self, c_obj):
        size = _lib_lvgl.ffi.typeof(c_obj).length
        array = []

        dim = ''

        for i in range(size):
            c_item = c_obj[i]
            py_item = _get_py_obj(c_item, self._c_type)

            if py_item is None:
                break

            if isinstance(py_item, _Array) and not dim:
                dim += py_item._dim

            array.append(py_item)

        self.__class__.__name__ = '{0}[{1}]{2}'.format(self._c_type, size, dim)

        self._array = array
        self.__obj = c_obj

    @property
    def _dim(self):
        size = len(self)
        return '[]' if size == 0 else '[{0}]'.format(size)

    def __init__(self):
        self.__obj = None
        self._array = []
        list.__init__(self)

    def __len__(self):
        return len(self._array)

    def __iter__(self):
        return iter(self._array)

    def __getitem__(self, item):
        return self._array[item]

    def __setitem__(self, key, value):
        self.__check_locked()

        self._array[key] = value

    @property
    def is_locked(self):
        return self.__obj is not None

    def __check_locked(self):
        if self.__obj is not None:
            raise RuntimeError(
                'This array "{0}" has been recieved from LVGL or '
                'sent to LVGL and has been locked\n'
                'you can make copy using `array.copy()` '
                'to add/change/remove items from the array.'.format(
                    self.__class__.__name__
                )
            )

    def add_dimension(self) -> "_Array":
        self.__check_locked()

        cls = type(f'{self._c_type}[]', (_Array,), {'_c_type': self._c_type})
        instance = cls()
        self._array.append(instance)
        return instance

    def clear(self) -> None:
        self.__check_locked()
        self._array.clear()

    def copy(self) -> "_Array":
        """
        This is a shallow copy
        """
        cls = type(
            self.__class__.__name__,
            (_Array,),
            {'_c_type': self._c_type}
        )

        instance = cls()

        if self.__class__.__name__.count('[') > 1:
            for item in self._array:
                instance.append(item.copy())

        else:
            instance._array = list(self)[:]

        return instance

    def pop(self, index: int = 0) -> Any:
        self.__check_locked()

        return self._array.pop(index)

    def index(
            self,
            value: Any,
            start: Optional[int] = None,
            stop: Optional[int] = None
    ) -> int:
        if None not in (start, stop):
            return self._array.index(value, start, stop)

        if start is not None:
            return self._array.index(value, start)

        return self._array.index(value)

    def count(self, obj: Any) -> int:
        return self._array.count(obj)

    def insert(self, index: int, obj: Any) -> None:
        self.__check_locked()

        self._array.insert(index, obj)

    def remove(self, value: Any) -> None:
        self.__check_locked()

        self._array.remove(value)

    def reverse(self) -> None:
        self.__check_locked()

        self._array.reverse()

    def sort(
            self,
            *,
            key: Optional[Callable[[Any], Any]] = None,
            reverse: Optional[bool] = False
    ) -> None:
        self.__check_locked()

        if key is not None:
            self._array.sort(key=key, reverse=reverse)

        self._array.sort(reverse=reverse)

    def __delitem__(self, i: Union[int, slice]) -> None:
        self.__check_locked()

        del self._array[i]

    def __add__(self, x: Union["_Array", list]) -> "_Array":
        instance = self.copy()

        for item in x:
            instance.append(item)

        return instance

    def __iadd__(self, x: Union["_Array", list]) -> "_Array":
        self.__check_locked()

        for item in x:
            self.append(item)

        return self

    def __mul__(self, n: int) -> "_Array":
        instance = self.copy()

        instance._array = instance._array * n
        return instance

    def __rmul__(self, n: int) -> "_Array":
        return self.__mul__(n)

    def __imul__(self, n: int) -> "_Array":
        self.__check_locked()
        self._array *= n
        return self

    def __contains__(self, obj: Any) -> bool:
        return obj in self._array

    def __reversed__(self) -> "_Array":
        self.__check_locked()
        self._array.__reversed__()
        return self

    def __gt__(self, x: "_Array") -> bool:
        return self._array > x._array

    def __ge__(self, x: "_Array") -> bool:
        return self._array >= x._array

    def __lt__(self, x: "_Array") -> bool:
        return self._array < x._array

    def __le__(self, x: "_Array") -> bool:
        return self._array <= x._array

    def __eq__(self, other: "_Array") -> bool:
        return self._array == other._array

    def __ne__(self, other: "_Array") -> bool:
        return not self.__eq__(other)

    def extend(self, obj: Union[list, "_Array"]) -> None:
        self.__check_locked()

        for item in obj:
            self.append(item)

    def append(self, py_obj: Any) -> None:
        self.__check_locked()

        if isinstance(py_obj, tuple):
            py_obj = list(py_obj)

        if isinstance(py_obj, list) and not isinstance(py_obj, _Array):
            if self._array and not isinstance(self._array[0], _Array):
                raise TypeError(
                    'You cannot add an array to a single dimension array.'
                )

            dim = self.add_dimension()
            for item in py_obj:
                if isinstance(item, _Array) and item.is_locked:
                    item = item.copy()

                dim.append(item)

            return
        try:
            if self._c_type in (
            py_obj._c_type, py_obj.__class__.__name__):  # NOQA
                self._array.append(py_obj)
                return

        except AttributeError:
            if isinstance(py_obj, (int, str, float, bytes, bool)):
                py_type = _convert_basic_type(py_obj, self._c_type)
                self._array.append(py_type)

    def as_dict(self):
        return [item.as_dict() for item in self]

    def __str__(self):
        return str(self._array)

    def __repr__(self):
        return repr(self._array)


def _convert_basic_type(obj, c_type):
    try:
        if c_type in (obj._c_type, obj.__class__.__name__):  # NOQA
            return obj
        else:
            raise TypeError('incompatable type')
    except AttributeError:
        pass

    glob = globals()

    def _instance(_c_type):
        c = glob[_c_type]
        c = type(
            c_type,
            (c,),
            {'_obj': obj, '_c_type': f'{c_type} *'}
        )

        try:
            return c()
        except Exception:  # NOQA
            ins = c()
            ins._obj = obj
            return ins

    if c_type in glob:
        return _instance(c_type)

    if f'{c_type}_' in glob:
        return _instance(f'{c_type}_')

    if isinstance(obj, bool):
        if c_type != 'bool':
            raise TypeError(
                f'incompatible types "bool" and "{c_type}"'
            )

        cls = type(
            c_type,
            (_Bool,),
            {'_obj': obj, '_c_type': f'{c_type} *'}
        )
        return cls(obj)

    if isinstance(obj, float):
        for item in ('double', 'float'):
            if c_type.startswith(item):
                cls = type(
                    c_type,
                    (_Float,),
                    {'_obj': obj, '_c_type': f'{c_type} *'}
                )
                return cls(obj)

        raise TypeError(
            f'incompatible types "float" and "{c_type}"'
        )

    if isinstance(obj, bytes) and c_type == 'char':
        obj = obj.decode('utf-8')

    if isinstance(obj, str):
        if c_type != 'char':
            raise TypeError(
                f'incompatible types "str" and "{c_type}"'
            )

        cls = type(
            c_type,
            (_String,),
            {'_obj': obj, '_c_type': f'{c_type} *'}
        )

        return cls(obj)

    raise TypeError(f'Unknown type ("{c_type}")')


class _Float(float, _AsArrayMixin):
    _c_type = 'float *'
    _obj = None

    def as_dict(self):
        return self._obj

    def __new__(cls, value):
        instance = super().__new__(cls, value)
        instance._obj = value
        return instance


class _Integer(int, _AsArrayMixin):
    _obj = None

    def as_dict(self):
        return self._obj

    def __new__(cls, value):
        instance = super().__new__(cls, value)
        instance._obj = value
        return instance


class _String(str, _AsArrayMixin):
    _obj = None

    def as_dict(self):
        return self._obj

    def __new__(cls, value):
        instance = super().__new__(cls, value)
        instance._obj = value.encode('utf-8')
        return instance


class _Bool(int, _AsArrayMixin):
    _c_type = 'bool *'
    _obj = None

    def as_dict(self):
        return self._obj

    def __new__(cls, value):
        instance = super().__new__(cls, value)
        instance._obj = value
        return instance


class void(_AsArrayMixin):
    _c_type = 'void *'

    def as_dict(self):
        return self._obj

    def __init__(self, value):
        try:
            self._obj = _lib_lvgl.ffi.cast(self._c_type, value)
            self.ctype = _get_c_type(value)

        except Exception:  # NOQA
            c_obj = _get_c_obj(value, None)

            try:
                self._obj = _lib_lvgl.ffi.cast(self._c_type, c_obj)
                self.ctype = _get_c_type(c_obj)
                value = c_obj
            except Exception:  # NOQA
                self._obj = value

        self.__original__object__ = value

    def __str__(self):
        return f'(void *) ({self.ctype})'


class char(_String):
    _c_type = 'char *'


class uint8_t(_Integer):
    _c_type = 'uint8_t *'

    @classmethod
    def from_buffer(cls, data):
        return _lib_lvgl.ffi.from_buffer(cls._c_type.split(' ')[0] + '[]', data)

class uint16_t(_Integer):
    _c_type = 'uint16_t *'


class uint32_t(_Integer):
    _c_type = 'uint32_t *'


class uint64_t(_Integer):
    _c_type = 'uint64_t *'


class int8_t(_Integer):
    _c_type = 'int8_t *'


class int16_t(_Integer):
    _c_type = 'int16_t *'


class int32_t(_Integer):
    _c_type = 'int32_t *'


class int64_t(_Integer):
    _c_type = 'int64_t *'


class int_(_Integer):
    _c_type = 'int *'


class uintptr_t(_Integer):
    _c_type = 'unsigned int *'


class intptr_t(_Integer):
    _c_type = 'signed int *'


class size_t(_Integer):
    _c_type = 'size_t *'



# This class checks to see if wrapper classes are being used by
# the mpy module. The reason why this meta class exists is so that objects
# comming from C code get redirected to those wrapper classes instead of to
# the C API classes. If the redirection does not occur then the methods in
# the wraapper classes would not be accessable.
# This class checks to see if wrapper classes are being used by
# the mpy module. The reason why this meta class exists is so that objects
# comming from C code get redirected to those wrapper classes instead of to
# the C API classes. If the redirection does not occur then the methods in
# the wraapper classes would not be accessable.
class _StructUnionMeta(type):
    _wrapped_classes = {}
    _classes = {}
    _calling_from_meta = False

    def __init__(cls, name, bases, dct):
        super().__init__(name, bases, dct)

        if '.mpy.' in str(bases[0]) or f'lvgl.{name}' in str(bases[0]):
            if name not in _StructUnionMeta._wrapped_classes:
                _StructUnionMeta._wrapped_classes[name] = cls

    def __call__(cls, *args, **kwargs):
        name = cls.__name__

        if not _StructUnionMeta._calling_from_meta:
            if not cls.__module__.endswith('mpy'):
                if name.endswith('_t') and name[:-2] in _StructUnionMeta._wrapped_classes:
                    cls = _StructUnionMeta._wrapped_classes[name[:-2]]  # NOQA
                elif name.startswith('_') and name[1:] in _StructUnionMeta._wrapped_classes:
                    cls = _StructUnionMeta._wrapped_classes[name[1:]]  # NOQA
                elif name in _StructUnionMeta._wrapped_classes:
                    cls = _StructUnionMeta._wrapped_classes[name]  # NOQA

        _StructUnionMeta._calling_from_meta = True
        instance = super(_StructUnionMeta, cls).__call__(*args, **kwargs)
        _StructUnionMeta._calling_from_meta = False
        return instance


class _StructUnion(_AsArrayMixin, metaclass=_StructUnionMeta):
    _c_type = ''

    @classmethod
    def sizeof(cls):
        return _lib_lvgl.ffi.sizeof(cls._c_type)

    def cast(self, obj):
        obj._obj = self._obj

    def as_buffer(self, c_type, size=None):
        if size is None:
            cast = _lib_lvgl.ffi.cast(f'{c_type}[]', self._obj)
        else:
            cast = _lib_lvgl.ffi.cast(f'{c_type}[{size}]', self._obj)
        return _lib_lvgl.ffi.buffer(cast)[:]

    def __init__(self, **kwargs):
        self._obj = _lib_lvgl.ffi.new(self._c_type)

        for key, value in list(kwargs.items())[:]:
            if value == _DefaultArg:
                continue

            attr = getattr(self._obj, key)
            c_type = _get_c_type(attr)
            self._set_field(key, value, c_type)

    def _get_field(self, field_name, c_type):
        key = '__py_{0}__'.format(field_name)
        if key in self.__dict__:
            obj = self.__dict__[key]
            if isinstance(obj, (_StructUnion, _Array)):
                return obj

        py_obj = _get_py_obj(getattr(self._obj, field_name), c_type)

        self.__dict__[key] = py_obj
        return py_obj

    def _set_field(self, field_name, py_obj, c_type):
        def _setattr():
            setattr(self._obj, field_name, c_obj)
            self.__dict__['__py_{0}__'.format(field_name)] = py_obj
            self.__dict__['__c_{0}__'.format(field_name)] = c_obj


        if isinstance(py_obj, list):
            c_obj = [item.as_dict() for item in py_obj]
            _setattr()
            return

        c_obj = _get_c_obj(py_obj, c_type)
        if isinstance(c_obj, bytes):
            c_obj = _lib_lvgl.ffi.from_buffer(
                c_type.split(' ')[0] + f'[{len(c_obj)}]', bytearray(c_obj)
            )

        _setattr()

    def as_dict(self):
        res = {}
        for field in dir(self._obj):
            attr = getattr(self, field)
            res[field] = attr.as_dict()

        return res

_PY_C_TYPES = (_Float, _Integer, _String, _StructUnion)
_global_cb_store = _CBStore()


# ****************  INTEGER_TYPES  ****************
class res_t(uint8_t):
    pass


class log_level_t(int8_t):
    pass


class anim_enable_t(int_):
    pass


class coord_t(int32_t):
    pass


class align_t(uint8_t):
    pass


class dir_t(uint8_t):
    pass


class font_subpx_t(uint8_t):
    pass


class opa_t(uint8_t):
    pass


class color_format_t(int_):
    pass


class palette_t(int_):
    pass


class text_flag_t(uint8_t):
    pass


class text_cmd_state_t(uint8_t):
    pass


class text_align_t(uint8_t):
    pass


class base_dir_t(uint8_t):
    pass


class blend_mode_t(uint8_t):
    pass


class text_decor_t(uint8_t):
    pass


class border_side_t(uint8_t):
    pass


class grad_dir_t(uint8_t):
    pass


class dither_mode_t(uint8_t):
    pass


class style_prop_t(uint16_t):
    pass


class style_res_t(uint8_t):
    pass


class state_t(uint16_t):
    pass


class part_t(uint32_t):
    pass


class _obj_flag_t(int_):
    pass


class obj_flag_t(uint32_t):
    pass


class obj_draw_part_type_t(int_):
    pass


class event_code_t(int_):
    pass


class disp_rotation_t(int_):
    pass


class disp_render_mode_t(int_):
    pass


class scr_load_anim_t(int_):
    pass


class obj_tree_walk_res_t(int_):
    pass


class scrollbar_mode_t(uint8_t):
    pass


class scroll_snap_t(uint8_t):
    pass


class _style_state_cmp_t(int_):
    pass


class style_selector_t(uint32_t):
    pass


class fs_res_t(uint8_t):
    pass


class fs_mode_t(uint8_t):
    pass


class fs_whence_t(int_):
    pass


class img_src_t(uint8_t):
    pass


class draw_mask_res_t(uint8_t):
    pass


class draw_mask_type_t(uint8_t):
    pass


class draw_mask_line_side_t(uint8_t):
    pass


class draw_layer_flags_t(int_):
    pass


class cover_res_t(int_):
    pass


class layer_type_t(int_):
    pass


class obj_class_editable_t(int_):
    pass


class obj_class_group_def_t(int_):
    pass


class obj_class_theme_inheritable_t(int_):
    pass


class ll_node_t(uint8_t):
    pass


class key_t(uint8_t):
    pass


class group_refocus_policy_t(int_):
    pass


class indev_type_t(int_):
    pass


class indev_state_t(int_):
    pass


class font_fmt_txt_cmap_type_t(uint8_t):
    pass


class font_fmt_txt_bitmap_format_t(int_):
    pass


class img_size_mode_t(uint8_t):
    pass


class animimg_part_t(uint8_t):
    pass


class arc_mode_t(uint8_t):
    pass


class arc_draw_part_type_t(int_):
    pass


class label_long_mode_t(uint8_t):
    pass


class bar_mode_t(uint8_t):
    pass


class bar_draw_part_type_t(int_):
    pass


class btnmatrix_ctrl_t(uint16_t):
    pass


class btnmatrix_draw_part_type_t(int_):
    pass


class chart_type_t(uint8_t):
    pass


class chart_update_mode_t(uint8_t):
    pass


class chart_axis_t(uint8_t):
    pass


class chart_draw_part_type_t(int_):
    pass


class checkbox_draw_part_type_t(int_):
    pass


class colorwheel_mode_t(uint8_t):
    pass


class imgbtn_state_t(int_):
    pass


class keyboard_mode_t(uint8_t):
    pass


class led_draw_part_type_t(int_):
    pass


class menu_mode_header_t(uint8_t):
    pass


class menu_mode_root_back_btn_t(uint8_t):
    pass


class meter_indicator_type_t(uint8_t):
    pass


class meter_draw_part_type_t(int_):
    pass


class roller_mode_t(uint8_t):
    pass


class slider_mode_t(uint8_t):
    pass


class slider_draw_part_type_t(int_):
    pass


class span_overflow_t(uint8_t):
    pass


class span_mode_t(uint8_t):
    pass


class table_cell_ctrl_t(uint8_t):
    pass


class table_draw_part_type_t(int_):
    pass


class _keep_pedantic_happy(int_):
    pass


class gridnav_ctrl_t(int_):
    pass


class msg_id_t(uintptr_t):
    pass


class ime_pinyin_mode_t(int_):
    pass


class file_explorer_sort_t(int_):
    pass


class file_explorer_dir_t(int_):
    pass


class flex_align_t(int_):
    pass


class flex_flow_t(int_):
    pass


class grid_align_t(int_):
    pass


class demo_benchmark_mode_t(int_):
    pass

# ************************************************


# ****************  ENUMERATIONS  ****************
DPI_DEF: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_DPI_DEF  # NOQA
    )
)

RES_INV: res_t = (
    res_t(
        _lib_lvgl.lib.LV_RES_INV  # NOQA
    )
)
RES_OK: res_t = (
    res_t(
        _lib_lvgl.lib.LV_RES_OK  # NOQA
    )
)

LOG_LEVEL_TRACE: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_TRACE  # NOQA
    )
)

LOG_LEVEL_INFO: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_INFO  # NOQA
    )
)

LOG_LEVEL_WARN: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_WARN  # NOQA
    )
)

LOG_LEVEL_ERROR: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_ERROR  # NOQA
    )
)

LOG_LEVEL_USER: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_USER  # NOQA
    )
)

LOG_LEVEL_NONE: log_level_t = (
    log_level_t(
        _lib_lvgl.lib.ENUM_LV_LOG_LEVEL_NONE  # NOQA
    )
)

ANIM_REPEAT_INFINITE: uint16_t = (
    uint16_t(
        _lib_lvgl.lib.ENUM_LV_ANIM_REPEAT_INFINITE  # NOQA
    )
)

ANIM_PLAYTIME_INFINITE: uint32_t = (
    uint32_t(
        _lib_lvgl.lib.ENUM_LV_ANIM_PLAYTIME_INFINITE  # NOQA
    )
)

ANIM_OFF: anim_enable_t = (
    anim_enable_t(
        _lib_lvgl.lib.LV_ANIM_OFF  # NOQA
    )
)
ANIM_ON: anim_enable_t = (
    anim_enable_t(
        _lib_lvgl.lib.LV_ANIM_ON  # NOQA
    )
)

_STR_SYMBOL_BULLET: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BULLET  # NOQA
    )
)

_STR_SYMBOL_AUDIO: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_AUDIO  # NOQA
    )
)

_STR_SYMBOL_VIDEO: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_VIDEO  # NOQA
    )
)

_STR_SYMBOL_LIST: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_LIST  # NOQA
    )
)

_STR_SYMBOL_OK: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_OK  # NOQA
    )
)

_STR_SYMBOL_CLOSE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_CLOSE  # NOQA
    )
)

_STR_SYMBOL_POWER: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_POWER  # NOQA
    )
)

_STR_SYMBOL_SETTINGS: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_SETTINGS  # NOQA
    )
)

_STR_SYMBOL_HOME: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_HOME  # NOQA
    )
)

_STR_SYMBOL_DOWNLOAD: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_DOWNLOAD  # NOQA
    )
)

_STR_SYMBOL_DRIVE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_DRIVE  # NOQA
    )
)

_STR_SYMBOL_REFRESH: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_REFRESH  # NOQA
    )
)

_STR_SYMBOL_MUTE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_MUTE  # NOQA
    )
)

_STR_SYMBOL_VOLUME_MID: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_VOLUME_MID  # NOQA
    )
)

_STR_SYMBOL_VOLUME_MAX: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_VOLUME_MAX  # NOQA
    )
)

_STR_SYMBOL_IMAGE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_IMAGE  # NOQA
    )
)

_STR_SYMBOL_TINT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_TINT  # NOQA
    )
)

_STR_SYMBOL_PREV: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_PREV  # NOQA
    )
)

_STR_SYMBOL_PLAY: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_PLAY  # NOQA
    )
)

_STR_SYMBOL_PAUSE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_PAUSE  # NOQA
    )
)

_STR_SYMBOL_STOP: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_STOP  # NOQA
    )
)

_STR_SYMBOL_NEXT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_NEXT  # NOQA
    )
)

_STR_SYMBOL_EJECT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_EJECT  # NOQA
    )
)

_STR_SYMBOL_LEFT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_LEFT  # NOQA
    )
)

_STR_SYMBOL_RIGHT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_RIGHT  # NOQA
    )
)

_STR_SYMBOL_PLUS: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_PLUS  # NOQA
    )
)

_STR_SYMBOL_MINUS: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_MINUS  # NOQA
    )
)

_STR_SYMBOL_EYE_OPEN: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_EYE_OPEN  # NOQA
    )
)

_STR_SYMBOL_EYE_CLOSE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_EYE_CLOSE  # NOQA
    )
)

_STR_SYMBOL_WARNING: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_WARNING  # NOQA
    )
)

_STR_SYMBOL_SHUFFLE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_SHUFFLE  # NOQA
    )
)

_STR_SYMBOL_UP: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_UP  # NOQA
    )
)

_STR_SYMBOL_DOWN: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_DOWN  # NOQA
    )
)

_STR_SYMBOL_LOOP: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_LOOP  # NOQA
    )
)

_STR_SYMBOL_DIRECTORY: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_DIRECTORY  # NOQA
    )
)

_STR_SYMBOL_UPLOAD: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_UPLOAD  # NOQA
    )
)

_STR_SYMBOL_CALL: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_CALL  # NOQA
    )
)

_STR_SYMBOL_CUT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_CUT  # NOQA
    )
)

_STR_SYMBOL_COPY: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_COPY  # NOQA
    )
)

_STR_SYMBOL_SAVE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_SAVE  # NOQA
    )
)

_STR_SYMBOL_BARS: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BARS  # NOQA
    )
)

_STR_SYMBOL_ENVELOPE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_ENVELOPE  # NOQA
    )
)

_STR_SYMBOL_CHARGE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_CHARGE  # NOQA
    )
)

_STR_SYMBOL_PASTE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_PASTE  # NOQA
    )
)

_STR_SYMBOL_BELL: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BELL  # NOQA
    )
)

_STR_SYMBOL_KEYBOARD: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_KEYBOARD  # NOQA
    )
)

_STR_SYMBOL_GPS: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_GPS  # NOQA
    )
)

_STR_SYMBOL_FILE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_FILE  # NOQA
    )
)

_STR_SYMBOL_WIFI: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_WIFI  # NOQA
    )
)

_STR_SYMBOL_BATTERY_FULL: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BATTERY_FULL  # NOQA
    )
)

_STR_SYMBOL_BATTERY_3: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BATTERY_3  # NOQA
    )
)

_STR_SYMBOL_BATTERY_2: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BATTERY_2  # NOQA
    )
)

_STR_SYMBOL_BATTERY_1: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BATTERY_1  # NOQA
    )
)

_STR_SYMBOL_BATTERY_EMPTY: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BATTERY_EMPTY  # NOQA
    )
)

_STR_SYMBOL_USB: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_USB  # NOQA
    )
)

_STR_SYMBOL_BLUETOOTH: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BLUETOOTH  # NOQA
    )
)

_STR_SYMBOL_TRASH: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_TRASH  # NOQA
    )
)

_STR_SYMBOL_EDIT: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_EDIT  # NOQA
    )
)

_STR_SYMBOL_BACKSPACE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_BACKSPACE  # NOQA
    )
)

_STR_SYMBOL_SD_CARD: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_SD_CARD  # NOQA
    )
)

_STR_SYMBOL_NEW_LINE: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_NEW_LINE  # NOQA
    )
)

_STR_SYMBOL_DUMMY: uint8_t = (
    uint8_t(
        _lib_lvgl.lib._LV_STR_SYMBOL_DUMMY  # NOQA
    )
)

ALIGN_DEFAULT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_DEFAULT  # NOQA
    )
)
ALIGN_TOP_LEFT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_TOP_LEFT  # NOQA
    )
)
ALIGN_TOP_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_TOP_MID  # NOQA
    )
)
ALIGN_TOP_RIGHT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_TOP_RIGHT  # NOQA
    )
)
ALIGN_BOTTOM_LEFT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_BOTTOM_LEFT  # NOQA
    )
)
ALIGN_BOTTOM_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_BOTTOM_MID  # NOQA
    )
)
ALIGN_BOTTOM_RIGHT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_BOTTOM_RIGHT  # NOQA
    )
)
ALIGN_LEFT_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_LEFT_MID  # NOQA
    )
)
ALIGN_RIGHT_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_RIGHT_MID  # NOQA
    )
)
ALIGN_CENTER: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_CENTER  # NOQA
    )
)
ALIGN_OUT_TOP_LEFT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_TOP_LEFT  # NOQA
    )
)
ALIGN_OUT_TOP_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_TOP_MID  # NOQA
    )
)
ALIGN_OUT_TOP_RIGHT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_TOP_RIGHT  # NOQA
    )
)
ALIGN_OUT_BOTTOM_LEFT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_BOTTOM_LEFT  # NOQA
    )
)
ALIGN_OUT_BOTTOM_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_BOTTOM_MID  # NOQA
    )
)
ALIGN_OUT_BOTTOM_RIGHT: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_BOTTOM_RIGHT  # NOQA
    )
)
ALIGN_OUT_LEFT_TOP: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_LEFT_TOP  # NOQA
    )
)
ALIGN_OUT_LEFT_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_LEFT_MID  # NOQA
    )
)
ALIGN_OUT_LEFT_BOTTOM: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_LEFT_BOTTOM  # NOQA
    )
)
ALIGN_OUT_RIGHT_TOP: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_RIGHT_TOP  # NOQA
    )
)
ALIGN_OUT_RIGHT_MID: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_RIGHT_MID  # NOQA
    )
)
ALIGN_OUT_RIGHT_BOTTOM: align_t = (
    align_t(
        _lib_lvgl.lib.LV_ALIGN_OUT_RIGHT_BOTTOM  # NOQA
    )
)

DIR_NONE: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_NONE  # NOQA
    )
)
DIR_LEFT: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_LEFT  # NOQA
    )
)
DIR_RIGHT: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_RIGHT  # NOQA
    )
)
DIR_TOP: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_TOP  # NOQA
    )
)
DIR_BOTTOM: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_BOTTOM  # NOQA
    )
)
DIR_HOR: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_HOR  # NOQA
    )
)
DIR_VER: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_VER  # NOQA
    )
)
DIR_ALL: dir_t = (
    dir_t(
        _lib_lvgl.lib.LV_DIR_ALL  # NOQA
    )
)

SIZE_CONTENT: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_SIZE_CONTENT  # NOQA
    )
)

COORD_MAX: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_COORD_MAX  # NOQA
    )
)

COORD_MIN: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_COORD_MIN  # NOQA
    )
)

FONT_SUBPX_NONE: font_subpx_t = (
    font_subpx_t(
        _lib_lvgl.lib.LV_FONT_SUBPX_NONE  # NOQA
    )
)
FONT_SUBPX_HOR: font_subpx_t = (
    font_subpx_t(
        _lib_lvgl.lib.LV_FONT_SUBPX_HOR  # NOQA
    )
)
FONT_SUBPX_VER: font_subpx_t = (
    font_subpx_t(
        _lib_lvgl.lib.LV_FONT_SUBPX_VER  # NOQA
    )
)
FONT_SUBPX_BOTH: font_subpx_t = (
    font_subpx_t(
        _lib_lvgl.lib.LV_FONT_SUBPX_BOTH  # NOQA
    )
)

COLOR_DEPTH: uint8_t = (
    uint8_t(
        _lib_lvgl.lib.ENUM_LV_COLOR_DEPTH  # NOQA
    )
)

OPA_TRANSP: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_TRANSP  # NOQA
    )
)
OPA_0: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_0  # NOQA
    )
)
OPA_10: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_10  # NOQA
    )
)
OPA_20: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_20  # NOQA
    )
)
OPA_30: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_30  # NOQA
    )
)
OPA_40: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_40  # NOQA
    )
)
OPA_50: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_50  # NOQA
    )
)
OPA_60: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_60  # NOQA
    )
)
OPA_70: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_70  # NOQA
    )
)
OPA_80: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_80  # NOQA
    )
)
OPA_90: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_90  # NOQA
    )
)
OPA_100: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_100  # NOQA
    )
)
OPA_COVER: opa_t = (
    opa_t(
        _lib_lvgl.lib.LV_OPA_COVER  # NOQA
    )
)

COLOR_FORMAT_UNKNOWN: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_UNKNOWN  # NOQA
    )
)
COLOR_FORMAT_L8: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_L8  # NOQA
    )
)
COLOR_FORMAT_A8: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_A8  # NOQA
    )
)
COLOR_FORMAT_I1: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_I1  # NOQA
    )
)
COLOR_FORMAT_I2: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_I2  # NOQA
    )
)
COLOR_FORMAT_I4: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_I4  # NOQA
    )
)
COLOR_FORMAT_I8: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_I8  # NOQA
    )
)
COLOR_FORMAT_A8L8: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_A8L8  # NOQA
    )
)
COLOR_FORMAT_ARGB2222: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_ARGB2222  # NOQA
    )
)
COLOR_FORMAT_RGB565: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RGB565  # NOQA
    )
)
COLOR_FORMAT_RGB565_CHROMA_KEYED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RGB565_CHROMA_KEYED  # NOQA
    )
)
COLOR_FORMAT_ARGB1555: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_ARGB1555  # NOQA
    )
)
COLOR_FORMAT_ARGB4444: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_ARGB4444  # NOQA
    )
)
COLOR_FORMAT_RGB565A8: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RGB565A8  # NOQA
    )
)
COLOR_FORMAT_ARGB8565: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_ARGB8565  # NOQA
    )
)
COLOR_FORMAT_RGB888: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RGB888  # NOQA
    )
)
COLOR_FORMAT_RGB888_CHROMA_KEYED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RGB888_CHROMA_KEYED  # NOQA
    )
)
COLOR_FORMAT_ARGB8888: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_ARGB8888  # NOQA
    )
)
COLOR_FORMAT_XRGB8888: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_XRGB8888  # NOQA
    )
)
COLOR_FORMAT_XRGB8888_CHROMA_KEYED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_XRGB8888_CHROMA_KEYED  # NOQA
    )
)
COLOR_FORMAT_NATIVE: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_NATIVE  # NOQA
    )
)
COLOR_FORMAT_NATIVE_CHROMA_KEYED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_NATIVE_CHROMA_KEYED  # NOQA
    )
)
COLOR_FORMAT_NATIVE_ALPHA: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_NATIVE_ALPHA  # NOQA
    )
)
COLOR_FORMAT_NATIVE_REVERSED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_NATIVE_REVERSED  # NOQA
    )
)
COLOR_FORMAT_NATIVE_ALPHA_REVERSED: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_NATIVE_ALPHA_REVERSED  # NOQA
    )
)
COLOR_FORMAT_RAW: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RAW  # NOQA
    )
)
COLOR_FORMAT_RAW_ALPHA: color_format_t = (
    color_format_t(
        _lib_lvgl.lib.LV_COLOR_FORMAT_RAW_ALPHA  # NOQA
    )
)

PALETTE_RED: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_RED  # NOQA
    )
)
PALETTE_PINK: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_PINK  # NOQA
    )
)
PALETTE_PURPLE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_PURPLE  # NOQA
    )
)
PALETTE_DEEP_PURPLE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_DEEP_PURPLE  # NOQA
    )
)
PALETTE_INDIGO: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_INDIGO  # NOQA
    )
)
PALETTE_BLUE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_BLUE  # NOQA
    )
)
PALETTE_LIGHT_BLUE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_LIGHT_BLUE  # NOQA
    )
)
PALETTE_CYAN: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_CYAN  # NOQA
    )
)
PALETTE_TEAL: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_TEAL  # NOQA
    )
)
PALETTE_GREEN: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_GREEN  # NOQA
    )
)
PALETTE_LIGHT_GREEN: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_LIGHT_GREEN  # NOQA
    )
)
PALETTE_LIME: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_LIME  # NOQA
    )
)
PALETTE_YELLOW: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_YELLOW  # NOQA
    )
)
PALETTE_AMBER: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_AMBER  # NOQA
    )
)
PALETTE_ORANGE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_ORANGE  # NOQA
    )
)
PALETTE_DEEP_ORANGE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_DEEP_ORANGE  # NOQA
    )
)
PALETTE_BROWN: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_BROWN  # NOQA
    )
)
PALETTE_BLUE_GREY: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_BLUE_GREY  # NOQA
    )
)
PALETTE_GREY: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_GREY  # NOQA
    )
)
_PALETTE_LAST: palette_t = (
    palette_t(
        _lib_lvgl.lib._LV_PALETTE_LAST  # NOQA
    )
)
PALETTE_NONE: palette_t = (
    palette_t(
        _lib_lvgl.lib.LV_PALETTE_NONE  # NOQA
    )
)

TEXT_FLAG_NONE: text_flag_t = (
    text_flag_t(
        _lib_lvgl.lib.LV_TEXT_FLAG_NONE  # NOQA
    )
)
TEXT_FLAG_RECOLOR: text_flag_t = (
    text_flag_t(
        _lib_lvgl.lib.LV_TEXT_FLAG_RECOLOR  # NOQA
    )
)
TEXT_FLAG_EXPAND: text_flag_t = (
    text_flag_t(
        _lib_lvgl.lib.LV_TEXT_FLAG_EXPAND  # NOQA
    )
)
TEXT_FLAG_FIT: text_flag_t = (
    text_flag_t(
        _lib_lvgl.lib.LV_TEXT_FLAG_FIT  # NOQA
    )
)

TEXT_CMD_STATE_WAIT: text_cmd_state_t = (
    text_cmd_state_t(
        _lib_lvgl.lib.LV_TEXT_CMD_STATE_WAIT  # NOQA
    )
)
TEXT_CMD_STATE_PAR: text_cmd_state_t = (
    text_cmd_state_t(
        _lib_lvgl.lib.LV_TEXT_CMD_STATE_PAR  # NOQA
    )
)
TEXT_CMD_STATE_IN: text_cmd_state_t = (
    text_cmd_state_t(
        _lib_lvgl.lib.LV_TEXT_CMD_STATE_IN  # NOQA
    )
)

TEXT_ALIGN_AUTO: text_align_t = (
    text_align_t(
        _lib_lvgl.lib.LV_TEXT_ALIGN_AUTO  # NOQA
    )
)
TEXT_ALIGN_LEFT: text_align_t = (
    text_align_t(
        _lib_lvgl.lib.LV_TEXT_ALIGN_LEFT  # NOQA
    )
)
TEXT_ALIGN_CENTER: text_align_t = (
    text_align_t(
        _lib_lvgl.lib.LV_TEXT_ALIGN_CENTER  # NOQA
    )
)
TEXT_ALIGN_RIGHT: text_align_t = (
    text_align_t(
        _lib_lvgl.lib.LV_TEXT_ALIGN_RIGHT  # NOQA
    )
)

BASE_DIR_LTR: base_dir_t = (
    base_dir_t(
        _lib_lvgl.lib.LV_BASE_DIR_LTR  # NOQA
    )
)
BASE_DIR_RTL: base_dir_t = (
    base_dir_t(
        _lib_lvgl.lib.LV_BASE_DIR_RTL  # NOQA
    )
)
BASE_DIR_AUTO: base_dir_t = (
    base_dir_t(
        _lib_lvgl.lib.LV_BASE_DIR_AUTO  # NOQA
    )
)
BASE_DIR_NEUTRAL: base_dir_t = (
    base_dir_t(
        _lib_lvgl.lib.LV_BASE_DIR_NEUTRAL  # NOQA
    )
)
BASE_DIR_WEAK: base_dir_t = (
    base_dir_t(
        _lib_lvgl.lib.LV_BASE_DIR_WEAK  # NOQA
    )
)

ZOOM_NONE: int16_t = (
    int16_t(
        _lib_lvgl.lib.ENUM_LV_ZOOM_NONE  # NOQA
    )
)

BLEND_MODE_NORMAL: blend_mode_t = (
    blend_mode_t(
        _lib_lvgl.lib.LV_BLEND_MODE_NORMAL  # NOQA
    )
)
BLEND_MODE_ADDITIVE: blend_mode_t = (
    blend_mode_t(
        _lib_lvgl.lib.LV_BLEND_MODE_ADDITIVE  # NOQA
    )
)
BLEND_MODE_SUBTRACTIVE: blend_mode_t = (
    blend_mode_t(
        _lib_lvgl.lib.LV_BLEND_MODE_SUBTRACTIVE  # NOQA
    )
)
BLEND_MODE_MULTIPLY: blend_mode_t = (
    blend_mode_t(
        _lib_lvgl.lib.LV_BLEND_MODE_MULTIPLY  # NOQA
    )
)
BLEND_MODE_REPLACE: blend_mode_t = (
    blend_mode_t(
        _lib_lvgl.lib.LV_BLEND_MODE_REPLACE  # NOQA
    )
)

TEXT_DECOR_NONE: text_decor_t = (
    text_decor_t(
        _lib_lvgl.lib.LV_TEXT_DECOR_NONE  # NOQA
    )
)
TEXT_DECOR_UNDERLINE: text_decor_t = (
    text_decor_t(
        _lib_lvgl.lib.LV_TEXT_DECOR_UNDERLINE  # NOQA
    )
)
TEXT_DECOR_STRIKETHROUGH: text_decor_t = (
    text_decor_t(
        _lib_lvgl.lib.LV_TEXT_DECOR_STRIKETHROUGH  # NOQA
    )
)

BORDER_SIDE_NONE: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_NONE  # NOQA
    )
)
BORDER_SIDE_BOTTOM: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_BOTTOM  # NOQA
    )
)
BORDER_SIDE_TOP: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_TOP  # NOQA
    )
)
BORDER_SIDE_LEFT: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_LEFT  # NOQA
    )
)
BORDER_SIDE_RIGHT: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_RIGHT  # NOQA
    )
)
BORDER_SIDE_FULL: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_FULL  # NOQA
    )
)
BORDER_SIDE_INTERNAL: border_side_t = (
    border_side_t(
        _lib_lvgl.lib.LV_BORDER_SIDE_INTERNAL  # NOQA
    )
)

GRAD_DIR_NONE: grad_dir_t = (
    grad_dir_t(
        _lib_lvgl.lib.LV_GRAD_DIR_NONE  # NOQA
    )
)
GRAD_DIR_VER: grad_dir_t = (
    grad_dir_t(
        _lib_lvgl.lib.LV_GRAD_DIR_VER  # NOQA
    )
)
GRAD_DIR_HOR: grad_dir_t = (
    grad_dir_t(
        _lib_lvgl.lib.LV_GRAD_DIR_HOR  # NOQA
    )
)

DITHER_NONE: dither_mode_t = (
    dither_mode_t(
        _lib_lvgl.lib.LV_DITHER_NONE  # NOQA
    )
)
DITHER_ORDERED: dither_mode_t = (
    dither_mode_t(
        _lib_lvgl.lib.LV_DITHER_ORDERED  # NOQA
    )
)
DITHER_ERR_DIFF: dither_mode_t = (
    dither_mode_t(
        _lib_lvgl.lib.LV_DITHER_ERR_DIFF  # NOQA
    )
)

STYLE_PROP_INV: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PROP_INV  # NOQA
    )
)
STYLE_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_WIDTH  # NOQA
    )
)
STYLE_MIN_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MIN_WIDTH  # NOQA
    )
)
STYLE_MAX_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MAX_WIDTH  # NOQA
    )
)
STYLE_HEIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_HEIGHT  # NOQA
    )
)
STYLE_MIN_HEIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MIN_HEIGHT  # NOQA
    )
)
STYLE_MAX_HEIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MAX_HEIGHT  # NOQA
    )
)
STYLE_X: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_X  # NOQA
    )
)
STYLE_Y: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_Y  # NOQA
    )
)
STYLE_ALIGN: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ALIGN  # NOQA
    )
)
STYLE_LAYOUT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LAYOUT  # NOQA
    )
)
STYLE_RADIUS: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_RADIUS  # NOQA
    )
)
STYLE_PAD_TOP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_TOP  # NOQA
    )
)
STYLE_PAD_BOTTOM: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_BOTTOM  # NOQA
    )
)
STYLE_PAD_LEFT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_LEFT  # NOQA
    )
)
STYLE_PAD_RIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_RIGHT  # NOQA
    )
)
STYLE_PAD_ROW: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_ROW  # NOQA
    )
)
STYLE_PAD_COLUMN: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PAD_COLUMN  # NOQA
    )
)
STYLE_BASE_DIR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BASE_DIR  # NOQA
    )
)
STYLE_CLIP_CORNER: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_CLIP_CORNER  # NOQA
    )
)
STYLE_MARGIN_TOP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MARGIN_TOP  # NOQA
    )
)
STYLE_MARGIN_BOTTOM: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MARGIN_BOTTOM  # NOQA
    )
)
STYLE_MARGIN_LEFT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MARGIN_LEFT  # NOQA
    )
)
STYLE_MARGIN_RIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_MARGIN_RIGHT  # NOQA
    )
)
STYLE_BG_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_COLOR  # NOQA
    )
)
STYLE_BG_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_OPA  # NOQA
    )
)
STYLE_BG_GRAD_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_GRAD_COLOR  # NOQA
    )
)
STYLE_BG_GRAD_DIR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_GRAD_DIR  # NOQA
    )
)
STYLE_BG_MAIN_STOP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_MAIN_STOP  # NOQA
    )
)
STYLE_BG_GRAD_STOP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_GRAD_STOP  # NOQA
    )
)
STYLE_BG_GRAD: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_GRAD  # NOQA
    )
)
STYLE_BG_DITHER_MODE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_DITHER_MODE  # NOQA
    )
)
STYLE_BG_IMG_SRC: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_IMG_SRC  # NOQA
    )
)
STYLE_BG_IMG_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_IMG_OPA  # NOQA
    )
)
STYLE_BG_IMG_RECOLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_IMG_RECOLOR  # NOQA
    )
)
STYLE_BG_IMG_RECOLOR_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_IMG_RECOLOR_OPA  # NOQA
    )
)
STYLE_BG_IMG_TILED: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BG_IMG_TILED  # NOQA
    )
)
STYLE_BORDER_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BORDER_COLOR  # NOQA
    )
)
STYLE_BORDER_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BORDER_OPA  # NOQA
    )
)
STYLE_BORDER_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BORDER_WIDTH  # NOQA
    )
)
STYLE_BORDER_SIDE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BORDER_SIDE  # NOQA
    )
)
STYLE_BORDER_POST: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BORDER_POST  # NOQA
    )
)
STYLE_OUTLINE_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_OUTLINE_WIDTH  # NOQA
    )
)
STYLE_OUTLINE_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_OUTLINE_COLOR  # NOQA
    )
)
STYLE_OUTLINE_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_OUTLINE_OPA  # NOQA
    )
)
STYLE_OUTLINE_PAD: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_OUTLINE_PAD  # NOQA
    )
)
STYLE_SHADOW_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_WIDTH  # NOQA
    )
)
STYLE_SHADOW_OFS_X: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_OFS_X  # NOQA
    )
)
STYLE_SHADOW_OFS_Y: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_OFS_Y  # NOQA
    )
)
STYLE_SHADOW_SPREAD: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_SPREAD  # NOQA
    )
)
STYLE_SHADOW_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_COLOR  # NOQA
    )
)
STYLE_SHADOW_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_SHADOW_OPA  # NOQA
    )
)
STYLE_IMG_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_IMG_OPA  # NOQA
    )
)
STYLE_IMG_RECOLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_IMG_RECOLOR  # NOQA
    )
)
STYLE_IMG_RECOLOR_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_IMG_RECOLOR_OPA  # NOQA
    )
)
STYLE_LINE_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_WIDTH  # NOQA
    )
)
STYLE_LINE_DASH_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_DASH_WIDTH  # NOQA
    )
)
STYLE_LINE_DASH_GAP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_DASH_GAP  # NOQA
    )
)
STYLE_LINE_ROUNDED: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_ROUNDED  # NOQA
    )
)
STYLE_LINE_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_COLOR  # NOQA
    )
)
STYLE_LINE_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_LINE_OPA  # NOQA
    )
)
STYLE_ARC_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ARC_WIDTH  # NOQA
    )
)
STYLE_ARC_ROUNDED: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ARC_ROUNDED  # NOQA
    )
)
STYLE_ARC_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ARC_COLOR  # NOQA
    )
)
STYLE_ARC_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ARC_OPA  # NOQA
    )
)
STYLE_ARC_IMG_SRC: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ARC_IMG_SRC  # NOQA
    )
)
STYLE_TEXT_COLOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_COLOR  # NOQA
    )
)
STYLE_TEXT_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_OPA  # NOQA
    )
)
STYLE_TEXT_FONT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_FONT  # NOQA
    )
)
STYLE_TEXT_LETTER_SPACE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_LETTER_SPACE  # NOQA
    )
)
STYLE_TEXT_LINE_SPACE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_LINE_SPACE  # NOQA
    )
)
STYLE_TEXT_DECOR: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_DECOR  # NOQA
    )
)
STYLE_TEXT_ALIGN: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TEXT_ALIGN  # NOQA
    )
)
STYLE_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_OPA  # NOQA
    )
)
STYLE_COLOR_FILTER_DSC: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_COLOR_FILTER_DSC  # NOQA
    )
)
STYLE_COLOR_FILTER_OPA: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_COLOR_FILTER_OPA  # NOQA
    )
)
STYLE_ANIM: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ANIM  # NOQA
    )
)
STYLE_ANIM_TIME: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ANIM_TIME  # NOQA
    )
)
STYLE_ANIM_SPEED: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_ANIM_SPEED  # NOQA
    )
)
STYLE_TRANSITION: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSITION  # NOQA
    )
)
STYLE_BLEND_MODE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_BLEND_MODE  # NOQA
    )
)
STYLE_TRANSFORM_WIDTH: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_WIDTH  # NOQA
    )
)
STYLE_TRANSFORM_HEIGHT: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_HEIGHT  # NOQA
    )
)
STYLE_TRANSLATE_X: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSLATE_X  # NOQA
    )
)
STYLE_TRANSLATE_Y: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSLATE_Y  # NOQA
    )
)
STYLE_TRANSFORM_ZOOM: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_ZOOM  # NOQA
    )
)
STYLE_TRANSFORM_ANGLE: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_ANGLE  # NOQA
    )
)
STYLE_TRANSFORM_PIVOT_X: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_PIVOT_X  # NOQA
    )
)
STYLE_TRANSFORM_PIVOT_Y: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_TRANSFORM_PIVOT_Y  # NOQA
    )
)
_STYLE_LAST_BUILT_IN_PROP: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib._LV_STYLE_LAST_BUILT_IN_PROP  # NOQA
    )
)
_STYLE_NUM_BUILT_IN_PROPS: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib._LV_STYLE_NUM_BUILT_IN_PROPS  # NOQA
    )
)
STYLE_PROP_ANY: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib.LV_STYLE_PROP_ANY  # NOQA
    )
)
_STYLE_PROP_CONST: style_prop_t = (
    style_prop_t(
        _lib_lvgl.lib._LV_STYLE_PROP_CONST  # NOQA
    )
)

STYLE_RES_NOT_FOUND: style_res_t = (
    style_res_t(
        _lib_lvgl.lib.LV_STYLE_RES_NOT_FOUND  # NOQA
    )
)
STYLE_RES_FOUND: style_res_t = (
    style_res_t(
        _lib_lvgl.lib.LV_STYLE_RES_FOUND  # NOQA
    )
)
STYLE_RES_INHERIT: style_res_t = (
    style_res_t(
        _lib_lvgl.lib.LV_STYLE_RES_INHERIT  # NOQA
    )
)

STATE_DEFAULT: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_DEFAULT  # NOQA
    )
)
STATE_CHECKED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_CHECKED  # NOQA
    )
)
STATE_FOCUSED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_FOCUSED  # NOQA
    )
)
STATE_FOCUS_KEY: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_FOCUS_KEY  # NOQA
    )
)
STATE_EDITED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_EDITED  # NOQA
    )
)
STATE_HOVERED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_HOVERED  # NOQA
    )
)
STATE_PRESSED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_PRESSED  # NOQA
    )
)
STATE_SCROLLED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_SCROLLED  # NOQA
    )
)
STATE_DISABLED: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_DISABLED  # NOQA
    )
)
STATE_USER_1: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_USER_1  # NOQA
    )
)
STATE_USER_2: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_USER_2  # NOQA
    )
)
STATE_USER_3: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_USER_3  # NOQA
    )
)
STATE_USER_4: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_USER_4  # NOQA
    )
)
STATE_ANY: state_t = (
    state_t(
        _lib_lvgl.lib.LV_STATE_ANY  # NOQA
    )
)

PART_MAIN: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_MAIN  # NOQA
    )
)
PART_SCROLLBAR: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_SCROLLBAR  # NOQA
    )
)
PART_INDICATOR: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_INDICATOR  # NOQA
    )
)
PART_KNOB: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_KNOB  # NOQA
    )
)
PART_SELECTED: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_SELECTED  # NOQA
    )
)
PART_ITEMS: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_ITEMS  # NOQA
    )
)
PART_TICKS: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_TICKS  # NOQA
    )
)
PART_CURSOR: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_CURSOR  # NOQA
    )
)
PART_CUSTOM_FIRST: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_CUSTOM_FIRST  # NOQA
    )
)
PART_ANY: part_t = (
    part_t(
        _lib_lvgl.lib.LV_PART_ANY  # NOQA
    )
)

OBJ_FLAG_HIDDEN: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_HIDDEN  # NOQA
    )
)
OBJ_FLAG_CLICKABLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_CLICKABLE  # NOQA
    )
)
OBJ_FLAG_CLICK_FOCUSABLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_CLICK_FOCUSABLE  # NOQA
    )
)
OBJ_FLAG_CHECKABLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_CHECKABLE  # NOQA
    )
)
OBJ_FLAG_SCROLLABLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLLABLE  # NOQA
    )
)
OBJ_FLAG_SCROLL_ELASTIC: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_ELASTIC  # NOQA
    )
)
OBJ_FLAG_SCROLL_MOMENTUM: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_MOMENTUM  # NOQA
    )
)
OBJ_FLAG_SCROLL_ONE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_ONE  # NOQA
    )
)
OBJ_FLAG_SCROLL_CHAIN_HOR: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_CHAIN_HOR  # NOQA
    )
)
OBJ_FLAG_SCROLL_CHAIN_VER: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_CHAIN_VER  # NOQA
    )
)
OBJ_FLAG_SCROLL_CHAIN: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_CHAIN  # NOQA
    )
)
OBJ_FLAG_SCROLL_ON_FOCUS: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_ON_FOCUS  # NOQA
    )
)
OBJ_FLAG_SCROLL_WITH_ARROW: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SCROLL_WITH_ARROW  # NOQA
    )
)
OBJ_FLAG_SNAPPABLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_SNAPPABLE  # NOQA
    )
)
OBJ_FLAG_PRESS_LOCK: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_PRESS_LOCK  # NOQA
    )
)
OBJ_FLAG_EVENT_BUBBLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_EVENT_BUBBLE  # NOQA
    )
)
OBJ_FLAG_GESTURE_BUBBLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_GESTURE_BUBBLE  # NOQA
    )
)
OBJ_FLAG_ADV_HITTEST: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_ADV_HITTEST  # NOQA
    )
)
OBJ_FLAG_IGNORE_LAYOUT: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_IGNORE_LAYOUT  # NOQA
    )
)
OBJ_FLAG_FLOATING: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_FLOATING  # NOQA
    )
)
OBJ_FLAG_OVERFLOW_VISIBLE: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_OVERFLOW_VISIBLE  # NOQA
    )
)
OBJ_FLAG_LAYOUT_1: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_LAYOUT_1  # NOQA
    )
)
OBJ_FLAG_LAYOUT_2: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_LAYOUT_2  # NOQA
    )
)
OBJ_FLAG_WIDGET_1: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_WIDGET_1  # NOQA
    )
)
OBJ_FLAG_WIDGET_2: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_WIDGET_2  # NOQA
    )
)
OBJ_FLAG_USER_1: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_USER_1  # NOQA
    )
)
OBJ_FLAG_USER_2: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_USER_2  # NOQA
    )
)
OBJ_FLAG_USER_3: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_USER_3  # NOQA
    )
)
OBJ_FLAG_USER_4: _obj_flag_t = (
    _obj_flag_t(
        _lib_lvgl.lib.LV_OBJ_FLAG_USER_4  # NOQA
    )
)

OBJ_DRAW_PART_RECTANGLE: obj_draw_part_type_t = (
    obj_draw_part_type_t(
        _lib_lvgl.lib.LV_OBJ_DRAW_PART_RECTANGLE  # NOQA
    )
)
OBJ_DRAW_PART_BORDER_POST: obj_draw_part_type_t = (
    obj_draw_part_type_t(
        _lib_lvgl.lib.LV_OBJ_DRAW_PART_BORDER_POST  # NOQA
    )
)
OBJ_DRAW_PART_SCROLLBAR: obj_draw_part_type_t = (
    obj_draw_part_type_t(
        _lib_lvgl.lib.LV_OBJ_DRAW_PART_SCROLLBAR  # NOQA
    )
)

EVENT_ALL: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_ALL  # NOQA
    )
)
EVENT_PRESSED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_PRESSED  # NOQA
    )
)
EVENT_PRESSING: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_PRESSING  # NOQA
    )
)
EVENT_PRESS_LOST: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_PRESS_LOST  # NOQA
    )
)
EVENT_SHORT_CLICKED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SHORT_CLICKED  # NOQA
    )
)
EVENT_LONG_PRESSED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_LONG_PRESSED  # NOQA
    )
)
EVENT_LONG_PRESSED_REPEAT: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_LONG_PRESSED_REPEAT  # NOQA
    )
)
EVENT_CLICKED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_CLICKED  # NOQA
    )
)
EVENT_RELEASED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_RELEASED  # NOQA
    )
)
EVENT_SCROLL_BEGIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCROLL_BEGIN  # NOQA
    )
)
EVENT_SCROLL_THROW_BEGIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCROLL_THROW_BEGIN  # NOQA
    )
)
EVENT_SCROLL_END: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCROLL_END  # NOQA
    )
)
EVENT_SCROLL: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCROLL  # NOQA
    )
)
EVENT_GESTURE: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_GESTURE  # NOQA
    )
)
EVENT_KEY: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_KEY  # NOQA
    )
)
EVENT_FOCUSED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_FOCUSED  # NOQA
    )
)
EVENT_DEFOCUSED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DEFOCUSED  # NOQA
    )
)
EVENT_LEAVE: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_LEAVE  # NOQA
    )
)
EVENT_HIT_TEST: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_HIT_TEST  # NOQA
    )
)
EVENT_COVER_CHECK: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_COVER_CHECK  # NOQA
    )
)
EVENT_REFR_EXT_DRAW_SIZE: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_REFR_EXT_DRAW_SIZE  # NOQA
    )
)
EVENT_DRAW_MAIN_BEGIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_MAIN_BEGIN  # NOQA
    )
)
EVENT_DRAW_MAIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_MAIN  # NOQA
    )
)
EVENT_DRAW_MAIN_END: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_MAIN_END  # NOQA
    )
)
EVENT_DRAW_POST_BEGIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_POST_BEGIN  # NOQA
    )
)
EVENT_DRAW_POST: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_POST  # NOQA
    )
)
EVENT_DRAW_POST_END: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_POST_END  # NOQA
    )
)
EVENT_DRAW_PART_BEGIN: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_PART_BEGIN  # NOQA
    )
)
EVENT_DRAW_PART_END: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DRAW_PART_END  # NOQA
    )
)
EVENT_VALUE_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_VALUE_CHANGED  # NOQA
    )
)
EVENT_INSERT: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_INSERT  # NOQA
    )
)
EVENT_REFRESH: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_REFRESH  # NOQA
    )
)
EVENT_READY: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_READY  # NOQA
    )
)
EVENT_CANCEL: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_CANCEL  # NOQA
    )
)
EVENT_DELETE: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_DELETE  # NOQA
    )
)
EVENT_CHILD_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_CHILD_CHANGED  # NOQA
    )
)
EVENT_CHILD_CREATED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_CHILD_CREATED  # NOQA
    )
)
EVENT_CHILD_DELETED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_CHILD_DELETED  # NOQA
    )
)
EVENT_SCREEN_UNLOAD_START: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCREEN_UNLOAD_START  # NOQA
    )
)
EVENT_SCREEN_LOAD_START: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCREEN_LOAD_START  # NOQA
    )
)
EVENT_SCREEN_LOADED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCREEN_LOADED  # NOQA
    )
)
EVENT_SCREEN_UNLOADED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SCREEN_UNLOADED  # NOQA
    )
)
EVENT_SIZE_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_SIZE_CHANGED  # NOQA
    )
)
EVENT_STYLE_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_STYLE_CHANGED  # NOQA
    )
)
EVENT_LAYOUT_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_LAYOUT_CHANGED  # NOQA
    )
)
EVENT_GET_SELF_SIZE: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_GET_SELF_SIZE  # NOQA
    )
)
EVENT_MSG_RECEIVED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_MSG_RECEIVED  # NOQA
    )
)
EVENT_INVALIDATE_AREA: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_INVALIDATE_AREA  # NOQA
    )
)
EVENT_RENDER_START: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_RENDER_START  # NOQA
    )
)
EVENT_RENDER_READY: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_RENDER_READY  # NOQA
    )
)
EVENT_RESOLUTION_CHANGED: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_RESOLUTION_CHANGED  # NOQA
    )
)
EVENT_REFR_START: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_REFR_START  # NOQA
    )
)
EVENT_REFR_FINISH: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_REFR_FINISH  # NOQA
    )
)
_EVENT_LAST: event_code_t = (
    event_code_t(
        _lib_lvgl.lib._LV_EVENT_LAST  # NOQA
    )
)
EVENT_PREPROCESS: event_code_t = (
    event_code_t(
        _lib_lvgl.lib.LV_EVENT_PREPROCESS  # NOQA
    )
)

DISP_ROTATION_0: disp_rotation_t = (
    disp_rotation_t(
        _lib_lvgl.lib.LV_DISP_ROTATION_0  # NOQA
    )
)
DISP_ROTATION_90: disp_rotation_t = (
    disp_rotation_t(
        _lib_lvgl.lib.LV_DISP_ROTATION_90  # NOQA
    )
)
DISP_ROTATION_180: disp_rotation_t = (
    disp_rotation_t(
        _lib_lvgl.lib.LV_DISP_ROTATION_180  # NOQA
    )
)
DISP_ROTATION_270: disp_rotation_t = (
    disp_rotation_t(
        _lib_lvgl.lib.LV_DISP_ROTATION_270  # NOQA
    )
)

DISP_RENDER_MODE_PARTIAL: disp_render_mode_t = (
    disp_render_mode_t(
        _lib_lvgl.lib.LV_DISP_RENDER_MODE_PARTIAL  # NOQA
    )
)
DISP_RENDER_MODE_DIRECT: disp_render_mode_t = (
    disp_render_mode_t(
        _lib_lvgl.lib.LV_DISP_RENDER_MODE_DIRECT  # NOQA
    )
)
DISP_RENDER_MODE_FULL: disp_render_mode_t = (
    disp_render_mode_t(
        _lib_lvgl.lib.LV_DISP_RENDER_MODE_FULL  # NOQA
    )
)

SCR_LOAD_ANIM_NONE: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_NONE  # NOQA
    )
)
SCR_LOAD_ANIM_OVER_LEFT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OVER_LEFT  # NOQA
    )
)
SCR_LOAD_ANIM_OVER_RIGHT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OVER_RIGHT  # NOQA
    )
)
SCR_LOAD_ANIM_OVER_TOP: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OVER_TOP  # NOQA
    )
)
SCR_LOAD_ANIM_OVER_BOTTOM: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OVER_BOTTOM  # NOQA
    )
)
SCR_LOAD_ANIM_MOVE_LEFT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_MOVE_LEFT  # NOQA
    )
)
SCR_LOAD_ANIM_MOVE_RIGHT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_MOVE_RIGHT  # NOQA
    )
)
SCR_LOAD_ANIM_MOVE_TOP: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_MOVE_TOP  # NOQA
    )
)
SCR_LOAD_ANIM_MOVE_BOTTOM: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_MOVE_BOTTOM  # NOQA
    )
)
SCR_LOAD_ANIM_FADE_IN: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_FADE_IN  # NOQA
    )
)
SCR_LOAD_ANIM_FADE_ON: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_FADE_ON  # NOQA
    )
)
SCR_LOAD_ANIM_FADE_OUT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_FADE_OUT  # NOQA
    )
)
SCR_LOAD_ANIM_OUT_LEFT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OUT_LEFT  # NOQA
    )
)
SCR_LOAD_ANIM_OUT_RIGHT: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OUT_RIGHT  # NOQA
    )
)
SCR_LOAD_ANIM_OUT_TOP: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OUT_TOP  # NOQA
    )
)
SCR_LOAD_ANIM_OUT_BOTTOM: scr_load_anim_t = (
    scr_load_anim_t(
        _lib_lvgl.lib.LV_SCR_LOAD_ANIM_OUT_BOTTOM  # NOQA
    )
)

OBJ_TREE_WALK_NEXT: obj_tree_walk_res_t = (
    obj_tree_walk_res_t(
        _lib_lvgl.lib.LV_OBJ_TREE_WALK_NEXT  # NOQA
    )
)
OBJ_TREE_WALK_SKIP_CHILDREN: obj_tree_walk_res_t = (
    obj_tree_walk_res_t(
        _lib_lvgl.lib.LV_OBJ_TREE_WALK_SKIP_CHILDREN  # NOQA
    )
)
OBJ_TREE_WALK_END: obj_tree_walk_res_t = (
    obj_tree_walk_res_t(
        _lib_lvgl.lib.LV_OBJ_TREE_WALK_END  # NOQA
    )
)

SCROLLBAR_MODE_OFF: scrollbar_mode_t = (
    scrollbar_mode_t(
        _lib_lvgl.lib.LV_SCROLLBAR_MODE_OFF  # NOQA
    )
)
SCROLLBAR_MODE_ON: scrollbar_mode_t = (
    scrollbar_mode_t(
        _lib_lvgl.lib.LV_SCROLLBAR_MODE_ON  # NOQA
    )
)
SCROLLBAR_MODE_ACTIVE: scrollbar_mode_t = (
    scrollbar_mode_t(
        _lib_lvgl.lib.LV_SCROLLBAR_MODE_ACTIVE  # NOQA
    )
)
SCROLLBAR_MODE_AUTO: scrollbar_mode_t = (
    scrollbar_mode_t(
        _lib_lvgl.lib.LV_SCROLLBAR_MODE_AUTO  # NOQA
    )
)

SCROLL_SNAP_NONE: scroll_snap_t = (
    scroll_snap_t(
        _lib_lvgl.lib.LV_SCROLL_SNAP_NONE  # NOQA
    )
)
SCROLL_SNAP_START: scroll_snap_t = (
    scroll_snap_t(
        _lib_lvgl.lib.LV_SCROLL_SNAP_START  # NOQA
    )
)
SCROLL_SNAP_END: scroll_snap_t = (
    scroll_snap_t(
        _lib_lvgl.lib.LV_SCROLL_SNAP_END  # NOQA
    )
)
SCROLL_SNAP_CENTER: scroll_snap_t = (
    scroll_snap_t(
        _lib_lvgl.lib.LV_SCROLL_SNAP_CENTER  # NOQA
    )
)

_STYLE_STATE_CMP_SAME: _style_state_cmp_t = (
    _style_state_cmp_t(
        _lib_lvgl.lib._LV_STYLE_STATE_CMP_SAME  # NOQA
    )
)
_STYLE_STATE_CMP_DIFF_REDRAW: _style_state_cmp_t = (
    _style_state_cmp_t(
        _lib_lvgl.lib._LV_STYLE_STATE_CMP_DIFF_REDRAW  # NOQA
    )
)
_STYLE_STATE_CMP_DIFF_DRAW_PAD: _style_state_cmp_t = (
    _style_state_cmp_t(
        _lib_lvgl.lib._LV_STYLE_STATE_CMP_DIFF_DRAW_PAD  # NOQA
    )
)
_STYLE_STATE_CMP_DIFF_LAYOUT: _style_state_cmp_t = (
    _style_state_cmp_t(
        _lib_lvgl.lib._LV_STYLE_STATE_CMP_DIFF_LAYOUT  # NOQA
    )
)

FS_RES_OK: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_OK  # NOQA
    )
)
FS_RES_HW_ERR: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_HW_ERR  # NOQA
    )
)
FS_RES_FS_ERR: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_FS_ERR  # NOQA
    )
)
FS_RES_NOT_EX: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_NOT_EX  # NOQA
    )
)
FS_RES_FULL: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_FULL  # NOQA
    )
)
FS_RES_LOCKED: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_LOCKED  # NOQA
    )
)
FS_RES_DENIED: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_DENIED  # NOQA
    )
)
FS_RES_BUSY: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_BUSY  # NOQA
    )
)
FS_RES_TOUT: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_TOUT  # NOQA
    )
)
FS_RES_NOT_IMP: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_NOT_IMP  # NOQA
    )
)
FS_RES_OUT_OF_MEM: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_OUT_OF_MEM  # NOQA
    )
)
FS_RES_INV_PARAM: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_INV_PARAM  # NOQA
    )
)
FS_RES_UNKNOWN: fs_res_t = (
    fs_res_t(
        _lib_lvgl.lib.LV_FS_RES_UNKNOWN  # NOQA
    )
)

FS_MODE_WR: fs_mode_t = (
    fs_mode_t(
        _lib_lvgl.lib.LV_FS_MODE_WR  # NOQA
    )
)
FS_MODE_RD: fs_mode_t = (
    fs_mode_t(
        _lib_lvgl.lib.LV_FS_MODE_RD  # NOQA
    )
)

FS_SEEK_SET: fs_whence_t = (
    fs_whence_t(
        _lib_lvgl.lib.LV_FS_SEEK_SET  # NOQA
    )
)
FS_SEEK_CUR: fs_whence_t = (
    fs_whence_t(
        _lib_lvgl.lib.LV_FS_SEEK_CUR  # NOQA
    )
)
FS_SEEK_END: fs_whence_t = (
    fs_whence_t(
        _lib_lvgl.lib.LV_FS_SEEK_END  # NOQA
    )
)

IMG_SRC_VARIABLE: img_src_t = (
    img_src_t(
        _lib_lvgl.lib.LV_IMG_SRC_VARIABLE  # NOQA
    )
)
IMG_SRC_FILE: img_src_t = (
    img_src_t(
        _lib_lvgl.lib.LV_IMG_SRC_FILE  # NOQA
    )
)
IMG_SRC_SYMBOL: img_src_t = (
    img_src_t(
        _lib_lvgl.lib.LV_IMG_SRC_SYMBOL  # NOQA
    )
)
IMG_SRC_UNKNOWN: img_src_t = (
    img_src_t(
        _lib_lvgl.lib.LV_IMG_SRC_UNKNOWN  # NOQA
    )
)

RADIUS_CIRCLE: int32_t = (
    int32_t(
        _lib_lvgl.lib.ENUM_LV_RADIUS_CIRCLE  # NOQA
    )
)

DRAW_MASK_RES_TRANSP: draw_mask_res_t = (
    draw_mask_res_t(
        _lib_lvgl.lib.LV_DRAW_MASK_RES_TRANSP  # NOQA
    )
)
DRAW_MASK_RES_FULL_COVER: draw_mask_res_t = (
    draw_mask_res_t(
        _lib_lvgl.lib.LV_DRAW_MASK_RES_FULL_COVER  # NOQA
    )
)
DRAW_MASK_RES_CHANGED: draw_mask_res_t = (
    draw_mask_res_t(
        _lib_lvgl.lib.LV_DRAW_MASK_RES_CHANGED  # NOQA
    )
)
DRAW_MASK_RES_UNKNOWN: draw_mask_res_t = (
    draw_mask_res_t(
        _lib_lvgl.lib.LV_DRAW_MASK_RES_UNKNOWN  # NOQA
    )
)

DRAW_MASK_TYPE_LINE: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_LINE  # NOQA
    )
)
DRAW_MASK_TYPE_ANGLE: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_ANGLE  # NOQA
    )
)
DRAW_MASK_TYPE_RADIUS: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_RADIUS  # NOQA
    )
)
DRAW_MASK_TYPE_FADE: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_FADE  # NOQA
    )
)
DRAW_MASK_TYPE_MAP: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_MAP  # NOQA
    )
)
DRAW_MASK_TYPE_POLYGON: draw_mask_type_t = (
    draw_mask_type_t(
        _lib_lvgl.lib.LV_DRAW_MASK_TYPE_POLYGON  # NOQA
    )
)

DRAW_MASK_LINE_SIDE_LEFT: draw_mask_line_side_t = (
    draw_mask_line_side_t(
        _lib_lvgl.lib.LV_DRAW_MASK_LINE_SIDE_LEFT  # NOQA
    )
)
DRAW_MASK_LINE_SIDE_RIGHT: draw_mask_line_side_t = (
    draw_mask_line_side_t(
        _lib_lvgl.lib.LV_DRAW_MASK_LINE_SIDE_RIGHT  # NOQA
    )
)
DRAW_MASK_LINE_SIDE_TOP: draw_mask_line_side_t = (
    draw_mask_line_side_t(
        _lib_lvgl.lib.LV_DRAW_MASK_LINE_SIDE_TOP  # NOQA
    )
)
DRAW_MASK_LINE_SIDE_BOTTOM: draw_mask_line_side_t = (
    draw_mask_line_side_t(
        _lib_lvgl.lib.LV_DRAW_MASK_LINE_SIDE_BOTTOM  # NOQA
    )
)

DRAW_LAYER_FLAG_NONE: draw_layer_flags_t = (
    draw_layer_flags_t(
        _lib_lvgl.lib.LV_DRAW_LAYER_FLAG_NONE  # NOQA
    )
)
DRAW_LAYER_FLAG_HAS_ALPHA: draw_layer_flags_t = (
    draw_layer_flags_t(
        _lib_lvgl.lib.LV_DRAW_LAYER_FLAG_HAS_ALPHA  # NOQA
    )
)
DRAW_LAYER_FLAG_CAN_SUBDIVIDE: draw_layer_flags_t = (
    draw_layer_flags_t(
        _lib_lvgl.lib.LV_DRAW_LAYER_FLAG_CAN_SUBDIVIDE  # NOQA
    )
)

COVER_RES_COVER: cover_res_t = (
    cover_res_t(
        _lib_lvgl.lib.LV_COVER_RES_COVER  # NOQA
    )
)
COVER_RES_NOT_COVER: cover_res_t = (
    cover_res_t(
        _lib_lvgl.lib.LV_COVER_RES_NOT_COVER  # NOQA
    )
)
COVER_RES_MASKED: cover_res_t = (
    cover_res_t(
        _lib_lvgl.lib.LV_COVER_RES_MASKED  # NOQA
    )
)

LAYER_TYPE_NONE: layer_type_t = (
    layer_type_t(
        _lib_lvgl.lib.LV_LAYER_TYPE_NONE  # NOQA
    )
)
LAYER_TYPE_SIMPLE: layer_type_t = (
    layer_type_t(
        _lib_lvgl.lib.LV_LAYER_TYPE_SIMPLE  # NOQA
    )
)
LAYER_TYPE_TRANSFORM: layer_type_t = (
    layer_type_t(
        _lib_lvgl.lib.LV_LAYER_TYPE_TRANSFORM  # NOQA
    )
)

OBJ_CLASS_EDITABLE_INHERIT: obj_class_editable_t = (
    obj_class_editable_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_EDITABLE_INHERIT  # NOQA
    )
)
OBJ_CLASS_EDITABLE_TRUE: obj_class_editable_t = (
    obj_class_editable_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_EDITABLE_TRUE  # NOQA
    )
)
OBJ_CLASS_EDITABLE_FALSE: obj_class_editable_t = (
    obj_class_editable_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_EDITABLE_FALSE  # NOQA
    )
)

OBJ_CLASS_GROUP_DEF_INHERIT: obj_class_group_def_t = (
    obj_class_group_def_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_GROUP_DEF_INHERIT  # NOQA
    )
)
OBJ_CLASS_GROUP_DEF_TRUE: obj_class_group_def_t = (
    obj_class_group_def_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_GROUP_DEF_TRUE  # NOQA
    )
)
OBJ_CLASS_GROUP_DEF_FALSE: obj_class_group_def_t = (
    obj_class_group_def_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_GROUP_DEF_FALSE  # NOQA
    )
)

OBJ_CLASS_THEME_INHERITABLE_FALSE: obj_class_theme_inheritable_t = (
    obj_class_theme_inheritable_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_THEME_INHERITABLE_FALSE  # NOQA
    )
)
OBJ_CLASS_THEME_INHERITABLE_TRUE: obj_class_theme_inheritable_t = (
    obj_class_theme_inheritable_t(
        _lib_lvgl.lib.LV_OBJ_CLASS_THEME_INHERITABLE_TRUE  # NOQA
    )
)

KEY_UP: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_UP  # NOQA
    )
)
KEY_DOWN: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_DOWN  # NOQA
    )
)
KEY_RIGHT: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_RIGHT  # NOQA
    )
)
KEY_LEFT: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_LEFT  # NOQA
    )
)
KEY_ESC: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_ESC  # NOQA
    )
)
KEY_DEL: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_DEL  # NOQA
    )
)
KEY_BACKSPACE: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_BACKSPACE  # NOQA
    )
)
KEY_ENTER: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_ENTER  # NOQA
    )
)
KEY_NEXT: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_NEXT  # NOQA
    )
)
KEY_PREV: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_PREV  # NOQA
    )
)
KEY_HOME: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_HOME  # NOQA
    )
)
KEY_END: key_t = (
    key_t(
        _lib_lvgl.lib.LV_KEY_END  # NOQA
    )
)

GROUP_REFOCUS_POLICY_NEXT: group_refocus_policy_t = (
    group_refocus_policy_t(
        _lib_lvgl.lib.LV_GROUP_REFOCUS_POLICY_NEXT  # NOQA
    )
)
GROUP_REFOCUS_POLICY_PREV: group_refocus_policy_t = (
    group_refocus_policy_t(
        _lib_lvgl.lib.LV_GROUP_REFOCUS_POLICY_PREV  # NOQA
    )
)

INDEV_TYPE_NONE: indev_type_t = (
    indev_type_t(
        _lib_lvgl.lib.LV_INDEV_TYPE_NONE  # NOQA
    )
)
INDEV_TYPE_POINTER: indev_type_t = (
    indev_type_t(
        _lib_lvgl.lib.LV_INDEV_TYPE_POINTER  # NOQA
    )
)
INDEV_TYPE_KEYPAD: indev_type_t = (
    indev_type_t(
        _lib_lvgl.lib.LV_INDEV_TYPE_KEYPAD  # NOQA
    )
)
INDEV_TYPE_BUTTON: indev_type_t = (
    indev_type_t(
        _lib_lvgl.lib.LV_INDEV_TYPE_BUTTON  # NOQA
    )
)
INDEV_TYPE_ENCODER: indev_type_t = (
    indev_type_t(
        _lib_lvgl.lib.LV_INDEV_TYPE_ENCODER  # NOQA
    )
)

INDEV_STATE_RELEASED: indev_state_t = (
    indev_state_t(
        _lib_lvgl.lib.LV_INDEV_STATE_RELEASED  # NOQA
    )
)
INDEV_STATE_PRESSED: indev_state_t = (
    indev_state_t(
        _lib_lvgl.lib.LV_INDEV_STATE_PRESSED  # NOQA
    )
)

FONT_FMT_TXT_CMAP_FORMAT0_FULL: font_fmt_txt_cmap_type_t = (
    font_fmt_txt_cmap_type_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL  # NOQA
    )
)
FONT_FMT_TXT_CMAP_SPARSE_FULL: font_fmt_txt_cmap_type_t = (
    font_fmt_txt_cmap_type_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_CMAP_SPARSE_FULL  # NOQA
    )
)
FONT_FMT_TXT_CMAP_FORMAT0_TINY: font_fmt_txt_cmap_type_t = (
    font_fmt_txt_cmap_type_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY  # NOQA
    )
)
FONT_FMT_TXT_CMAP_SPARSE_TINY: font_fmt_txt_cmap_type_t = (
    font_fmt_txt_cmap_type_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_CMAP_SPARSE_TINY  # NOQA
    )
)

FONT_FMT_TXT_PLAIN: font_fmt_txt_bitmap_format_t = (
    font_fmt_txt_bitmap_format_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_PLAIN  # NOQA
    )
)
FONT_FMT_TXT_COMPRESSED: font_fmt_txt_bitmap_format_t = (
    font_fmt_txt_bitmap_format_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_COMPRESSED  # NOQA
    )
)
FONT_FMT_TXT_COMPRESSED_NO_PREFILTER: font_fmt_txt_bitmap_format_t = (
    font_fmt_txt_bitmap_format_t(
        _lib_lvgl.lib.LV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER  # NOQA
    )
)

IMG_SIZE_MODE_VIRTUAL: img_size_mode_t = (
    img_size_mode_t(
        _lib_lvgl.lib.LV_IMG_SIZE_MODE_VIRTUAL  # NOQA
    )
)
IMG_SIZE_MODE_REAL: img_size_mode_t = (
    img_size_mode_t(
        _lib_lvgl.lib.LV_IMG_SIZE_MODE_REAL  # NOQA
    )
)

ANIM_IMG_PART_MAIN: animimg_part_t = (
    animimg_part_t(
        _lib_lvgl.lib.LV_ANIM_IMG_PART_MAIN  # NOQA
    )
)

ARC_MODE_NORMAL: arc_mode_t = (
    arc_mode_t(
        _lib_lvgl.lib.LV_ARC_MODE_NORMAL  # NOQA
    )
)
ARC_MODE_SYMMETRICAL: arc_mode_t = (
    arc_mode_t(
        _lib_lvgl.lib.LV_ARC_MODE_SYMMETRICAL  # NOQA
    )
)
ARC_MODE_REVERSE: arc_mode_t = (
    arc_mode_t(
        _lib_lvgl.lib.LV_ARC_MODE_REVERSE  # NOQA
    )
)

ARC_DRAW_PART_BACKGROUND: arc_draw_part_type_t = (
    arc_draw_part_type_t(
        _lib_lvgl.lib.LV_ARC_DRAW_PART_BACKGROUND  # NOQA
    )
)
ARC_DRAW_PART_FOREGROUND: arc_draw_part_type_t = (
    arc_draw_part_type_t(
        _lib_lvgl.lib.LV_ARC_DRAW_PART_FOREGROUND  # NOQA
    )
)
ARC_DRAW_PART_KNOB: arc_draw_part_type_t = (
    arc_draw_part_type_t(
        _lib_lvgl.lib.LV_ARC_DRAW_PART_KNOB  # NOQA
    )
)

LABEL_DOT_NUM: uint32_t = (
    uint32_t(
        _lib_lvgl.lib.ENUM_LV_LABEL_DOT_NUM  # NOQA
    )
)

LABEL_POS_LAST: uint32_t = (
    uint32_t(
        _lib_lvgl.lib.ENUM_LV_LABEL_POS_LAST  # NOQA
    )
)

LABEL_TEXT_SELECTION_OFF: uint32_t = (
    uint32_t(
        _lib_lvgl.lib.ENUM_LV_LABEL_TEXT_SELECTION_OFF  # NOQA
    )
)

LABEL_LONG_WRAP: label_long_mode_t = (
    label_long_mode_t(
        _lib_lvgl.lib.LV_LABEL_LONG_WRAP  # NOQA
    )
)
LABEL_LONG_DOT: label_long_mode_t = (
    label_long_mode_t(
        _lib_lvgl.lib.LV_LABEL_LONG_DOT  # NOQA
    )
)
LABEL_LONG_SCROLL: label_long_mode_t = (
    label_long_mode_t(
        _lib_lvgl.lib.LV_LABEL_LONG_SCROLL  # NOQA
    )
)
LABEL_LONG_SCROLL_CIRCULAR: label_long_mode_t = (
    label_long_mode_t(
        _lib_lvgl.lib.LV_LABEL_LONG_SCROLL_CIRCULAR  # NOQA
    )
)
LABEL_LONG_CLIP: label_long_mode_t = (
    label_long_mode_t(
        _lib_lvgl.lib.LV_LABEL_LONG_CLIP  # NOQA
    )
)

BAR_MODE_NORMAL: bar_mode_t = (
    bar_mode_t(
        _lib_lvgl.lib.LV_BAR_MODE_NORMAL  # NOQA
    )
)
BAR_MODE_SYMMETRICAL: bar_mode_t = (
    bar_mode_t(
        _lib_lvgl.lib.LV_BAR_MODE_SYMMETRICAL  # NOQA
    )
)
BAR_MODE_RANGE: bar_mode_t = (
    bar_mode_t(
        _lib_lvgl.lib.LV_BAR_MODE_RANGE  # NOQA
    )
)

BAR_DRAW_PART_INDICATOR: bar_draw_part_type_t = (
    bar_draw_part_type_t(
        _lib_lvgl.lib.LV_BAR_DRAW_PART_INDICATOR  # NOQA
    )
)

BTNMATRIX_BTN_NONE: uint16_t = (
    uint16_t(
        _lib_lvgl.lib.ENUM_LV_BTNMATRIX_BTN_NONE  # NOQA
    )
)

_BTNMATRIX_WIDTH: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib._LV_BTNMATRIX_WIDTH  # NOQA
    )
)
BTNMATRIX_CTRL_HIDDEN: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_HIDDEN  # NOQA
    )
)
BTNMATRIX_CTRL_NO_REPEAT: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_NO_REPEAT  # NOQA
    )
)
BTNMATRIX_CTRL_DISABLED: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_DISABLED  # NOQA
    )
)
BTNMATRIX_CTRL_CHECKABLE: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_CHECKABLE  # NOQA
    )
)
BTNMATRIX_CTRL_CHECKED: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_CHECKED  # NOQA
    )
)
BTNMATRIX_CTRL_CLICK_TRIG: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_CLICK_TRIG  # NOQA
    )
)
BTNMATRIX_CTRL_POPOVER: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_POPOVER  # NOQA
    )
)
BTNMATRIX_CTRL_RECOLOR: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_RECOLOR  # NOQA
    )
)
_BTNMATRIX_CTRL_RESERVED_1: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib._LV_BTNMATRIX_CTRL_RESERVED_1  # NOQA
    )
)
_BTNMATRIX_CTRL_RESERVED_2: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib._LV_BTNMATRIX_CTRL_RESERVED_2  # NOQA
    )
)
BTNMATRIX_CTRL_CUSTOM_1: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_CUSTOM_1  # NOQA
    )
)
BTNMATRIX_CTRL_CUSTOM_2: btnmatrix_ctrl_t = (
    btnmatrix_ctrl_t(
        _lib_lvgl.lib.LV_BTNMATRIX_CTRL_CUSTOM_2  # NOQA
    )
)

BTNMATRIX_DRAW_PART_BTN: btnmatrix_draw_part_type_t = (
    btnmatrix_draw_part_type_t(
        _lib_lvgl.lib.LV_BTNMATRIX_DRAW_PART_BTN  # NOQA
    )
)

CHART_POINT_NONE: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_CHART_POINT_NONE  # NOQA
    )
)

CHART_TYPE_NONE: chart_type_t = (
    chart_type_t(
        _lib_lvgl.lib.LV_CHART_TYPE_NONE  # NOQA
    )
)
CHART_TYPE_LINE: chart_type_t = (
    chart_type_t(
        _lib_lvgl.lib.LV_CHART_TYPE_LINE  # NOQA
    )
)
CHART_TYPE_BAR: chart_type_t = (
    chart_type_t(
        _lib_lvgl.lib.LV_CHART_TYPE_BAR  # NOQA
    )
)
CHART_TYPE_SCATTER: chart_type_t = (
    chart_type_t(
        _lib_lvgl.lib.LV_CHART_TYPE_SCATTER  # NOQA
    )
)

CHART_UPDATE_MODE_SHIFT: chart_update_mode_t = (
    chart_update_mode_t(
        _lib_lvgl.lib.LV_CHART_UPDATE_MODE_SHIFT  # NOQA
    )
)
CHART_UPDATE_MODE_CIRCULAR: chart_update_mode_t = (
    chart_update_mode_t(
        _lib_lvgl.lib.LV_CHART_UPDATE_MODE_CIRCULAR  # NOQA
    )
)

CHART_AXIS_PRIMARY_Y: chart_axis_t = (
    chart_axis_t(
        _lib_lvgl.lib.LV_CHART_AXIS_PRIMARY_Y  # NOQA
    )
)
CHART_AXIS_SECONDARY_Y: chart_axis_t = (
    chart_axis_t(
        _lib_lvgl.lib.LV_CHART_AXIS_SECONDARY_Y  # NOQA
    )
)
CHART_AXIS_PRIMARY_X: chart_axis_t = (
    chart_axis_t(
        _lib_lvgl.lib.LV_CHART_AXIS_PRIMARY_X  # NOQA
    )
)
CHART_AXIS_SECONDARY_X: chart_axis_t = (
    chart_axis_t(
        _lib_lvgl.lib.LV_CHART_AXIS_SECONDARY_X  # NOQA
    )
)
_CHART_AXIS_LAST: chart_axis_t = (
    chart_axis_t(
        _lib_lvgl.lib._LV_CHART_AXIS_LAST  # NOQA
    )
)

CHART_DRAW_PART_DIV_LINE_INIT: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_DIV_LINE_INIT  # NOQA
    )
)
CHART_DRAW_PART_DIV_LINE_HOR: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_DIV_LINE_HOR  # NOQA
    )
)
CHART_DRAW_PART_DIV_LINE_VER: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_DIV_LINE_VER  # NOQA
    )
)
CHART_DRAW_PART_LINE_AND_POINT: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_LINE_AND_POINT  # NOQA
    )
)
CHART_DRAW_PART_BAR: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_BAR  # NOQA
    )
)
CHART_DRAW_PART_CURSOR: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_CURSOR  # NOQA
    )
)
CHART_DRAW_PART_TICK_LABEL: chart_draw_part_type_t = (
    chart_draw_part_type_t(
        _lib_lvgl.lib.LV_CHART_DRAW_PART_TICK_LABEL  # NOQA
    )
)

CHECKBOX_DRAW_PART_BOX: checkbox_draw_part_type_t = (
    checkbox_draw_part_type_t(
        _lib_lvgl.lib.LV_CHECKBOX_DRAW_PART_BOX  # NOQA
    )
)

COLORWHEEL_MODE_HUE: colorwheel_mode_t = (
    colorwheel_mode_t(
        _lib_lvgl.lib.LV_COLORWHEEL_MODE_HUE  # NOQA
    )
)
COLORWHEEL_MODE_SATURATION: colorwheel_mode_t = (
    colorwheel_mode_t(
        _lib_lvgl.lib.LV_COLORWHEEL_MODE_SATURATION  # NOQA
    )
)
COLORWHEEL_MODE_VALUE: colorwheel_mode_t = (
    colorwheel_mode_t(
        _lib_lvgl.lib.LV_COLORWHEEL_MODE_VALUE  # NOQA
    )
)

DROPDOWN_POS_LAST: uint32_t = (
    uint32_t(
        _lib_lvgl.lib.ENUM_LV_DROPDOWN_POS_LAST  # NOQA
    )
)

IMGBTN_STATE_RELEASED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_RELEASED  # NOQA
    )
)
IMGBTN_STATE_PRESSED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_PRESSED  # NOQA
    )
)
IMGBTN_STATE_DISABLED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_DISABLED  # NOQA
    )
)
IMGBTN_STATE_CHECKED_RELEASED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_CHECKED_RELEASED  # NOQA
    )
)
IMGBTN_STATE_CHECKED_PRESSED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_CHECKED_PRESSED  # NOQA
    )
)
IMGBTN_STATE_CHECKED_DISABLED: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib.LV_IMGBTN_STATE_CHECKED_DISABLED  # NOQA
    )
)
_IMGBTN_STATE_NUM: imgbtn_state_t = (
    imgbtn_state_t(
        _lib_lvgl.lib._LV_IMGBTN_STATE_NUM  # NOQA
    )
)

KEYBOARD_MODE_TEXT_LOWER: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_TEXT_LOWER  # NOQA
    )
)
KEYBOARD_MODE_TEXT_UPPER: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_TEXT_UPPER  # NOQA
    )
)
KEYBOARD_MODE_SPECIAL: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_SPECIAL  # NOQA
    )
)
KEYBOARD_MODE_NUMBER: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_NUMBER  # NOQA
    )
)
KEYBOARD_MODE_USER_1: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_USER_1  # NOQA
    )
)
KEYBOARD_MODE_USER_2: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_USER_2  # NOQA
    )
)
KEYBOARD_MODE_USER_3: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_USER_3  # NOQA
    )
)
KEYBOARD_MODE_USER_4: keyboard_mode_t = (
    keyboard_mode_t(
        _lib_lvgl.lib.LV_KEYBOARD_MODE_USER_4  # NOQA
    )
)

LED_DRAW_PART_RECTANGLE: led_draw_part_type_t = (
    led_draw_part_type_t(
        _lib_lvgl.lib.LV_LED_DRAW_PART_RECTANGLE  # NOQA
    )
)

MENU_HEADER_TOP_FIXED: menu_mode_header_t = (
    menu_mode_header_t(
        _lib_lvgl.lib.LV_MENU_HEADER_TOP_FIXED  # NOQA
    )
)
MENU_HEADER_TOP_UNFIXED: menu_mode_header_t = (
    menu_mode_header_t(
        _lib_lvgl.lib.LV_MENU_HEADER_TOP_UNFIXED  # NOQA
    )
)
MENU_HEADER_BOTTOM_FIXED: menu_mode_header_t = (
    menu_mode_header_t(
        _lib_lvgl.lib.LV_MENU_HEADER_BOTTOM_FIXED  # NOQA
    )
)

MENU_ROOT_BACK_BTN_DISABLED: menu_mode_root_back_btn_t = (
    menu_mode_root_back_btn_t(
        _lib_lvgl.lib.LV_MENU_ROOT_BACK_BTN_DISABLED  # NOQA
    )
)
MENU_ROOT_BACK_BTN_ENABLED: menu_mode_root_back_btn_t = (
    menu_mode_root_back_btn_t(
        _lib_lvgl.lib.LV_MENU_ROOT_BACK_BTN_ENABLED  # NOQA
    )
)

METER_INDICATOR_TYPE_NEEDLE_IMG: meter_indicator_type_t = (
    meter_indicator_type_t(
        _lib_lvgl.lib.LV_METER_INDICATOR_TYPE_NEEDLE_IMG  # NOQA
    )
)
METER_INDICATOR_TYPE_NEEDLE_LINE: meter_indicator_type_t = (
    meter_indicator_type_t(
        _lib_lvgl.lib.LV_METER_INDICATOR_TYPE_NEEDLE_LINE  # NOQA
    )
)
METER_INDICATOR_TYPE_SCALE_LINES: meter_indicator_type_t = (
    meter_indicator_type_t(
        _lib_lvgl.lib.LV_METER_INDICATOR_TYPE_SCALE_LINES  # NOQA
    )
)
METER_INDICATOR_TYPE_ARC: meter_indicator_type_t = (
    meter_indicator_type_t(
        _lib_lvgl.lib.LV_METER_INDICATOR_TYPE_ARC  # NOQA
    )
)

METER_DRAW_PART_ARC: meter_draw_part_type_t = (
    meter_draw_part_type_t(
        _lib_lvgl.lib.LV_METER_DRAW_PART_ARC  # NOQA
    )
)
METER_DRAW_PART_NEEDLE_LINE: meter_draw_part_type_t = (
    meter_draw_part_type_t(
        _lib_lvgl.lib.LV_METER_DRAW_PART_NEEDLE_LINE  # NOQA
    )
)
METER_DRAW_PART_NEEDLE_IMG: meter_draw_part_type_t = (
    meter_draw_part_type_t(
        _lib_lvgl.lib.LV_METER_DRAW_PART_NEEDLE_IMG  # NOQA
    )
)
METER_DRAW_PART_TICK: meter_draw_part_type_t = (
    meter_draw_part_type_t(
        _lib_lvgl.lib.LV_METER_DRAW_PART_TICK  # NOQA
    )
)

ROLLER_MODE_NORMAL: roller_mode_t = (
    roller_mode_t(
        _lib_lvgl.lib.LV_ROLLER_MODE_NORMAL  # NOQA
    )
)
ROLLER_MODE_INFINITE: roller_mode_t = (
    roller_mode_t(
        _lib_lvgl.lib.LV_ROLLER_MODE_INFINITE  # NOQA
    )
)

SLIDER_MODE_NORMAL: slider_mode_t = (
    slider_mode_t(
        _lib_lvgl.lib.LV_SLIDER_MODE_NORMAL  # NOQA
    )
)
SLIDER_MODE_SYMMETRICAL: slider_mode_t = (
    slider_mode_t(
        _lib_lvgl.lib.LV_SLIDER_MODE_SYMMETRICAL  # NOQA
    )
)
SLIDER_MODE_RANGE: slider_mode_t = (
    slider_mode_t(
        _lib_lvgl.lib.LV_SLIDER_MODE_RANGE  # NOQA
    )
)

SLIDER_DRAW_PART_KNOB: slider_draw_part_type_t = (
    slider_draw_part_type_t(
        _lib_lvgl.lib.LV_SLIDER_DRAW_PART_KNOB  # NOQA
    )
)
SLIDER_DRAW_PART_KNOB_LEFT: slider_draw_part_type_t = (
    slider_draw_part_type_t(
        _lib_lvgl.lib.LV_SLIDER_DRAW_PART_KNOB_LEFT  # NOQA
    )
)

SPAN_OVERFLOW_CLIP: span_overflow_t = (
    span_overflow_t(
        _lib_lvgl.lib.LV_SPAN_OVERFLOW_CLIP  # NOQA
    )
)
SPAN_OVERFLOW_ELLIPSIS: span_overflow_t = (
    span_overflow_t(
        _lib_lvgl.lib.LV_SPAN_OVERFLOW_ELLIPSIS  # NOQA
    )
)

SPAN_MODE_FIXED: span_mode_t = (
    span_mode_t(
        _lib_lvgl.lib.LV_SPAN_MODE_FIXED  # NOQA
    )
)
SPAN_MODE_EXPAND: span_mode_t = (
    span_mode_t(
        _lib_lvgl.lib.LV_SPAN_MODE_EXPAND  # NOQA
    )
)
SPAN_MODE_BREAK: span_mode_t = (
    span_mode_t(
        _lib_lvgl.lib.LV_SPAN_MODE_BREAK  # NOQA
    )
)

TEXTAREA_CURSOR_LAST: int32_t = (
    int32_t(
        _lib_lvgl.lib.ENUM_LV_TEXTAREA_CURSOR_LAST  # NOQA
    )
)

PART_TEXTAREA_PLACEHOLDER: style_selector_t = (
    style_selector_t(
        _lib_lvgl.lib.LV_PART_TEXTAREA_PLACEHOLDER  # NOQA
    )
)

TABLE_CELL_NONE: uint16_t = (
    uint16_t(
        _lib_lvgl.lib.ENUM_LV_TABLE_CELL_NONE  # NOQA
    )
)

TABLE_CELL_CTRL_MERGE_RIGHT: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_MERGE_RIGHT  # NOQA
    )
)
TABLE_CELL_CTRL_TEXT_CROP: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_TEXT_CROP  # NOQA
    )
)
TABLE_CELL_CTRL_CUSTOM_1: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_CUSTOM_1  # NOQA
    )
)
TABLE_CELL_CTRL_CUSTOM_2: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_CUSTOM_2  # NOQA
    )
)
TABLE_CELL_CTRL_CUSTOM_3: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_CUSTOM_3  # NOQA
    )
)
TABLE_CELL_CTRL_CUSTOM_4: table_cell_ctrl_t = (
    table_cell_ctrl_t(
        _lib_lvgl.lib.LV_TABLE_CELL_CTRL_CUSTOM_4  # NOQA
    )
)

TABLE_DRAW_PART_CELL: table_draw_part_type_t = (
    table_draw_part_type_t(
        _lib_lvgl.lib.LV_TABLE_DRAW_PART_CELL  # NOQA
    )
)

GRIDNAV_CTRL_NONE: gridnav_ctrl_t = (
    gridnav_ctrl_t(
        _lib_lvgl.lib.LV_GRIDNAV_CTRL_NONE  # NOQA
    )
)
GRIDNAV_CTRL_ROLLOVER: gridnav_ctrl_t = (
    gridnav_ctrl_t(
        _lib_lvgl.lib.LV_GRIDNAV_CTRL_ROLLOVER  # NOQA
    )
)
GRIDNAV_CTRL_SCROLL_FIRST: gridnav_ctrl_t = (
    gridnav_ctrl_t(
        _lib_lvgl.lib.LV_GRIDNAV_CTRL_SCROLL_FIRST  # NOQA
    )
)

IME_PINYIN_MODE_K26: ime_pinyin_mode_t = (
    ime_pinyin_mode_t(
        _lib_lvgl.lib.LV_IME_PINYIN_MODE_K26  # NOQA
    )
)
IME_PINYIN_MODE_K9: ime_pinyin_mode_t = (
    ime_pinyin_mode_t(
        _lib_lvgl.lib.LV_IME_PINYIN_MODE_K9  # NOQA
    )
)
IME_PINYIN_MODE_K9_NUMBER: ime_pinyin_mode_t = (
    ime_pinyin_mode_t(
        _lib_lvgl.lib.LV_IME_PINYIN_MODE_K9_NUMBER  # NOQA
    )
)

EXPLORER_SORT_NONE: file_explorer_sort_t = (
    file_explorer_sort_t(
        _lib_lvgl.lib.LV_EXPLORER_SORT_NONE  # NOQA
    )
)
EXPLORER_SORT_KIND: file_explorer_sort_t = (
    file_explorer_sort_t(
        _lib_lvgl.lib.LV_EXPLORER_SORT_KIND  # NOQA
    )
)

EXPLORER_HOME_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_HOME_DIR  # NOQA
    )
)
EXPLORER_MUSIC_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_MUSIC_DIR  # NOQA
    )
)
EXPLORER_PICTURES_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_PICTURES_DIR  # NOQA
    )
)
EXPLORER_VIDEO_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_VIDEO_DIR  # NOQA
    )
)
EXPLORER_DOCS_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_DOCS_DIR  # NOQA
    )
)
EXPLORER_FS_DIR: file_explorer_dir_t = (
    file_explorer_dir_t(
        _lib_lvgl.lib.LV_EXPLORER_FS_DIR  # NOQA
    )
)

OBJ_FLAG_FLEX_IN_NEW_TRACK: obj_flag_t = (
    obj_flag_t(
        _lib_lvgl.lib.ENUM_LV_OBJ_FLAG_FLEX_IN_NEW_TRACK  # NOQA
    )
)

FLEX_ALIGN_START: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_START  # NOQA
    )
)
FLEX_ALIGN_END: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_END  # NOQA
    )
)
FLEX_ALIGN_CENTER: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_CENTER  # NOQA
    )
)
FLEX_ALIGN_SPACE_EVENLY: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_SPACE_EVENLY  # NOQA
    )
)
FLEX_ALIGN_SPACE_AROUND: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_SPACE_AROUND  # NOQA
    )
)
FLEX_ALIGN_SPACE_BETWEEN: flex_align_t = (
    flex_align_t(
        _lib_lvgl.lib.LV_FLEX_ALIGN_SPACE_BETWEEN  # NOQA
    )
)

FLEX_FLOW_ROW: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_ROW  # NOQA
    )
)
FLEX_FLOW_COLUMN: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_COLUMN  # NOQA
    )
)
FLEX_FLOW_ROW_WRAP: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_ROW_WRAP  # NOQA
    )
)
FLEX_FLOW_ROW_REVERSE: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_ROW_REVERSE  # NOQA
    )
)
FLEX_FLOW_ROW_WRAP_REVERSE: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_ROW_WRAP_REVERSE  # NOQA
    )
)
FLEX_FLOW_COLUMN_WRAP: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_COLUMN_WRAP  # NOQA
    )
)
FLEX_FLOW_COLUMN_REVERSE: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_COLUMN_REVERSE  # NOQA
    )
)
FLEX_FLOW_COLUMN_WRAP_REVERSE: flex_flow_t = (
    flex_flow_t(
        _lib_lvgl.lib.LV_FLEX_FLOW_COLUMN_WRAP_REVERSE  # NOQA
    )
)

GRID_CONTENT: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_GRID_CONTENT  # NOQA
    )
)

GRID_TEMPLATE_LAST: coord_t = (
    coord_t(
        _lib_lvgl.lib.ENUM_LV_GRID_TEMPLATE_LAST  # NOQA
    )
)

GRID_ALIGN_START: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_START  # NOQA
    )
)
GRID_ALIGN_CENTER: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_CENTER  # NOQA
    )
)
GRID_ALIGN_END: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_END  # NOQA
    )
)
GRID_ALIGN_STRETCH: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_STRETCH  # NOQA
    )
)
GRID_ALIGN_SPACE_EVENLY: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_SPACE_EVENLY  # NOQA
    )
)
GRID_ALIGN_SPACE_AROUND: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_SPACE_AROUND  # NOQA
    )
)
GRID_ALIGN_SPACE_BETWEEN: grid_align_t = (
    grid_align_t(
        _lib_lvgl.lib.LV_GRID_ALIGN_SPACE_BETWEEN  # NOQA
    )
)

DEMO_BENCHMARK_MODE_RENDER_AND_DRIVER: demo_benchmark_mode_t = (
    demo_benchmark_mode_t(
        _lib_lvgl.lib.LV_DEMO_BENCHMARK_MODE_RENDER_AND_DRIVER  # NOQA
    )
)
DEMO_BENCHMARK_MODE_REAL: demo_benchmark_mode_t = (
    demo_benchmark_mode_t(
        _lib_lvgl.lib.LV_DEMO_BENCHMARK_MODE_REAL  # NOQA
    )
)
DEMO_BENCHMARK_MODE_RENDER_ONLY: demo_benchmark_mode_t = (
    demo_benchmark_mode_t(
        _lib_lvgl.lib.LV_DEMO_BENCHMARK_MODE_RENDER_ONLY  # NOQA
    )
)
# ************************************************


# ***************  STRUCTS/UNIONS  ***************
class _tick_dsc_t(_StructUnion): 
    _c_type = 'lv_tick_dsc_t *'

    def __init__(
        self, 
        /, 
        tick_cb: Optional["tick_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            tick_cb=tick_cb, 
            user_data=user_data
        )

    @property
    def tick_cb(self) -> Optional["tick_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"tick_cb_t"', None)

    @tick_cb.setter
    def tick_cb(self, value: "tick_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"tick_cb_t"' not in cb_store:
            cb_store['"tick_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_tick_cb_t')
            cb_store['"tick_cb_t".c_func'] = c_func
            self._obj.tick_cb = c_func
        else:
            cb_store['"tick_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class _timer_t(_StructUnion): 
    _c_type = 'lv_timer_t *'

    def __init__(
        self, 
        /, 
        period: Optional["uint32_t"] = 0, 
        last_run: Optional["uint32_t"] = 0, 
        timer_cb: Optional["timer_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        repeat_count: Optional["int32_t"] = 0, 
        paused: Optional["uint32_t"] = 0
    ):

        super().__init__(
            period=period, 
            last_run=last_run, 
            timer_cb=timer_cb, 
            user_data=user_data, 
            repeat_count=repeat_count, 
            paused=paused
        )

    @property
    def period(self) -> "uint32_t":
        return self._get_field(
            'period', 
            'uint32_t'
        )

    @period.setter
    def period(self, value: "uint32_t"):
        self._set_field(
            'period', 
            value, 
            'uint32_t'
        )

    @property
    def last_run(self) -> "uint32_t":
        return self._get_field(
            'last_run', 
            'uint32_t'
        )

    @last_run.setter
    def last_run(self, value: "uint32_t"):
        self._set_field(
            'last_run', 
            value, 
            'uint32_t'
        )

    @property
    def timer_cb(self) -> Optional["timer_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"timer_cb_t"', None)

    @timer_cb.setter
    def timer_cb(self, value: "timer_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"timer_cb_t"' not in cb_store:
            cb_store['"timer_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_timer_cb_t')
            cb_store['"timer_cb_t".c_func'] = c_func
            self._obj.timer_cb = c_func
        else:
            cb_store['"timer_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def repeat_count(self) -> "int32_t":
        return self._get_field(
            'repeat_count', 
            'int32_t'
        )

    @repeat_count.setter
    def repeat_count(self, value: "int32_t"):
        self._set_field(
            'repeat_count', 
            value, 
            'int32_t'
        )

    @property
    def paused(self) -> "uint32_t":
        return self._get_field(
            'paused', 
            'uint32_t'
        )

    @paused.setter
    def paused(self, value: "uint32_t"):
        self._set_field(
            'paused', 
            value, 
            'uint32_t'
        )


class sqrt_res_t(_StructUnion): 
    _c_type = 'lv_sqrt_res_t *'

    def __init__(
        self, 
        /, 
        i: Optional["uint16_t"] = 0, 
        f: Optional["uint16_t"] = 0
    ):

        super().__init__(
            i=i, 
            f=f
        )

    @property
    def i(self) -> "uint16_t":
        return self._get_field(
            'i', 
            'uint16_t'
        )

    @i.setter
    def i(self, value: "uint16_t"):
        self._set_field(
            'i', 
            value, 
            'uint16_t'
        )

    @property
    def f(self) -> "uint16_t":
        return self._get_field(
            'f', 
            'uint16_t'
        )

    @f.setter
    def f(self, value: "uint16_t"):
        self._set_field(
            'f', 
            value, 
            'uint16_t'
        )


class mem_monitor_t(_StructUnion): 
    _c_type = 'lv_mem_monitor_t *'

    def __init__(
        self, 
        /, 
        total_size: Optional["uint32_t"] = 0, 
        free_cnt: Optional["uint32_t"] = 0, 
        free_size: Optional["uint32_t"] = 0, 
        free_biggest_size: Optional["uint32_t"] = 0, 
        used_cnt: Optional["uint32_t"] = 0, 
        max_used: Optional["uint32_t"] = 0, 
        used_pct: Optional["uint8_t"] = 0, 
        frag_pct: Optional["uint8_t"] = 0
    ):

        super().__init__(
            total_size=total_size, 
            free_cnt=free_cnt, 
            free_size=free_size, 
            free_biggest_size=free_biggest_size, 
            used_cnt=used_cnt, 
            max_used=max_used, 
            used_pct=used_pct, 
            frag_pct=frag_pct
        )

    @property
    def total_size(self) -> "uint32_t":
        return self._get_field(
            'total_size', 
            'uint32_t'
        )

    @total_size.setter
    def total_size(self, value: "uint32_t"):
        self._set_field(
            'total_size', 
            value, 
            'uint32_t'
        )

    @property
    def free_cnt(self) -> "uint32_t":
        return self._get_field(
            'free_cnt', 
            'uint32_t'
        )

    @free_cnt.setter
    def free_cnt(self, value: "uint32_t"):
        self._set_field(
            'free_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def free_size(self) -> "uint32_t":
        return self._get_field(
            'free_size', 
            'uint32_t'
        )

    @free_size.setter
    def free_size(self, value: "uint32_t"):
        self._set_field(
            'free_size', 
            value, 
            'uint32_t'
        )

    @property
    def free_biggest_size(self) -> "uint32_t":
        return self._get_field(
            'free_biggest_size', 
            'uint32_t'
        )

    @free_biggest_size.setter
    def free_biggest_size(self, value: "uint32_t"):
        self._set_field(
            'free_biggest_size', 
            value, 
            'uint32_t'
        )

    @property
    def used_cnt(self) -> "uint32_t":
        return self._get_field(
            'used_cnt', 
            'uint32_t'
        )

    @used_cnt.setter
    def used_cnt(self, value: "uint32_t"):
        self._set_field(
            'used_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def max_used(self) -> "uint32_t":
        return self._get_field(
            'max_used', 
            'uint32_t'
        )

    @max_used.setter
    def max_used(self, value: "uint32_t"):
        self._set_field(
            'max_used', 
            value, 
            'uint32_t'
        )

    @property
    def used_pct(self) -> "uint8_t":
        return self._get_field(
            'used_pct', 
            'uint8_t'
        )

    @used_pct.setter
    def used_pct(self, value: "uint8_t"):
        self._set_field(
            'used_pct', 
            value, 
            'uint8_t'
        )

    @property
    def frag_pct(self) -> "uint8_t":
        return self._get_field(
            'frag_pct', 
            'uint8_t'
        )

    @frag_pct.setter
    def frag_pct(self, value: "uint8_t"):
        self._set_field(
            'frag_pct', 
            value, 
            'uint8_t'
        )


class _anim_t(_StructUnion): 
    _c_type = 'lv_anim_t *'

    def __init__(
        self, 
        /, 
        var: Optional[Any] = _DefaultArg, 
        exec_cb: Optional["anim_exec_xcb_t"] = _DefaultArg, 
        start_cb: Optional["anim_start_cb_t"] = _DefaultArg, 
        ready_cb: Optional["anim_ready_cb_t"] = _DefaultArg, 
        deleted_cb: Optional["anim_deleted_cb_t"] = _DefaultArg, 
        get_value_cb: Optional["anim_get_value_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        path_cb: Optional["anim_path_cb_t"] = _DefaultArg, 
        start_value: Optional["int32_t"] = 0, 
        current_value: Optional["int32_t"] = 0, 
        end_value: Optional["int32_t"] = 0, 
        time: Optional["int32_t"] = 0, 
        act_time: Optional["int32_t"] = 0, 
        playback_delay: Optional["uint32_t"] = 0, 
        playback_time: Optional["uint32_t"] = 0, 
        repeat_delay: Optional["uint32_t"] = 0, 
        repeat_cnt: Optional["uint16_t"] = 0, 
        early_apply: Optional["uint8_t"] = 0, 
        last_timer_run: Optional["uint32_t"] = 0, 
        playback_now: Optional["uint8_t"] = 0, 
        run_round: Optional["uint8_t"] = 0, 
        start_cb_called: Optional["uint8_t"] = 0
    ):

        super().__init__(
            var=var, 
            exec_cb=exec_cb, 
            start_cb=start_cb, 
            ready_cb=ready_cb, 
            deleted_cb=deleted_cb, 
            get_value_cb=get_value_cb, 
            user_data=user_data, 
            path_cb=path_cb, 
            start_value=start_value, 
            current_value=current_value, 
            end_value=end_value, 
            time=time, 
            act_time=act_time, 
            playback_delay=playback_delay, 
            playback_time=playback_time, 
            repeat_delay=repeat_delay, 
            repeat_cnt=repeat_cnt, 
            early_apply=early_apply, 
            last_timer_run=last_timer_run, 
            playback_now=playback_now, 
            run_round=run_round, 
            start_cb_called=start_cb_called
        )

    @property
    def var(self) -> Any:
        return self._get_field(
            'var', 
            'void'
        )

    @var.setter
    def var(self, value: Any):
        self._set_field(
            'var', 
            value, 
            'void'
        )

    @property
    def exec_cb(self) -> "anim_exec_xcb_t":
        return self._get_field(
            'exec_cb', 
            'anim_exec_xcb_t'
        )

    @exec_cb.setter
    def exec_cb(self, value: "anim_exec_xcb_t"):
        self._set_field(
            'exec_cb', 
            value, 
            'anim_exec_xcb_t'
        )

    @property
    def start_cb(self) -> Optional["anim_start_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_start_cb_t"', None)

    @start_cb.setter
    def start_cb(self, value: "anim_start_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_start_cb_t"' not in cb_store:
            cb_store['"anim_start_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_start_cb_t')
            cb_store['"anim_start_cb_t".c_func'] = c_func
            self._obj.start_cb = c_func
        else:
            cb_store['"anim_start_cb_t"'] = value

    @property
    def ready_cb(self) -> Optional["anim_ready_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_ready_cb_t"', None)

    @ready_cb.setter
    def ready_cb(self, value: "anim_ready_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_ready_cb_t"' not in cb_store:
            cb_store['"anim_ready_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_ready_cb_t')
            cb_store['"anim_ready_cb_t".c_func'] = c_func
            self._obj.ready_cb = c_func
        else:
            cb_store['"anim_ready_cb_t"'] = value

    @property
    def deleted_cb(self) -> Optional["anim_deleted_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_deleted_cb_t"', None)

    @deleted_cb.setter
    def deleted_cb(self, value: "anim_deleted_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_deleted_cb_t"' not in cb_store:
            cb_store['"anim_deleted_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_deleted_cb_t')
            cb_store['"anim_deleted_cb_t".c_func'] = c_func
            self._obj.deleted_cb = c_func
        else:
            cb_store['"anim_deleted_cb_t"'] = value

    @property
    def get_value_cb(self) -> Optional["anim_get_value_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_get_value_cb_t"', None)

    @get_value_cb.setter
    def get_value_cb(self, value: "anim_get_value_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_get_value_cb_t"' not in cb_store:
            cb_store['"anim_get_value_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_get_value_cb_t')
            cb_store['"anim_get_value_cb_t".c_func'] = c_func
            self._obj.get_value_cb = c_func
        else:
            cb_store['"anim_get_value_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def path_cb(self) -> Optional["anim_path_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_path_cb_t"', None)

    @path_cb.setter
    def path_cb(self, value: "anim_path_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_path_cb_t"' not in cb_store:
            cb_store['"anim_path_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_path_cb_t')
            cb_store['"anim_path_cb_t".c_func'] = c_func
            self._obj.path_cb = c_func
        else:
            cb_store['"anim_path_cb_t"'] = value

    @property
    def start_value(self) -> "int32_t":
        return self._get_field(
            'start_value', 
            'int32_t'
        )

    @start_value.setter
    def start_value(self, value: "int32_t"):
        self._set_field(
            'start_value', 
            value, 
            'int32_t'
        )

    @property
    def current_value(self) -> "int32_t":
        return self._get_field(
            'current_value', 
            'int32_t'
        )

    @current_value.setter
    def current_value(self, value: "int32_t"):
        self._set_field(
            'current_value', 
            value, 
            'int32_t'
        )

    @property
    def end_value(self) -> "int32_t":
        return self._get_field(
            'end_value', 
            'int32_t'
        )

    @end_value.setter
    def end_value(self, value: "int32_t"):
        self._set_field(
            'end_value', 
            value, 
            'int32_t'
        )

    @property
    def time(self) -> "int32_t":
        return self._get_field(
            'time', 
            'int32_t'
        )

    @time.setter
    def time(self, value: "int32_t"):
        self._set_field(
            'time', 
            value, 
            'int32_t'
        )

    @property
    def act_time(self) -> "int32_t":
        return self._get_field(
            'act_time', 
            'int32_t'
        )

    @act_time.setter
    def act_time(self, value: "int32_t"):
        self._set_field(
            'act_time', 
            value, 
            'int32_t'
        )

    @property
    def playback_delay(self) -> "uint32_t":
        return self._get_field(
            'playback_delay', 
            'uint32_t'
        )

    @playback_delay.setter
    def playback_delay(self, value: "uint32_t"):
        self._set_field(
            'playback_delay', 
            value, 
            'uint32_t'
        )

    @property
    def playback_time(self) -> "uint32_t":
        return self._get_field(
            'playback_time', 
            'uint32_t'
        )

    @playback_time.setter
    def playback_time(self, value: "uint32_t"):
        self._set_field(
            'playback_time', 
            value, 
            'uint32_t'
        )

    @property
    def repeat_delay(self) -> "uint32_t":
        return self._get_field(
            'repeat_delay', 
            'uint32_t'
        )

    @repeat_delay.setter
    def repeat_delay(self, value: "uint32_t"):
        self._set_field(
            'repeat_delay', 
            value, 
            'uint32_t'
        )

    @property
    def repeat_cnt(self) -> "uint16_t":
        return self._get_field(
            'repeat_cnt', 
            'uint16_t'
        )

    @repeat_cnt.setter
    def repeat_cnt(self, value: "uint16_t"):
        self._set_field(
            'repeat_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def early_apply(self) -> "uint8_t":
        return self._get_field(
            'early_apply', 
            'uint8_t'
        )

    @early_apply.setter
    def early_apply(self, value: "uint8_t"):
        self._set_field(
            'early_apply', 
            value, 
            'uint8_t'
        )

    @property
    def last_timer_run(self) -> "uint32_t":
        return self._get_field(
            'last_timer_run', 
            'uint32_t'
        )

    @last_timer_run.setter
    def last_timer_run(self, value: "uint32_t"):
        self._set_field(
            'last_timer_run', 
            value, 
            'uint32_t'
        )

    @property
    def playback_now(self) -> "uint8_t":
        return self._get_field(
            'playback_now', 
            'uint8_t'
        )

    @playback_now.setter
    def playback_now(self, value: "uint8_t"):
        self._set_field(
            'playback_now', 
            value, 
            'uint8_t'
        )

    @property
    def run_round(self) -> "uint8_t":
        return self._get_field(
            'run_round', 
            'uint8_t'
        )

    @run_round.setter
    def run_round(self, value: "uint8_t"):
        self._set_field(
            'run_round', 
            value, 
            'uint8_t'
        )

    @property
    def start_cb_called(self) -> "uint8_t":
        return self._get_field(
            'start_cb_called', 
            'uint8_t'
        )

    @start_cb_called.setter
    def start_cb_called(self, value: "uint8_t"):
        self._set_field(
            'start_cb_called', 
            value, 
            'uint8_t'
        )


class anim_timeline_dsc_t(_StructUnion): 
    _c_type = 'lv_anim_timeline_dsc_t *'

    def __init__(
        self, 
        /, 
        anim: Optional["anim_t"] = _DefaultArg, 
        start_time: Optional["uint32_t"] = 0
    ):

        super().__init__(
            anim=anim, 
            start_time=start_time
        )

    @property
    def anim(self) -> "anim_t":
        return self._get_field(
            'anim', 
            'anim_t'
        )

    @anim.setter
    def anim(self, value: "anim_t"):
        self._set_field(
            'anim', 
            value, 
            'anim_t'
        )

    @property
    def start_time(self) -> "uint32_t":
        return self._get_field(
            'start_time', 
            'uint32_t'
        )

    @start_time.setter
    def start_time(self, value: "uint32_t"):
        self._set_field(
            'start_time', 
            value, 
            'uint32_t'
        )


class _anim_timeline_t(_StructUnion): 
    _c_type = 'lv_anim_timeline_t *'

    def __init__(
        self, 
        /, 
        anim_dsc: Optional["anim_timeline_dsc_t"] = _DefaultArg, 
        anim_dsc_cnt: Optional["uint32_t"] = 0, 
        reverse: Optional["bool"] = _DefaultArg
    ):

        super().__init__(
            anim_dsc=anim_dsc, 
            anim_dsc_cnt=anim_dsc_cnt, 
            reverse=reverse
        )

    @property
    def anim_dsc(self) -> "anim_timeline_dsc_t":
        return self._get_field(
            'anim_dsc', 
            'anim_timeline_dsc_t'
        )

    @anim_dsc.setter
    def anim_dsc(self, value: "anim_timeline_dsc_t"):
        self._set_field(
            'anim_dsc', 
            value, 
            'anim_timeline_dsc_t'
        )

    @property
    def anim_dsc_cnt(self) -> "uint32_t":
        return self._get_field(
            'anim_dsc_cnt', 
            'uint32_t'
        )

    @anim_dsc_cnt.setter
    def anim_dsc_cnt(self, value: "uint32_t"):
        self._set_field(
            'anim_dsc_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def reverse(self) -> "bool":
        return self._get_field(
            'reverse', 
            'bool'
        )

    @reverse.setter
    def reverse(self, value: "bool"):
        self._set_field(
            'reverse', 
            value, 
            'bool'
        )


class vaformat_t(_StructUnion): 
    _c_type = 'lv_vaformat_t *'

    def __init__(
        self, 
        /, 
        fmt: Optional["char"] = _DefaultArg, 
        va: Optional["va_list"] = _DefaultArg
    ):

        super().__init__(
            fmt=fmt, 
            va=va
        )

    @property
    def fmt(self) -> "char":
        return self._get_field(
            'fmt', 
            'char'
        )

    @fmt.setter
    def fmt(self, value: "char"):
        self._set_field(
            'fmt', 
            value, 
            'char'
        )

    @property
    def va(self) -> "va_list":
        return self._get_field(
            'va', 
            'va_list'
        )

    @va.setter
    def va(self, value: "va_list"):
        self._set_field(
            'va', 
            value, 
            'va_list'
        )


class point_t(_StructUnion): 
    _c_type = 'lv_point_t *'

    def __init__(
        self, 
        /, 
        x: Optional["coord_t"] = _DefaultArg, 
        y: Optional["coord_t"] = _DefaultArg
    ):

        super().__init__(
            x=x, 
            y=y
        )

    @property
    def x(self) -> "coord_t":
        return self._get_field(
            'x', 
            'coord_t'
        )

    @x.setter
    def x(self, value: "coord_t"):
        self._set_field(
            'x', 
            value, 
            'coord_t'
        )

    @property
    def y(self) -> "coord_t":
        return self._get_field(
            'y', 
            'coord_t'
        )

    @y.setter
    def y(self, value: "coord_t"):
        self._set_field(
            'y', 
            value, 
            'coord_t'
        )


class area_t(_StructUnion): 
    _c_type = 'lv_area_t *'

    def __init__(
        self, 
        /, 
        x1: Optional["coord_t"] = _DefaultArg, 
        y1: Optional["coord_t"] = _DefaultArg, 
        x2: Optional["coord_t"] = _DefaultArg, 
        y2: Optional["coord_t"] = _DefaultArg
    ):

        super().__init__(
            x1=x1, 
            y1=y1, 
            x2=x2, 
            y2=y2
        )

    @property
    def x1(self) -> "coord_t":
        return self._get_field(
            'x1', 
            'coord_t'
        )

    @x1.setter
    def x1(self, value: "coord_t"):
        self._set_field(
            'x1', 
            value, 
            'coord_t'
        )

    @property
    def y1(self) -> "coord_t":
        return self._get_field(
            'y1', 
            'coord_t'
        )

    @y1.setter
    def y1(self, value: "coord_t"):
        self._set_field(
            'y1', 
            value, 
            'coord_t'
        )

    @property
    def x2(self) -> "coord_t":
        return self._get_field(
            'x2', 
            'coord_t'
        )

    @x2.setter
    def x2(self, value: "coord_t"):
        self._set_field(
            'x2', 
            value, 
            'coord_t'
        )

    @property
    def y2(self) -> "coord_t":
        return self._get_field(
            'y2', 
            'coord_t'
        )

    @y2.setter
    def y2(self, value: "coord_t"):
        self._set_field(
            'y2', 
            value, 
            'coord_t'
        )


class font_glyph_dsc_t(_StructUnion): 
    _c_type = 'lv_font_glyph_dsc_t *'

    def __init__(
        self, 
        /, 
        resolved_font: Optional["_font_t"] = _DefaultArg, 
        adv_w: Optional["uint16_t"] = 0, 
        box_w: Optional["uint16_t"] = 0, 
        box_h: Optional["uint16_t"] = 0, 
        ofs_x: Optional["int16_t"] = 0, 
        ofs_y: Optional["int16_t"] = 0, 
        bpp: Optional["uint8_t"] = 0, 
        is_placeholder: Optional["uint8_t"] = 0
    ):

        super().__init__(
            resolved_font=resolved_font, 
            adv_w=adv_w, 
            box_w=box_w, 
            box_h=box_h, 
            ofs_x=ofs_x, 
            ofs_y=ofs_y, 
            bpp=bpp, 
            is_placeholder=is_placeholder
        )

    @property
    def resolved_font(self) -> "_font_t":
        return self._get_field(
            'resolved_font', 
            '_font_t'
        )

    @resolved_font.setter
    def resolved_font(self, value: "_font_t"):
        self._set_field(
            'resolved_font', 
            value, 
            '_font_t'
        )

    @property
    def adv_w(self) -> "uint16_t":
        return self._get_field(
            'adv_w', 
            'uint16_t'
        )

    @adv_w.setter
    def adv_w(self, value: "uint16_t"):
        self._set_field(
            'adv_w', 
            value, 
            'uint16_t'
        )

    @property
    def box_w(self) -> "uint16_t":
        return self._get_field(
            'box_w', 
            'uint16_t'
        )

    @box_w.setter
    def box_w(self, value: "uint16_t"):
        self._set_field(
            'box_w', 
            value, 
            'uint16_t'
        )

    @property
    def box_h(self) -> "uint16_t":
        return self._get_field(
            'box_h', 
            'uint16_t'
        )

    @box_h.setter
    def box_h(self, value: "uint16_t"):
        self._set_field(
            'box_h', 
            value, 
            'uint16_t'
        )

    @property
    def ofs_x(self) -> "int16_t":
        return self._get_field(
            'ofs_x', 
            'int16_t'
        )

    @ofs_x.setter
    def ofs_x(self, value: "int16_t"):
        self._set_field(
            'ofs_x', 
            value, 
            'int16_t'
        )

    @property
    def ofs_y(self) -> "int16_t":
        return self._get_field(
            'ofs_y', 
            'int16_t'
        )

    @ofs_y.setter
    def ofs_y(self, value: "int16_t"):
        self._set_field(
            'ofs_y', 
            value, 
            'int16_t'
        )

    @property
    def bpp(self) -> "uint8_t":
        return self._get_field(
            'bpp', 
            'uint8_t'
        )

    @bpp.setter
    def bpp(self, value: "uint8_t"):
        self._set_field(
            'bpp', 
            value, 
            'uint8_t'
        )

    @property
    def is_placeholder(self) -> "uint8_t":
        return self._get_field(
            'is_placeholder', 
            'uint8_t'
        )

    @is_placeholder.setter
    def is_placeholder(self, value: "uint8_t"):
        self._set_field(
            'is_placeholder', 
            value, 
            'uint8_t'
        )


class _font_t(_StructUnion): 
    _c_type = 'lv_font_t *'

    def __init__(
        self, 
        /, 
        get_glyph_dsc: Optional["font_get_glyph_dsc_cb_t"] = _DefaultArg, 
        get_glyph_bitmap: Optional["font_get_glyph_bitmap_cb_t"] = _DefaultArg, 
        line_height: Optional["coord_t"] = _DefaultArg, 
        base_line: Optional["coord_t"] = _DefaultArg, 
        subpx: Optional["uint8_t"] = 0, 
        underline_position: Optional["int8_t"] = 0, 
        underline_thickness: Optional["int8_t"] = 0, 
        dsc: Optional[Any] = _DefaultArg, 
        fallback: Optional["_font_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            get_glyph_dsc=get_glyph_dsc, 
            get_glyph_bitmap=get_glyph_bitmap, 
            line_height=line_height, 
            base_line=base_line, 
            subpx=subpx, 
            underline_position=underline_position, 
            underline_thickness=underline_thickness, 
            dsc=dsc, 
            fallback=fallback, 
            user_data=user_data
        )

    @property
    def get_glyph_dsc(self) -> Optional["font_get_glyph_dsc_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"font_get_glyph_dsc_cb_t"', None)

    @get_glyph_dsc.setter
    def get_glyph_dsc(self, value: "font_get_glyph_dsc_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"font_get_glyph_dsc_cb_t"' not in cb_store:
            cb_store['"font_get_glyph_dsc_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_font_get_glyph_dsc_cb_t')
            cb_store['"font_get_glyph_dsc_cb_t".c_func'] = c_func
            self._obj.get_glyph_dsc = c_func
        else:
            cb_store['"font_get_glyph_dsc_cb_t"'] = value

    @property
    def get_glyph_bitmap(self) -> Optional["font_get_glyph_bitmap_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"font_get_glyph_bitmap_cb_t"', None)

    @get_glyph_bitmap.setter
    def get_glyph_bitmap(self, value: "font_get_glyph_bitmap_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"font_get_glyph_bitmap_cb_t"' not in cb_store:
            cb_store['"font_get_glyph_bitmap_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_font_get_glyph_bitmap_cb_t')
            cb_store['"font_get_glyph_bitmap_cb_t".c_func'] = c_func
            self._obj.get_glyph_bitmap = c_func
        else:
            cb_store['"font_get_glyph_bitmap_cb_t"'] = value

    @property
    def line_height(self) -> "coord_t":
        return self._get_field(
            'line_height', 
            'coord_t'
        )

    @line_height.setter
    def line_height(self, value: "coord_t"):
        self._set_field(
            'line_height', 
            value, 
            'coord_t'
        )

    @property
    def base_line(self) -> "coord_t":
        return self._get_field(
            'base_line', 
            'coord_t'
        )

    @base_line.setter
    def base_line(self, value: "coord_t"):
        self._set_field(
            'base_line', 
            value, 
            'coord_t'
        )

    @property
    def subpx(self) -> "uint8_t":
        return self._get_field(
            'subpx', 
            'uint8_t'
        )

    @subpx.setter
    def subpx(self, value: "uint8_t"):
        self._set_field(
            'subpx', 
            value, 
            'uint8_t'
        )

    @property
    def underline_position(self) -> "int8_t":
        return self._get_field(
            'underline_position', 
            'int8_t'
        )

    @underline_position.setter
    def underline_position(self, value: "int8_t"):
        self._set_field(
            'underline_position', 
            value, 
            'int8_t'
        )

    @property
    def underline_thickness(self) -> "int8_t":
        return self._get_field(
            'underline_thickness', 
            'int8_t'
        )

    @underline_thickness.setter
    def underline_thickness(self, value: "int8_t"):
        self._set_field(
            'underline_thickness', 
            value, 
            'int8_t'
        )

    @property
    def dsc(self) -> Any:
        return self._get_field(
            'dsc', 
            'void'
        )

    @dsc.setter
    def dsc(self, value: Any):
        self._set_field(
            'dsc', 
            value, 
            'void'
        )

    @property
    def fallback(self) -> "_font_t":
        return self._get_field(
            'fallback', 
            '_font_t'
        )

    @fallback.setter
    def fallback(self, value: "_font_t"):
        self._set_field(
            'fallback', 
            value, 
            '_font_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class color1_t(_StructUnion): 
    _c_type = 'lv_color1_t *'

    def __init__(
        self, 
        /, 
        blue: Optional["uint8_t"] = 0, 
        green: Optional["uint8_t"] = 0, 
        red: Optional["uint8_t"] = 0
    ):

        super().__init__(
            blue=blue, 
            green=green, 
            red=red
        )

    @property
    def blue(self) -> "uint8_t":
        return self._get_field(
            'blue', 
            'uint8_t'
        )

    @blue.setter
    def blue(self, value: "uint8_t"):
        self._set_field(
            'blue', 
            value, 
            'uint8_t'
        )

    @property
    def green(self) -> "uint8_t":
        return self._get_field(
            'green', 
            'uint8_t'
        )

    @green.setter
    def green(self, value: "uint8_t"):
        self._set_field(
            'green', 
            value, 
            'uint8_t'
        )

    @property
    def red(self) -> "uint8_t":
        return self._get_field(
            'red', 
            'uint8_t'
        )

    @red.setter
    def red(self, value: "uint8_t"):
        self._set_field(
            'red', 
            value, 
            'uint8_t'
        )


class color8_t(_StructUnion): 
    _c_type = 'lv_color8_t *'

    def __init__(
        self, 
        /, 
        blue: Optional["uint8_t"] = 0, 
        green: Optional["uint8_t"] = 0, 
        red: Optional["uint8_t"] = 0, 
        level: Optional["uint8_t"] = 0
    ):

        super().__init__(
            blue=blue, 
            green=green, 
            red=red, 
            level=level
        )

    @property
    def blue(self) -> "uint8_t":
        return self._get_field(
            'blue', 
            'uint8_t'
        )

    @blue.setter
    def blue(self, value: "uint8_t"):
        self._set_field(
            'blue', 
            value, 
            'uint8_t'
        )

    @property
    def green(self) -> "uint8_t":
        return self._get_field(
            'green', 
            'uint8_t'
        )

    @green.setter
    def green(self, value: "uint8_t"):
        self._set_field(
            'green', 
            value, 
            'uint8_t'
        )

    @property
    def red(self) -> "uint8_t":
        return self._get_field(
            'red', 
            'uint8_t'
        )

    @red.setter
    def red(self, value: "uint8_t"):
        self._set_field(
            'red', 
            value, 
            'uint8_t'
        )

    @property
    def level(self) -> "uint8_t":
        return self._get_field(
            'level', 
            'uint8_t'
        )

    @level.setter
    def level(self, value: "uint8_t"):
        self._set_field(
            'level', 
            value, 
            'uint8_t'
        )


class color16_t(_StructUnion): 
    _c_type = 'lv_color16_t *'

    def __init__(
        self, 
        /, 
        blue: Optional["uint16_t"] = 0, 
        green: Optional["uint16_t"] = 0, 
        red: Optional["uint16_t"] = 0
    ):

        super().__init__(
            blue=blue, 
            green=green, 
            red=red
        )

    @property
    def blue(self) -> "uint16_t":
        return self._get_field(
            'blue', 
            'uint16_t'
        )

    @blue.setter
    def blue(self, value: "uint16_t"):
        self._set_field(
            'blue', 
            value, 
            'uint16_t'
        )

    @property
    def green(self) -> "uint16_t":
        return self._get_field(
            'green', 
            'uint16_t'
        )

    @green.setter
    def green(self, value: "uint16_t"):
        self._set_field(
            'green', 
            value, 
            'uint16_t'
        )

    @property
    def red(self) -> "uint16_t":
        return self._get_field(
            'red', 
            'uint16_t'
        )

    @red.setter
    def red(self, value: "uint16_t"):
        self._set_field(
            'red', 
            value, 
            'uint16_t'
        )


class color24_t(_StructUnion): 
    _c_type = 'lv_color24_t *'

    def __init__(
        self, 
        /, 
        blue: Optional["uint8_t"] = 0, 
        green: Optional["uint8_t"] = 0, 
        red: Optional["uint8_t"] = 0
    ):

        super().__init__(
            blue=blue, 
            green=green, 
            red=red
        )

    @property
    def blue(self) -> "uint8_t":
        return self._get_field(
            'blue', 
            'uint8_t'
        )

    @blue.setter
    def blue(self, value: "uint8_t"):
        self._set_field(
            'blue', 
            value, 
            'uint8_t'
        )

    @property
    def green(self) -> "uint8_t":
        return self._get_field(
            'green', 
            'uint8_t'
        )

    @green.setter
    def green(self, value: "uint8_t"):
        self._set_field(
            'green', 
            value, 
            'uint8_t'
        )

    @property
    def red(self) -> "uint8_t":
        return self._get_field(
            'red', 
            'uint8_t'
        )

    @red.setter
    def red(self, value: "uint8_t"):
        self._set_field(
            'red', 
            value, 
            'uint8_t'
        )


class color32_t(_StructUnion): 
    _c_type = 'lv_color32_t *'

    def __init__(
        self, 
        /, 
        blue: Optional["uint8_t"] = 0, 
        green: Optional["uint8_t"] = 0, 
        red: Optional["uint8_t"] = 0, 
        alpha: Optional["uint8_t"] = 0
    ):

        super().__init__(
            blue=blue, 
            green=green, 
            red=red, 
            alpha=alpha
        )

    @property
    def blue(self) -> "uint8_t":
        return self._get_field(
            'blue', 
            'uint8_t'
        )

    @blue.setter
    def blue(self, value: "uint8_t"):
        self._set_field(
            'blue', 
            value, 
            'uint8_t'
        )

    @property
    def green(self) -> "uint8_t":
        return self._get_field(
            'green', 
            'uint8_t'
        )

    @green.setter
    def green(self, value: "uint8_t"):
        self._set_field(
            'green', 
            value, 
            'uint8_t'
        )

    @property
    def red(self) -> "uint8_t":
        return self._get_field(
            'red', 
            'uint8_t'
        )

    @red.setter
    def red(self, value: "uint8_t"):
        self._set_field(
            'red', 
            value, 
            'uint8_t'
        )

    @property
    def alpha(self) -> "uint8_t":
        return self._get_field(
            'alpha', 
            'uint8_t'
        )

    @alpha.setter
    def alpha(self, value: "uint8_t"):
        self._set_field(
            'alpha', 
            value, 
            'uint8_t'
        )


class color_hsv_t(_StructUnion): 
    _c_type = 'lv_color_hsv_t *'

    def __init__(
        self, 
        /, 
        h: Optional["uint16_t"] = 0, 
        s: Optional["uint8_t"] = 0, 
        v: Optional["uint8_t"] = 0
    ):

        super().__init__(
            h=h, 
            s=s, 
            v=v
        )

    @property
    def h(self) -> "uint16_t":
        return self._get_field(
            'h', 
            'uint16_t'
        )

    @h.setter
    def h(self, value: "uint16_t"):
        self._set_field(
            'h', 
            value, 
            'uint16_t'
        )

    @property
    def s(self) -> "uint8_t":
        return self._get_field(
            's', 
            'uint8_t'
        )

    @s.setter
    def s(self, value: "uint8_t"):
        self._set_field(
            's', 
            value, 
            'uint8_t'
        )

    @property
    def v(self) -> "uint8_t":
        return self._get_field(
            'v', 
            'uint8_t'
        )

    @v.setter
    def v(self, value: "uint8_t"):
        self._set_field(
            'v', 
            value, 
            'uint8_t'
        )


class _color_filter_dsc_t(_StructUnion): 
    _c_type = 'lv_color_filter_dsc_t *'

    def __init__(
        self, 
        /, 
        filter_cb: Optional["color_filter_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            filter_cb=filter_cb, 
            user_data=user_data
        )

    @property
    def filter_cb(self) -> Optional["color_filter_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"color_filter_cb_t"', None)

    @filter_cb.setter
    def filter_cb(self, value: "color_filter_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"color_filter_cb_t"' not in cb_store:
            cb_store['"color_filter_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_color_filter_cb_t')
            cb_store['"color_filter_cb_t".c_func'] = c_func
            self._obj.filter_cb = c_func
        else:
            cb_store['"color_filter_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class gradient_stop_t(_StructUnion): 
    _c_type = 'lv_gradient_stop_t *'

    def __init__(
        self, 
        /, 
        color: Optional["color_t"] = _DefaultArg, 
        frac: Optional["uint8_t"] = 0
    ):

        super().__init__(
            color=color, 
            frac=frac
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def frac(self) -> "uint8_t":
        return self._get_field(
            'frac', 
            'uint8_t'
        )

    @frac.setter
    def frac(self, value: "uint8_t"):
        self._set_field(
            'frac', 
            value, 
            'uint8_t'
        )


class grad_dsc_t(_StructUnion): 
    _c_type = 'lv_grad_dsc_t *'

    def __init__(
        self, 
        /, 
        stops: Optional[List["gradient_stop_t"]] = _DefaultArg, 
        stops_count: Optional["uint8_t"] = 0, 
        dir: Optional["grad_dir_t"] = _DefaultArg, 
        dither: Optional["dither_mode_t"] = _DefaultArg
    ):

        super().__init__(
            stops=stops, 
            stops_count=stops_count, 
            dir=dir, 
            dither=dither
        )

    @property
    def stops(self) -> List["gradient_stop_t"]:
        return self._get_field(
            'stops', 
            'List[gradient_stop_t]'
        )

    @stops.setter
    def stops(self, value: List["gradient_stop_t"]):
        self._set_field(
            'stops', 
            value, 
            'List[gradient_stop_t]'
        )

    @property
    def stops_count(self) -> "uint8_t":
        return self._get_field(
            'stops_count', 
            'uint8_t'
        )

    @stops_count.setter
    def stops_count(self, value: "uint8_t"):
        self._set_field(
            'stops_count', 
            value, 
            'uint8_t'
        )

    @property
    def dir(self) -> "grad_dir_t":
        return self._get_field(
            'dir', 
            'grad_dir_t'
        )

    @dir.setter
    def dir(self, value: "grad_dir_t"):
        self._set_field(
            'dir', 
            value, 
            'grad_dir_t'
        )

    @property
    def dither(self) -> "dither_mode_t":
        return self._get_field(
            'dither', 
            'dither_mode_t'
        )

    @dither.setter
    def dither(self, value: "dither_mode_t"):
        self._set_field(
            'dither', 
            value, 
            'dither_mode_t'
        )


class style_value_t(_StructUnion): 
    _c_type = 'lv_style_value_t *'

    def __init__(
        self, 
        /, 
        num: Optional["int32_t"] = 0, 
        ptr: Optional[Any] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg
    ):

        super().__init__(
            num=num, 
            ptr=ptr, 
            color=color
        )

    @property
    def num(self) -> "int32_t":
        return self._get_field(
            'num', 
            'int32_t'
        )

    @num.setter
    def num(self, value: "int32_t"):
        self._set_field(
            'num', 
            value, 
            'int32_t'
        )

    @property
    def ptr(self) -> Any:
        return self._get_field(
            'ptr', 
            'void'
        )

    @ptr.setter
    def ptr(self, value: Any):
        self._set_field(
            'ptr', 
            value, 
            'void'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )


class style_transition_dsc_t(_StructUnion): 
    _c_type = 'lv_style_transition_dsc_t *'

    def __init__(
        self, 
        /, 
        props: Optional["style_prop_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        path_xcb: Optional["anim_path_cb_t"] = _DefaultArg, 
        time: Optional["uint32_t"] = 0, 
        delay: Optional["uint32_t"] = 0
    ):

        super().__init__(
            props=props, 
            user_data=user_data, 
            path_xcb=path_xcb, 
            time=time, 
            delay=delay
        )

    @property
    def props(self) -> "style_prop_t":
        return self._get_field(
            'props', 
            'style_prop_t'
        )

    @props.setter
    def props(self, value: "style_prop_t"):
        self._set_field(
            'props', 
            value, 
            'style_prop_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def path_xcb(self) -> Optional["anim_path_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_path_cb_t"', None)

    @path_xcb.setter
    def path_xcb(self, value: "anim_path_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_path_cb_t"' not in cb_store:
            cb_store['"anim_path_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_path_cb_t')
            cb_store['"anim_path_cb_t".c_func'] = c_func
            self._obj.path_xcb = c_func
        else:
            cb_store['"anim_path_cb_t"'] = value

    @property
    def time(self) -> "uint32_t":
        return self._get_field(
            'time', 
            'uint32_t'
        )

    @time.setter
    def time(self, value: "uint32_t"):
        self._set_field(
            'time', 
            value, 
            'uint32_t'
        )

    @property
    def delay(self) -> "uint32_t":
        return self._get_field(
            'delay', 
            'uint32_t'
        )

    @delay.setter
    def delay(self, value: "uint32_t"):
        self._set_field(
            'delay', 
            value, 
            'uint32_t'
        )


class style_const_prop_t(_StructUnion): 
    _c_type = 'lv_style_const_prop_t *'

    def __init__(
        self, 
        /, 
        prop_ptr: Optional["style_prop_t"] = _DefaultArg, 
        value: Optional["style_value_t"] = _DefaultArg
    ):

        super().__init__(
            prop_ptr=prop_ptr, 
            value=value
        )

    @property
    def prop_ptr(self) -> "style_prop_t":
        return self._get_field(
            'prop_ptr', 
            'style_prop_t'
        )

    @prop_ptr.setter
    def prop_ptr(self, value: "style_prop_t"):
        self._set_field(
            'prop_ptr', 
            value, 
            'style_prop_t'
        )

    @property
    def value(self) -> "style_value_t":
        return self._get_field(
            'value', 
            'style_value_t'
        )

    @value.setter
    def value(self, value: "style_value_t"):
        self._set_field(
            'value', 
            value, 
            'style_value_t'
        )


class style_v_p_t(_StructUnion): 
    _c_type = 'lv_style_v_p_t *'

    def __init__(
        self, 
        /, 
        value1: Optional["style_value_t"] = _DefaultArg, 
        values_and_props: Optional["uint8_t"] = 0, 
        const_props: Optional["style_const_prop_t"] = _DefaultArg
    ):

        super().__init__(
            value1=value1, 
            values_and_props=values_and_props, 
            const_props=const_props
        )

    @property
    def value1(self) -> "style_value_t":
        return self._get_field(
            'value1', 
            'style_value_t'
        )

    @value1.setter
    def value1(self, value: "style_value_t"):
        self._set_field(
            'value1', 
            value, 
            'style_value_t'
        )

    @property
    def values_and_props(self) -> "uint8_t":
        return self._get_field(
            'values_and_props', 
            'uint8_t'
        )

    @values_and_props.setter
    def values_and_props(self, value: "uint8_t"):
        self._set_field(
            'values_and_props', 
            value, 
            'uint8_t'
        )

    @property
    def const_props(self) -> "style_const_prop_t":
        return self._get_field(
            'const_props', 
            'style_const_prop_t'
        )

    @const_props.setter
    def const_props(self, value: "style_const_prop_t"):
        self._set_field(
            'const_props', 
            value, 
            'style_const_prop_t'
        )


class style_t(_StructUnion): 
    _c_type = 'lv_style_t *'

    def __init__(
        self, 
        /, 
        v_p: Optional["style_v_p_t"] = _DefaultArg, 
        prop1: Optional["uint16_t"] = 0, 
        has_group: Optional["uint8_t"] = 0, 
        prop_cnt: Optional["uint8_t"] = 0
    ):

        super().__init__(
            v_p=v_p, 
            prop1=prop1, 
            has_group=has_group, 
            prop_cnt=prop_cnt
        )

    @property
    def v_p(self) -> "style_v_p_t":
        return self._get_field(
            'v_p', 
            'style_v_p_t'
        )

    @v_p.setter
    def v_p(self, value: "style_v_p_t"):
        self._set_field(
            'v_p', 
            value, 
            'style_v_p_t'
        )

    @property
    def prop1(self) -> "uint16_t":
        return self._get_field(
            'prop1', 
            'uint16_t'
        )

    @prop1.setter
    def prop1(self, value: "uint16_t"):
        self._set_field(
            'prop1', 
            value, 
            'uint16_t'
        )

    @property
    def has_group(self) -> "uint8_t":
        return self._get_field(
            'has_group', 
            'uint8_t'
        )

    @has_group.setter
    def has_group(self, value: "uint8_t"):
        self._set_field(
            'has_group', 
            value, 
            'uint8_t'
        )

    @property
    def prop_cnt(self) -> "uint8_t":
        return self._get_field(
            'prop_cnt', 
            'uint8_t'
        )

    @prop_cnt.setter
    def prop_cnt(self, value: "uint8_t"):
        self._set_field(
            'prop_cnt', 
            value, 
            'uint8_t'
        )


class _event_t(_StructUnion): 
    _c_type = 'lv_event_t *'

    def __init__(
        self, 
        /, 
        current_target: Optional[Any] = _DefaultArg, 
        original_target: Optional[Any] = _DefaultArg, 
        code: Optional["event_code_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        param: Optional[Any] = _DefaultArg, 
        prev: Optional["_event_t"] = _DefaultArg, 
        deleted: Optional["uint8_t"] = 0, 
        stop_processing: Optional["uint8_t"] = 0, 
        stop_bubbling: Optional["uint8_t"] = 0
    ):

        super().__init__(
            current_target=current_target, 
            original_target=original_target, 
            code=code, 
            user_data=user_data, 
            param=param, 
            prev=prev, 
            deleted=deleted, 
            stop_processing=stop_processing, 
            stop_bubbling=stop_bubbling
        )

    @property
    def current_target(self) -> Any:
        return self._get_field(
            'current_target', 
            'void'
        )

    @current_target.setter
    def current_target(self, value: Any):
        self._set_field(
            'current_target', 
            value, 
            'void'
        )

    @property
    def original_target(self) -> Any:
        return self._get_field(
            'original_target', 
            'void'
        )

    @original_target.setter
    def original_target(self, value: Any):
        self._set_field(
            'original_target', 
            value, 
            'void'
        )

    @property
    def code(self) -> "event_code_t":
        return self._get_field(
            'code', 
            'event_code_t'
        )

    @code.setter
    def code(self, value: "event_code_t"):
        self._set_field(
            'code', 
            value, 
            'event_code_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def param(self) -> Any:
        return self._get_field(
            'param', 
            'void'
        )

    @param.setter
    def param(self, value: Any):
        self._set_field(
            'param', 
            value, 
            'void'
        )

    @property
    def prev(self) -> "_event_t":
        return self._get_field(
            'prev', 
            '_event_t'
        )

    @prev.setter
    def prev(self, value: "_event_t"):
        self._set_field(
            'prev', 
            value, 
            '_event_t'
        )

    @property
    def deleted(self) -> "uint8_t":
        return self._get_field(
            'deleted', 
            'uint8_t'
        )

    @deleted.setter
    def deleted(self, value: "uint8_t"):
        self._set_field(
            'deleted', 
            value, 
            'uint8_t'
        )

    @property
    def stop_processing(self) -> "uint8_t":
        return self._get_field(
            'stop_processing', 
            'uint8_t'
        )

    @stop_processing.setter
    def stop_processing(self, value: "uint8_t"):
        self._set_field(
            'stop_processing', 
            value, 
            'uint8_t'
        )

    @property
    def stop_bubbling(self) -> "uint8_t":
        return self._get_field(
            'stop_bubbling', 
            'uint8_t'
        )

    @stop_bubbling.setter
    def stop_bubbling(self, value: "uint8_t"):
        self._set_field(
            'stop_bubbling', 
            value, 
            'uint8_t'
        )


class _event_dsc_t(_StructUnion): 
    _c_type = 'lv_event_dsc_t *'

    def __init__(
        self, 
        /, 
        cb: Optional["event_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        filter: Optional["uint32_t"] = 0
    ):

        super().__init__(
            cb=cb, 
            user_data=user_data, 
            filter=filter
        )

    @property
    def cb(self) -> Optional["event_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"event_cb_t"', None)

    @cb.setter
    def cb(self, value: "event_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"event_cb_t"' not in cb_store:
            cb_store['"event_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_event_cb_t')
            cb_store['"event_cb_t".c_func'] = c_func
            self._obj.cb = c_func
        else:
            cb_store['"event_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def filter(self) -> "uint32_t":
        return self._get_field(
            'filter', 
            'uint32_t'
        )

    @filter.setter
    def filter(self, value: "uint32_t"):
        self._set_field(
            'filter', 
            value, 
            'uint32_t'
        )


class event_list_t(_StructUnion): 
    _c_type = 'lv_event_list_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["event_dsc_t"] = _DefaultArg, 
        cnt: Optional["uint32_t"] = 0
    ):

        super().__init__(
            dsc=dsc, 
            cnt=cnt
        )

    @property
    def dsc(self) -> "event_dsc_t":
        return self._get_field(
            'dsc', 
            'event_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "event_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            'event_dsc_t'
        )

    @property
    def cnt(self) -> "uint32_t":
        return self._get_field(
            'cnt', 
            'uint32_t'
        )

    @cnt.setter
    def cnt(self, value: "uint32_t"):
        self._set_field(
            'cnt', 
            value, 
            'uint32_t'
        )


class layout_dsc_t(_StructUnion): 
    _c_type = 'lv_layout_dsc_t *'

    def __init__(
        self, 
        /, 
        cb: Optional["layout_update_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            cb=cb, 
            user_data=user_data
        )

    @property
    def cb(self) -> Optional["layout_update_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"layout_update_cb_t"', None)

    @cb.setter
    def cb(self, value: "layout_update_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"layout_update_cb_t"' not in cb_store:
            cb_store['"layout_update_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_layout_update_cb_t')
            cb_store['"layout_update_cb_t".c_func'] = c_func
            self._obj.cb = c_func
        else:
            cb_store['"layout_update_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class _obj_style_t(_StructUnion): 
    _c_type = 'lv_obj_style_t *'

    def __init__(
        self, 
        /, 
        style: Optional["style_t"] = _DefaultArg, 
        selector: Optional["uint32_t"] = 0, 
        is_local: Optional["uint32_t"] = 0, 
        is_trans: Optional["uint32_t"] = 0
    ):

        super().__init__(
            style=style, 
            selector=selector, 
            is_local=is_local, 
            is_trans=is_trans
        )

    @property
    def style(self) -> "style_t":
        return self._get_field(
            'style', 
            'style_t'
        )

    @style.setter
    def style(self, value: "style_t"):
        self._set_field(
            'style', 
            value, 
            'style_t'
        )

    @property
    def selector(self) -> "uint32_t":
        return self._get_field(
            'selector', 
            'uint32_t'
        )

    @selector.setter
    def selector(self, value: "uint32_t"):
        self._set_field(
            'selector', 
            value, 
            'uint32_t'
        )

    @property
    def is_local(self) -> "uint32_t":
        return self._get_field(
            'is_local', 
            'uint32_t'
        )

    @is_local.setter
    def is_local(self, value: "uint32_t"):
        self._set_field(
            'is_local', 
            value, 
            'uint32_t'
        )

    @property
    def is_trans(self) -> "uint32_t":
        return self._get_field(
            'is_trans', 
            'uint32_t'
        )

    @is_trans.setter
    def is_trans(self, value: "uint32_t"):
        self._set_field(
            'is_trans', 
            value, 
            'uint32_t'
        )


class _obj_style_transition_dsc_t(_StructUnion): 
    _c_type = 'lv_obj_style_transition_dsc_t *'

    def __init__(
        self, 
        /, 
        time: Optional["uint16_t"] = 0, 
        delay: Optional["uint16_t"] = 0, 
        selector: Optional["style_selector_t"] = _DefaultArg, 
        prop: Optional["style_prop_t"] = _DefaultArg, 
        path_cb: Optional["anim_path_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            time=time, 
            delay=delay, 
            selector=selector, 
            prop=prop, 
            path_cb=path_cb, 
            user_data=user_data
        )

    @property
    def time(self) -> "uint16_t":
        return self._get_field(
            'time', 
            'uint16_t'
        )

    @time.setter
    def time(self, value: "uint16_t"):
        self._set_field(
            'time', 
            value, 
            'uint16_t'
        )

    @property
    def delay(self) -> "uint16_t":
        return self._get_field(
            'delay', 
            'uint16_t'
        )

    @delay.setter
    def delay(self, value: "uint16_t"):
        self._set_field(
            'delay', 
            value, 
            'uint16_t'
        )

    @property
    def selector(self) -> "style_selector_t":
        return self._get_field(
            'selector', 
            'style_selector_t'
        )

    @selector.setter
    def selector(self, value: "style_selector_t"):
        self._set_field(
            'selector', 
            value, 
            'style_selector_t'
        )

    @property
    def prop(self) -> "style_prop_t":
        return self._get_field(
            'prop', 
            'style_prop_t'
        )

    @prop.setter
    def prop(self, value: "style_prop_t"):
        self._set_field(
            'prop', 
            value, 
            'style_prop_t'
        )

    @property
    def path_cb(self) -> Optional["anim_path_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"anim_path_cb_t"', None)

    @path_cb.setter
    def path_cb(self, value: "anim_path_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"anim_path_cb_t"' not in cb_store:
            cb_store['"anim_path_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_path_cb_t')
            cb_store['"anim_path_cb_t".c_func'] = c_func
            self._obj.path_cb = c_func
        else:
            cb_store['"anim_path_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class img_header_t(_StructUnion): 
    _c_type = 'lv_img_header_t *'

    def __init__(
        self, 
        /, 
        cf: Optional["uint32_t"] = 0, 
        always_zero: Optional["uint32_t"] = 0, 
        reserved: Optional["uint32_t"] = 0, 
        chroma_keyed: Optional["uint32_t"] = 0, 
        w: Optional["uint32_t"] = 0, 
        h: Optional["uint32_t"] = 0
    ):

        super().__init__(
            cf=cf, 
            always_zero=always_zero, 
            reserved=reserved, 
            chroma_keyed=chroma_keyed, 
            w=w, 
            h=h
        )

    @property
    def cf(self) -> "uint32_t":
        return self._get_field(
            'cf', 
            'uint32_t'
        )

    @cf.setter
    def cf(self, value: "uint32_t"):
        self._set_field(
            'cf', 
            value, 
            'uint32_t'
        )

    @property
    def always_zero(self) -> "uint32_t":
        return self._get_field(
            'always_zero', 
            'uint32_t'
        )

    @always_zero.setter
    def always_zero(self, value: "uint32_t"):
        self._set_field(
            'always_zero', 
            value, 
            'uint32_t'
        )

    @property
    def reserved(self) -> "uint32_t":
        return self._get_field(
            'reserved', 
            'uint32_t'
        )

    @reserved.setter
    def reserved(self, value: "uint32_t"):
        self._set_field(
            'reserved', 
            value, 
            'uint32_t'
        )

    @property
    def chroma_keyed(self) -> "uint32_t":
        return self._get_field(
            'chroma_keyed', 
            'uint32_t'
        )

    @chroma_keyed.setter
    def chroma_keyed(self, value: "uint32_t"):
        self._set_field(
            'chroma_keyed', 
            value, 
            'uint32_t'
        )

    @property
    def w(self) -> "uint32_t":
        return self._get_field(
            'w', 
            'uint32_t'
        )

    @w.setter
    def w(self, value: "uint32_t"):
        self._set_field(
            'w', 
            value, 
            'uint32_t'
        )

    @property
    def h(self) -> "uint32_t":
        return self._get_field(
            'h', 
            'uint32_t'
        )

    @h.setter
    def h(self, value: "uint32_t"):
        self._set_field(
            'h', 
            value, 
            'uint32_t'
        )


class img_dsc_t(_StructUnion): 
    _c_type = 'lv_img_dsc_t *'

    def __init__(
        self, 
        /, 
        header: Optional["img_header_t"] = _DefaultArg, 
        data_size: Optional["uint32_t"] = 0, 
        data: Optional["uint8_t"] = 0
    ):

        super().__init__(
            header=header, 
            data_size=data_size, 
            data=data
        )

    @property
    def header(self) -> "img_header_t":
        return self._get_field(
            'header', 
            'img_header_t'
        )

    @header.setter
    def header(self, value: "img_header_t"):
        self._set_field(
            'header', 
            value, 
            'img_header_t'
        )

    @property
    def data_size(self) -> "uint32_t":
        return self._get_field(
            'data_size', 
            'uint32_t'
        )

    @data_size.setter
    def data_size(self, value: "uint32_t"):
        self._set_field(
            'data_size', 
            value, 
            'uint32_t'
        )

    @property
    def data(self) -> "uint8_t":
        return self._get_field(
            'data', 
            'uint8_t'
        )

    @data.setter
    def data(self, value: "uint8_t"):
        self._set_field(
            'data', 
            value, 
            'uint8_t'
        )


class _fs_drv_t(_StructUnion): 
    _c_type = 'lv_fs_drv_t *'

    def __init__(
        self, 
        /, 
        letter: Optional["char"] = _DefaultArg, 
        cache_size: Optional["uint16_t"] = 0, 
        ready_cb: Optional["fs_drv_ready_cb_t"] = _DefaultArg, 
        open_cb: Optional["fs_drv_open_cb_t"] = _DefaultArg, 
        close_cb: Optional["fs_drv_close_cb_t"] = _DefaultArg, 
        read_cb: Optional["fs_drv_read_cb_t"] = _DefaultArg, 
        write_cb: Optional["fs_drv_write_cb_t"] = _DefaultArg, 
        seek_cb: Optional["fs_drv_seek_cb_t"] = _DefaultArg, 
        tell_cb: Optional["fs_drv_tell_cb_t"] = _DefaultArg, 
        dir_open_cb: Optional["fs_drv_dir_open_cb_t"] = _DefaultArg, 
        dir_read_cb: Optional["fs_drv_dir_read_cb_t"] = _DefaultArg, 
        dir_close_cb: Optional["fs_drv_dir_close_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            letter=letter, 
            cache_size=cache_size, 
            ready_cb=ready_cb, 
            open_cb=open_cb, 
            close_cb=close_cb, 
            read_cb=read_cb, 
            write_cb=write_cb, 
            seek_cb=seek_cb, 
            tell_cb=tell_cb, 
            dir_open_cb=dir_open_cb, 
            dir_read_cb=dir_read_cb, 
            dir_close_cb=dir_close_cb, 
            user_data=user_data
        )

    @property
    def letter(self) -> "char":
        return self._get_field(
            'letter', 
            'char'
        )

    @letter.setter
    def letter(self, value: "char"):
        self._set_field(
            'letter', 
            value, 
            'char'
        )

    @property
    def cache_size(self) -> "uint16_t":
        return self._get_field(
            'cache_size', 
            'uint16_t'
        )

    @cache_size.setter
    def cache_size(self, value: "uint16_t"):
        self._set_field(
            'cache_size', 
            value, 
            'uint16_t'
        )

    @property
    def ready_cb(self) -> Optional["fs_drv_ready_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_ready_cb_t"', None)

    @ready_cb.setter
    def ready_cb(self, value: "fs_drv_ready_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_ready_cb_t"' not in cb_store:
            cb_store['"fs_drv_ready_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_ready_cb_t')
            cb_store['"fs_drv_ready_cb_t".c_func'] = c_func
            self._obj.ready_cb = c_func
        else:
            cb_store['"fs_drv_ready_cb_t"'] = value

    @property
    def open_cb(self) -> Optional["fs_drv_open_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_open_cb_t"', None)

    @open_cb.setter
    def open_cb(self, value: "fs_drv_open_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_open_cb_t"' not in cb_store:
            cb_store['"fs_drv_open_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_open_cb_t')
            cb_store['"fs_drv_open_cb_t".c_func'] = c_func
            self._obj.open_cb = c_func
        else:
            cb_store['"fs_drv_open_cb_t"'] = value

    @property
    def close_cb(self) -> Optional["fs_drv_close_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_close_cb_t"', None)

    @close_cb.setter
    def close_cb(self, value: "fs_drv_close_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_close_cb_t"' not in cb_store:
            cb_store['"fs_drv_close_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_close_cb_t')
            cb_store['"fs_drv_close_cb_t".c_func'] = c_func
            self._obj.close_cb = c_func
        else:
            cb_store['"fs_drv_close_cb_t"'] = value

    @property
    def read_cb(self) -> Optional["fs_drv_read_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_read_cb_t"', None)

    @read_cb.setter
    def read_cb(self, value: "fs_drv_read_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_read_cb_t"' not in cb_store:
            cb_store['"fs_drv_read_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_read_cb_t')
            cb_store['"fs_drv_read_cb_t".c_func'] = c_func
            self._obj.read_cb = c_func
        else:
            cb_store['"fs_drv_read_cb_t"'] = value

    @property
    def write_cb(self) -> Optional["fs_drv_write_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_write_cb_t"', None)

    @write_cb.setter
    def write_cb(self, value: "fs_drv_write_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_write_cb_t"' not in cb_store:
            cb_store['"fs_drv_write_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_write_cb_t')
            cb_store['"fs_drv_write_cb_t".c_func'] = c_func
            self._obj.write_cb = c_func
        else:
            cb_store['"fs_drv_write_cb_t"'] = value

    @property
    def seek_cb(self) -> Optional["fs_drv_seek_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_seek_cb_t"', None)

    @seek_cb.setter
    def seek_cb(self, value: "fs_drv_seek_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_seek_cb_t"' not in cb_store:
            cb_store['"fs_drv_seek_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_seek_cb_t')
            cb_store['"fs_drv_seek_cb_t".c_func'] = c_func
            self._obj.seek_cb = c_func
        else:
            cb_store['"fs_drv_seek_cb_t"'] = value

    @property
    def tell_cb(self) -> Optional["fs_drv_tell_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_tell_cb_t"', None)

    @tell_cb.setter
    def tell_cb(self, value: "fs_drv_tell_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_tell_cb_t"' not in cb_store:
            cb_store['"fs_drv_tell_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_tell_cb_t')
            cb_store['"fs_drv_tell_cb_t".c_func'] = c_func
            self._obj.tell_cb = c_func
        else:
            cb_store['"fs_drv_tell_cb_t"'] = value

    @property
    def dir_open_cb(self) -> Optional["fs_drv_dir_open_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_dir_open_cb_t"', None)

    @dir_open_cb.setter
    def dir_open_cb(self, value: "fs_drv_dir_open_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_dir_open_cb_t"' not in cb_store:
            cb_store['"fs_drv_dir_open_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_dir_open_cb_t')
            cb_store['"fs_drv_dir_open_cb_t".c_func'] = c_func
            self._obj.dir_open_cb = c_func
        else:
            cb_store['"fs_drv_dir_open_cb_t"'] = value

    @property
    def dir_read_cb(self) -> Optional["fs_drv_dir_read_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_dir_read_cb_t"', None)

    @dir_read_cb.setter
    def dir_read_cb(self, value: "fs_drv_dir_read_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_dir_read_cb_t"' not in cb_store:
            cb_store['"fs_drv_dir_read_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_dir_read_cb_t')
            cb_store['"fs_drv_dir_read_cb_t".c_func'] = c_func
            self._obj.dir_read_cb = c_func
        else:
            cb_store['"fs_drv_dir_read_cb_t"'] = value

    @property
    def dir_close_cb(self) -> Optional["fs_drv_dir_close_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"fs_drv_dir_close_cb_t"', None)

    @dir_close_cb.setter
    def dir_close_cb(self, value: "fs_drv_dir_close_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"fs_drv_dir_close_cb_t"' not in cb_store:
            cb_store['"fs_drv_dir_close_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_fs_drv_dir_close_cb_t')
            cb_store['"fs_drv_dir_close_cb_t".c_func'] = c_func
            self._obj.dir_close_cb = c_func
        else:
            cb_store['"fs_drv_dir_close_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class fs_file_cache_t(_StructUnion): 
    _c_type = 'lv_fs_file_cache_t *'

    def __init__(
        self, 
        /, 
        start: Optional["uint32_t"] = 0, 
        end: Optional["uint32_t"] = 0, 
        file_position: Optional["uint32_t"] = 0, 
        buffer: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            start=start, 
            end=end, 
            file_position=file_position, 
            buffer=buffer
        )

    @property
    def start(self) -> "uint32_t":
        return self._get_field(
            'start', 
            'uint32_t'
        )

    @start.setter
    def start(self, value: "uint32_t"):
        self._set_field(
            'start', 
            value, 
            'uint32_t'
        )

    @property
    def end(self) -> "uint32_t":
        return self._get_field(
            'end', 
            'uint32_t'
        )

    @end.setter
    def end(self, value: "uint32_t"):
        self._set_field(
            'end', 
            value, 
            'uint32_t'
        )

    @property
    def file_position(self) -> "uint32_t":
        return self._get_field(
            'file_position', 
            'uint32_t'
        )

    @file_position.setter
    def file_position(self, value: "uint32_t"):
        self._set_field(
            'file_position', 
            value, 
            'uint32_t'
        )

    @property
    def buffer(self) -> Any:
        return self._get_field(
            'buffer', 
            'void'
        )

    @buffer.setter
    def buffer(self, value: Any):
        self._set_field(
            'buffer', 
            value, 
            'void'
        )


class fs_file_t(_StructUnion): 
    _c_type = 'lv_fs_file_t *'

    def __init__(
        self, 
        /, 
        file_d: Optional[Any] = _DefaultArg, 
        drv: Optional["fs_drv_t"] = _DefaultArg, 
        cache: Optional["fs_file_cache_t"] = _DefaultArg
    ):

        super().__init__(
            file_d=file_d, 
            drv=drv, 
            cache=cache
        )

    @property
    def file_d(self) -> Any:
        return self._get_field(
            'file_d', 
            'void'
        )

    @file_d.setter
    def file_d(self, value: Any):
        self._set_field(
            'file_d', 
            value, 
            'void'
        )

    @property
    def drv(self) -> "fs_drv_t":
        return self._get_field(
            'drv', 
            'fs_drv_t'
        )

    @drv.setter
    def drv(self, value: "fs_drv_t"):
        self._set_field(
            'drv', 
            value, 
            'fs_drv_t'
        )

    @property
    def cache(self) -> "fs_file_cache_t":
        return self._get_field(
            'cache', 
            'fs_file_cache_t'
        )

    @cache.setter
    def cache(self, value: "fs_file_cache_t"):
        self._set_field(
            'cache', 
            value, 
            'fs_file_cache_t'
        )


class fs_dir_t(_StructUnion): 
    _c_type = 'lv_fs_dir_t *'

    def __init__(
        self, 
        /, 
        dir_d: Optional[Any] = _DefaultArg, 
        drv: Optional["fs_drv_t"] = _DefaultArg
    ):

        super().__init__(
            dir_d=dir_d, 
            drv=drv
        )

    @property
    def dir_d(self) -> Any:
        return self._get_field(
            'dir_d', 
            'void'
        )

    @dir_d.setter
    def dir_d(self, value: Any):
        self._set_field(
            'dir_d', 
            value, 
            'void'
        )

    @property
    def drv(self) -> "fs_drv_t":
        return self._get_field(
            'drv', 
            'fs_drv_t'
        )

    @drv.setter
    def drv(self, value: "fs_drv_t"):
        self._set_field(
            'drv', 
            value, 
            'fs_drv_t'
        )


class _img_decoder_t(_StructUnion): 
    _c_type = 'lv_img_decoder_t *'

    def __init__(
        self, 
        /, 
        info_cb: Optional["img_decoder_info_f_t"] = _DefaultArg, 
        open_cb: Optional["img_decoder_open_f_t"] = _DefaultArg, 
        read_line_cb: Optional["img_decoder_read_line_f_t"] = _DefaultArg, 
        close_cb: Optional["img_decoder_close_f_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            info_cb=info_cb, 
            open_cb=open_cb, 
            read_line_cb=read_line_cb, 
            close_cb=close_cb, 
            user_data=user_data
        )

    @property
    def info_cb(self) -> Optional["img_decoder_info_f_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"img_decoder_info_f_t"', None)

    @info_cb.setter
    def info_cb(self, value: "img_decoder_info_f_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"img_decoder_info_f_t"' not in cb_store:
            cb_store['"img_decoder_info_f_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_img_decoder_info_f_t')
            cb_store['"img_decoder_info_f_t".c_func'] = c_func
            self._obj.info_cb = c_func
        else:
            cb_store['"img_decoder_info_f_t"'] = value

    @property
    def open_cb(self) -> Optional["img_decoder_open_f_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"img_decoder_open_f_t"', None)

    @open_cb.setter
    def open_cb(self, value: "img_decoder_open_f_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"img_decoder_open_f_t"' not in cb_store:
            cb_store['"img_decoder_open_f_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_img_decoder_open_f_t')
            cb_store['"img_decoder_open_f_t".c_func'] = c_func
            self._obj.open_cb = c_func
        else:
            cb_store['"img_decoder_open_f_t"'] = value

    @property
    def read_line_cb(self) -> Optional["img_decoder_read_line_f_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"img_decoder_read_line_f_t"', None)

    @read_line_cb.setter
    def read_line_cb(self, value: "img_decoder_read_line_f_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"img_decoder_read_line_f_t"' not in cb_store:
            cb_store['"img_decoder_read_line_f_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_img_decoder_read_line_f_t')
            cb_store['"img_decoder_read_line_f_t".c_func'] = c_func
            self._obj.read_line_cb = c_func
        else:
            cb_store['"img_decoder_read_line_f_t"'] = value

    @property
    def close_cb(self) -> Optional["img_decoder_close_f_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"img_decoder_close_f_t"', None)

    @close_cb.setter
    def close_cb(self, value: "img_decoder_close_f_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"img_decoder_close_f_t"' not in cb_store:
            cb_store['"img_decoder_close_f_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_img_decoder_close_f_t')
            cb_store['"img_decoder_close_f_t".c_func'] = c_func
            self._obj.close_cb = c_func
        else:
            cb_store['"img_decoder_close_f_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class _img_decoder_dsc_t(_StructUnion): 
    _c_type = 'lv_img_decoder_dsc_t *'

    def __init__(
        self, 
        /, 
        decoder: Optional["img_decoder_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        frame_id: Optional["int32_t"] = 0, 
        src_type: Optional["img_src_t"] = _DefaultArg, 
        header: Optional["img_header_t"] = _DefaultArg, 
        img_data: Optional["uint8_t"] = 0, 
        palette: Optional["color32_t"] = _DefaultArg, 
        palette_size: Optional["uint32_t"] = 0, 
        time_to_open: Optional["uint32_t"] = 0, 
        error_msg: Optional["char"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            decoder=decoder, 
            src=src, 
            color=color, 
            frame_id=frame_id, 
            src_type=src_type, 
            header=header, 
            img_data=img_data, 
            palette=palette, 
            palette_size=palette_size, 
            time_to_open=time_to_open, 
            error_msg=error_msg, 
            user_data=user_data
        )

    @property
    def decoder(self) -> "img_decoder_t":
        return self._get_field(
            'decoder', 
            'img_decoder_t'
        )

    @decoder.setter
    def decoder(self, value: "img_decoder_t"):
        self._set_field(
            'decoder', 
            value, 
            'img_decoder_t'
        )

    @property
    def src(self) -> Any:
        return self._get_field(
            'src', 
            'void'
        )

    @src.setter
    def src(self, value: Any):
        self._set_field(
            'src', 
            value, 
            'void'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def frame_id(self) -> "int32_t":
        return self._get_field(
            'frame_id', 
            'int32_t'
        )

    @frame_id.setter
    def frame_id(self, value: "int32_t"):
        self._set_field(
            'frame_id', 
            value, 
            'int32_t'
        )

    @property
    def src_type(self) -> "img_src_t":
        return self._get_field(
            'src_type', 
            'img_src_t'
        )

    @src_type.setter
    def src_type(self, value: "img_src_t"):
        self._set_field(
            'src_type', 
            value, 
            'img_src_t'
        )

    @property
    def header(self) -> "img_header_t":
        return self._get_field(
            'header', 
            'img_header_t'
        )

    @header.setter
    def header(self, value: "img_header_t"):
        self._set_field(
            'header', 
            value, 
            'img_header_t'
        )

    @property
    def img_data(self) -> "uint8_t":
        return self._get_field(
            'img_data', 
            'uint8_t'
        )

    @img_data.setter
    def img_data(self, value: "uint8_t"):
        self._set_field(
            'img_data', 
            value, 
            'uint8_t'
        )

    @property
    def palette(self) -> "color32_t":
        return self._get_field(
            'palette', 
            'color32_t'
        )

    @palette.setter
    def palette(self, value: "color32_t"):
        self._set_field(
            'palette', 
            value, 
            'color32_t'
        )

    @property
    def palette_size(self) -> "uint32_t":
        return self._get_field(
            'palette_size', 
            'uint32_t'
        )

    @palette_size.setter
    def palette_size(self, value: "uint32_t"):
        self._set_field(
            'palette_size', 
            value, 
            'uint32_t'
        )

    @property
    def time_to_open(self) -> "uint32_t":
        return self._get_field(
            'time_to_open', 
            'uint32_t'
        )

    @time_to_open.setter
    def time_to_open(self, value: "uint32_t"):
        self._set_field(
            'time_to_open', 
            value, 
            'uint32_t'
        )

    @property
    def error_msg(self) -> "char":
        return self._get_field(
            'error_msg', 
            'char'
        )

    @error_msg.setter
    def error_msg(self, value: "char"):
        self._set_field(
            'error_msg', 
            value, 
            'char'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class _img_cache_entry_t(_StructUnion): 
    _c_type = 'lv_img_cache_entry_t *'

    def __init__(
        self, 
        /, 
        dec_dsc: Optional["img_decoder_dsc_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            dec_dsc=dec_dsc, 
            user_data=user_data
        )

    @property
    def dec_dsc(self) -> "img_decoder_dsc_t":
        return self._get_field(
            'dec_dsc', 
            'img_decoder_dsc_t'
        )

    @dec_dsc.setter
    def dec_dsc(self, value: "img_decoder_dsc_t"):
        self._set_field(
            'dec_dsc', 
            value, 
            'img_decoder_dsc_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class img_cache_manager_t(_StructUnion): 
    _c_type = 'lv_img_cache_manager_t *'

    def __init__(
        self, 
        /, 
        open_cb: Optional["img_cache_manager_open_xcb_t"] = _DefaultArg
    ):

        super().__init__(
            open_cb=open_cb
        )

    @property
    def open_cb(self) -> "img_cache_manager_open_xcb_t":
        return self._get_field(
            'open_cb', 
            'img_cache_manager_open_xcb_t'
        )

    @open_cb.setter
    def open_cb(self, value: "img_cache_manager_open_xcb_t"):
        self._set_field(
            'open_cb', 
            value, 
            'img_cache_manager_open_xcb_t'
        )


class _gradient_cache_t(_StructUnion): 
    _c_type = 'lv_gradient_cache_t *'

    def __init__(
        self, 
        /, 
        key: Optional["uint32_t"] = 0, 
        life: Optional["uint32_t"] = 0, 
        filled: Optional["uint32_t"] = 0, 
        not_cached: Optional["uint32_t"] = 0, 
        map: Optional["color_t"] = _DefaultArg, 
        alloc_size: Optional["coord_t"] = _DefaultArg, 
        size: Optional["coord_t"] = _DefaultArg
    ):

        super().__init__(
            key=key, 
            life=life, 
            filled=filled, 
            not_cached=not_cached, 
            map=map, 
            alloc_size=alloc_size, 
            size=size
        )

    @property
    def key(self) -> "uint32_t":
        return self._get_field(
            'key', 
            'uint32_t'
        )

    @key.setter
    def key(self, value: "uint32_t"):
        self._set_field(
            'key', 
            value, 
            'uint32_t'
        )

    @property
    def life(self) -> "uint32_t":
        return self._get_field(
            'life', 
            'uint32_t'
        )

    @life.setter
    def life(self, value: "uint32_t"):
        self._set_field(
            'life', 
            value, 
            'uint32_t'
        )

    @property
    def filled(self) -> "uint32_t":
        return self._get_field(
            'filled', 
            'uint32_t'
        )

    @filled.setter
    def filled(self, value: "uint32_t"):
        self._set_field(
            'filled', 
            value, 
            'uint32_t'
        )

    @property
    def not_cached(self) -> "uint32_t":
        return self._get_field(
            'not_cached', 
            'uint32_t'
        )

    @not_cached.setter
    def not_cached(self, value: "uint32_t"):
        self._set_field(
            'not_cached', 
            value, 
            'uint32_t'
        )

    @property
    def map(self) -> "color_t":
        return self._get_field(
            'map', 
            'color_t'
        )

    @map.setter
    def map(self, value: "color_t"):
        self._set_field(
            'map', 
            value, 
            'color_t'
        )

    @property
    def alloc_size(self) -> "coord_t":
        return self._get_field(
            'alloc_size', 
            'coord_t'
        )

    @alloc_size.setter
    def alloc_size(self, value: "coord_t"):
        self._set_field(
            'alloc_size', 
            value, 
            'coord_t'
        )

    @property
    def size(self) -> "coord_t":
        return self._get_field(
            'size', 
            'coord_t'
        )

    @size.setter
    def size(self, value: "coord_t"):
        self._set_field(
            'size', 
            value, 
            'coord_t'
        )


class draw_rect_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_rect_dsc_t *'

    def __init__(
        self, 
        /, 
        radius: Optional["coord_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        bg_opa: Optional["opa_t"] = _DefaultArg, 
        bg_color: Optional["color_t"] = _DefaultArg, 
        bg_grad: Optional["grad_dsc_t"] = _DefaultArg, 
        bg_img_src: Optional[Any] = _DefaultArg, 
        bg_img_symbol_font: Optional[Any] = _DefaultArg, 
        bg_img_recolor: Optional["color_t"] = _DefaultArg, 
        bg_img_opa: Optional["opa_t"] = _DefaultArg, 
        bg_img_recolor_opa: Optional["opa_t"] = _DefaultArg, 
        bg_img_tiled: Optional["uint8_t"] = 0, 
        border_color: Optional["color_t"] = _DefaultArg, 
        border_width: Optional["coord_t"] = _DefaultArg, 
        border_opa: Optional["opa_t"] = _DefaultArg, 
        border_post: Optional["uint8_t"] = 0, 
        border_side: Optional["border_side_t"] = _DefaultArg, 
        outline_color: Optional["color_t"] = _DefaultArg, 
        outline_width: Optional["coord_t"] = _DefaultArg, 
        outline_pad: Optional["coord_t"] = _DefaultArg, 
        outline_opa: Optional["opa_t"] = _DefaultArg, 
        shadow_color: Optional["color_t"] = _DefaultArg, 
        shadow_width: Optional["coord_t"] = _DefaultArg, 
        shadow_ofs_x: Optional["coord_t"] = _DefaultArg, 
        shadow_ofs_y: Optional["coord_t"] = _DefaultArg, 
        shadow_spread: Optional["coord_t"] = _DefaultArg, 
        shadow_opa: Optional["opa_t"] = _DefaultArg
    ):

        super().__init__(
            radius=radius, 
            blend_mode=blend_mode, 
            bg_opa=bg_opa, 
            bg_color=bg_color, 
            bg_grad=bg_grad, 
            bg_img_src=bg_img_src, 
            bg_img_symbol_font=bg_img_symbol_font, 
            bg_img_recolor=bg_img_recolor, 
            bg_img_opa=bg_img_opa, 
            bg_img_recolor_opa=bg_img_recolor_opa, 
            bg_img_tiled=bg_img_tiled, 
            border_color=border_color, 
            border_width=border_width, 
            border_opa=border_opa, 
            border_post=border_post, 
            border_side=border_side, 
            outline_color=outline_color, 
            outline_width=outline_width, 
            outline_pad=outline_pad, 
            outline_opa=outline_opa, 
            shadow_color=shadow_color, 
            shadow_width=shadow_width, 
            shadow_ofs_x=shadow_ofs_x, 
            shadow_ofs_y=shadow_ofs_y, 
            shadow_spread=shadow_spread, 
            shadow_opa=shadow_opa
        )

    @property
    def radius(self) -> "coord_t":
        return self._get_field(
            'radius', 
            'coord_t'
        )

    @radius.setter
    def radius(self, value: "coord_t"):
        self._set_field(
            'radius', 
            value, 
            'coord_t'
        )

    @property
    def blend_mode(self) -> "blend_mode_t":
        return self._get_field(
            'blend_mode', 
            'blend_mode_t'
        )

    @blend_mode.setter
    def blend_mode(self, value: "blend_mode_t"):
        self._set_field(
            'blend_mode', 
            value, 
            'blend_mode_t'
        )

    @property
    def bg_opa(self) -> "opa_t":
        return self._get_field(
            'bg_opa', 
            'opa_t'
        )

    @bg_opa.setter
    def bg_opa(self, value: "opa_t"):
        self._set_field(
            'bg_opa', 
            value, 
            'opa_t'
        )

    @property
    def bg_color(self) -> "color_t":
        return self._get_field(
            'bg_color', 
            'color_t'
        )

    @bg_color.setter
    def bg_color(self, value: "color_t"):
        self._set_field(
            'bg_color', 
            value, 
            'color_t'
        )

    @property
    def bg_grad(self) -> "grad_dsc_t":
        return self._get_field(
            'bg_grad', 
            'grad_dsc_t'
        )

    @bg_grad.setter
    def bg_grad(self, value: "grad_dsc_t"):
        self._set_field(
            'bg_grad', 
            value, 
            'grad_dsc_t'
        )

    @property
    def bg_img_src(self) -> Any:
        return self._get_field(
            'bg_img_src', 
            'void'
        )

    @bg_img_src.setter
    def bg_img_src(self, value: Any):
        self._set_field(
            'bg_img_src', 
            value, 
            'void'
        )

    @property
    def bg_img_symbol_font(self) -> Any:
        return self._get_field(
            'bg_img_symbol_font', 
            'void'
        )

    @bg_img_symbol_font.setter
    def bg_img_symbol_font(self, value: Any):
        self._set_field(
            'bg_img_symbol_font', 
            value, 
            'void'
        )

    @property
    def bg_img_recolor(self) -> "color_t":
        return self._get_field(
            'bg_img_recolor', 
            'color_t'
        )

    @bg_img_recolor.setter
    def bg_img_recolor(self, value: "color_t"):
        self._set_field(
            'bg_img_recolor', 
            value, 
            'color_t'
        )

    @property
    def bg_img_opa(self) -> "opa_t":
        return self._get_field(
            'bg_img_opa', 
            'opa_t'
        )

    @bg_img_opa.setter
    def bg_img_opa(self, value: "opa_t"):
        self._set_field(
            'bg_img_opa', 
            value, 
            'opa_t'
        )

    @property
    def bg_img_recolor_opa(self) -> "opa_t":
        return self._get_field(
            'bg_img_recolor_opa', 
            'opa_t'
        )

    @bg_img_recolor_opa.setter
    def bg_img_recolor_opa(self, value: "opa_t"):
        self._set_field(
            'bg_img_recolor_opa', 
            value, 
            'opa_t'
        )

    @property
    def bg_img_tiled(self) -> "uint8_t":
        return self._get_field(
            'bg_img_tiled', 
            'uint8_t'
        )

    @bg_img_tiled.setter
    def bg_img_tiled(self, value: "uint8_t"):
        self._set_field(
            'bg_img_tiled', 
            value, 
            'uint8_t'
        )

    @property
    def border_color(self) -> "color_t":
        return self._get_field(
            'border_color', 
            'color_t'
        )

    @border_color.setter
    def border_color(self, value: "color_t"):
        self._set_field(
            'border_color', 
            value, 
            'color_t'
        )

    @property
    def border_width(self) -> "coord_t":
        return self._get_field(
            'border_width', 
            'coord_t'
        )

    @border_width.setter
    def border_width(self, value: "coord_t"):
        self._set_field(
            'border_width', 
            value, 
            'coord_t'
        )

    @property
    def border_opa(self) -> "opa_t":
        return self._get_field(
            'border_opa', 
            'opa_t'
        )

    @border_opa.setter
    def border_opa(self, value: "opa_t"):
        self._set_field(
            'border_opa', 
            value, 
            'opa_t'
        )

    @property
    def border_post(self) -> "uint8_t":
        return self._get_field(
            'border_post', 
            'uint8_t'
        )

    @border_post.setter
    def border_post(self, value: "uint8_t"):
        self._set_field(
            'border_post', 
            value, 
            'uint8_t'
        )

    @property
    def border_side(self) -> "border_side_t":
        return self._get_field(
            'border_side', 
            'border_side_t'
        )

    @border_side.setter
    def border_side(self, value: "border_side_t"):
        self._set_field(
            'border_side', 
            value, 
            'border_side_t'
        )

    @property
    def outline_color(self) -> "color_t":
        return self._get_field(
            'outline_color', 
            'color_t'
        )

    @outline_color.setter
    def outline_color(self, value: "color_t"):
        self._set_field(
            'outline_color', 
            value, 
            'color_t'
        )

    @property
    def outline_width(self) -> "coord_t":
        return self._get_field(
            'outline_width', 
            'coord_t'
        )

    @outline_width.setter
    def outline_width(self, value: "coord_t"):
        self._set_field(
            'outline_width', 
            value, 
            'coord_t'
        )

    @property
    def outline_pad(self) -> "coord_t":
        return self._get_field(
            'outline_pad', 
            'coord_t'
        )

    @outline_pad.setter
    def outline_pad(self, value: "coord_t"):
        self._set_field(
            'outline_pad', 
            value, 
            'coord_t'
        )

    @property
    def outline_opa(self) -> "opa_t":
        return self._get_field(
            'outline_opa', 
            'opa_t'
        )

    @outline_opa.setter
    def outline_opa(self, value: "opa_t"):
        self._set_field(
            'outline_opa', 
            value, 
            'opa_t'
        )

    @property
    def shadow_color(self) -> "color_t":
        return self._get_field(
            'shadow_color', 
            'color_t'
        )

    @shadow_color.setter
    def shadow_color(self, value: "color_t"):
        self._set_field(
            'shadow_color', 
            value, 
            'color_t'
        )

    @property
    def shadow_width(self) -> "coord_t":
        return self._get_field(
            'shadow_width', 
            'coord_t'
        )

    @shadow_width.setter
    def shadow_width(self, value: "coord_t"):
        self._set_field(
            'shadow_width', 
            value, 
            'coord_t'
        )

    @property
    def shadow_ofs_x(self) -> "coord_t":
        return self._get_field(
            'shadow_ofs_x', 
            'coord_t'
        )

    @shadow_ofs_x.setter
    def shadow_ofs_x(self, value: "coord_t"):
        self._set_field(
            'shadow_ofs_x', 
            value, 
            'coord_t'
        )

    @property
    def shadow_ofs_y(self) -> "coord_t":
        return self._get_field(
            'shadow_ofs_y', 
            'coord_t'
        )

    @shadow_ofs_y.setter
    def shadow_ofs_y(self, value: "coord_t"):
        self._set_field(
            'shadow_ofs_y', 
            value, 
            'coord_t'
        )

    @property
    def shadow_spread(self) -> "coord_t":
        return self._get_field(
            'shadow_spread', 
            'coord_t'
        )

    @shadow_spread.setter
    def shadow_spread(self, value: "coord_t"):
        self._set_field(
            'shadow_spread', 
            value, 
            'coord_t'
        )

    @property
    def shadow_opa(self) -> "opa_t":
        return self._get_field(
            'shadow_opa', 
            'opa_t'
        )

    @shadow_opa.setter
    def shadow_opa(self, value: "opa_t"):
        self._set_field(
            'shadow_opa', 
            value, 
            'opa_t'
        )


class draw_label_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_label_dsc_t *'

    def __init__(
        self, 
        /, 
        font: Optional["font_t"] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = 0, 
        sel_end: Optional["uint32_t"] = 0, 
        color: Optional["color_t"] = _DefaultArg, 
        sel_color: Optional["color_t"] = _DefaultArg, 
        sel_bg_color: Optional["color_t"] = _DefaultArg, 
        line_space: Optional["coord_t"] = _DefaultArg, 
        letter_space: Optional["coord_t"] = _DefaultArg, 
        ofs_x: Optional["coord_t"] = _DefaultArg, 
        ofs_y: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        bidi_dir: Optional["base_dir_t"] = _DefaultArg, 
        align: Optional["text_align_t"] = _DefaultArg, 
        flag: Optional["text_flag_t"] = _DefaultArg, 
        decor: Optional["text_decor_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg
    ):

        super().__init__(
            font=font, 
            sel_start=sel_start, 
            sel_end=sel_end, 
            color=color, 
            sel_color=sel_color, 
            sel_bg_color=sel_bg_color, 
            line_space=line_space, 
            letter_space=letter_space, 
            ofs_x=ofs_x, 
            ofs_y=ofs_y, 
            opa=opa, 
            bidi_dir=bidi_dir, 
            align=align, 
            flag=flag, 
            decor=decor, 
            blend_mode=blend_mode
        )

    @property
    def font(self) -> "font_t":
        return self._get_field(
            'font', 
            'font_t'
        )

    @font.setter
    def font(self, value: "font_t"):
        self._set_field(
            'font', 
            value, 
            'font_t'
        )

    @property
    def sel_start(self) -> "uint32_t":
        return self._get_field(
            'sel_start', 
            'uint32_t'
        )

    @sel_start.setter
    def sel_start(self, value: "uint32_t"):
        self._set_field(
            'sel_start', 
            value, 
            'uint32_t'
        )

    @property
    def sel_end(self) -> "uint32_t":
        return self._get_field(
            'sel_end', 
            'uint32_t'
        )

    @sel_end.setter
    def sel_end(self, value: "uint32_t"):
        self._set_field(
            'sel_end', 
            value, 
            'uint32_t'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def sel_color(self) -> "color_t":
        return self._get_field(
            'sel_color', 
            'color_t'
        )

    @sel_color.setter
    def sel_color(self, value: "color_t"):
        self._set_field(
            'sel_color', 
            value, 
            'color_t'
        )

    @property
    def sel_bg_color(self) -> "color_t":
        return self._get_field(
            'sel_bg_color', 
            'color_t'
        )

    @sel_bg_color.setter
    def sel_bg_color(self, value: "color_t"):
        self._set_field(
            'sel_bg_color', 
            value, 
            'color_t'
        )

    @property
    def line_space(self) -> "coord_t":
        return self._get_field(
            'line_space', 
            'coord_t'
        )

    @line_space.setter
    def line_space(self, value: "coord_t"):
        self._set_field(
            'line_space', 
            value, 
            'coord_t'
        )

    @property
    def letter_space(self) -> "coord_t":
        return self._get_field(
            'letter_space', 
            'coord_t'
        )

    @letter_space.setter
    def letter_space(self, value: "coord_t"):
        self._set_field(
            'letter_space', 
            value, 
            'coord_t'
        )

    @property
    def ofs_x(self) -> "coord_t":
        return self._get_field(
            'ofs_x', 
            'coord_t'
        )

    @ofs_x.setter
    def ofs_x(self, value: "coord_t"):
        self._set_field(
            'ofs_x', 
            value, 
            'coord_t'
        )

    @property
    def ofs_y(self) -> "coord_t":
        return self._get_field(
            'ofs_y', 
            'coord_t'
        )

    @ofs_y.setter
    def ofs_y(self, value: "coord_t"):
        self._set_field(
            'ofs_y', 
            value, 
            'coord_t'
        )

    @property
    def opa(self) -> "opa_t":
        return self._get_field(
            'opa', 
            'opa_t'
        )

    @opa.setter
    def opa(self, value: "opa_t"):
        self._set_field(
            'opa', 
            value, 
            'opa_t'
        )

    @property
    def bidi_dir(self) -> "base_dir_t":
        return self._get_field(
            'bidi_dir', 
            'base_dir_t'
        )

    @bidi_dir.setter
    def bidi_dir(self, value: "base_dir_t"):
        self._set_field(
            'bidi_dir', 
            value, 
            'base_dir_t'
        )

    @property
    def align(self) -> "text_align_t":
        return self._get_field(
            'align', 
            'text_align_t'
        )

    @align.setter
    def align(self, value: "text_align_t"):
        self._set_field(
            'align', 
            value, 
            'text_align_t'
        )

    @property
    def flag(self) -> "text_flag_t":
        return self._get_field(
            'flag', 
            'text_flag_t'
        )

    @flag.setter
    def flag(self, value: "text_flag_t"):
        self._set_field(
            'flag', 
            value, 
            'text_flag_t'
        )

    @property
    def decor(self) -> "text_decor_t":
        return self._get_field(
            'decor', 
            'text_decor_t'
        )

    @decor.setter
    def decor(self, value: "text_decor_t"):
        self._set_field(
            'decor', 
            value, 
            'text_decor_t'
        )

    @property
    def blend_mode(self) -> "blend_mode_t":
        return self._get_field(
            'blend_mode', 
            'blend_mode_t'
        )

    @blend_mode.setter
    def blend_mode(self, value: "blend_mode_t"):
        self._set_field(
            'blend_mode', 
            value, 
            'blend_mode_t'
        )


class _draw_label_hint_t(_StructUnion): 
    _c_type = 'lv_draw_label_hint_t *'

    def __init__(
        self, 
        /, 
        line_start: Optional["int32_t"] = 0, 
        y: Optional["int32_t"] = 0, 
        coord_y: Optional["int32_t"] = 0
    ):

        super().__init__(
            line_start=line_start, 
            y=y, 
            coord_y=coord_y
        )

    @property
    def line_start(self) -> "int32_t":
        return self._get_field(
            'line_start', 
            'int32_t'
        )

    @line_start.setter
    def line_start(self, value: "int32_t"):
        self._set_field(
            'line_start', 
            value, 
            'int32_t'
        )

    @property
    def y(self) -> "int32_t":
        return self._get_field(
            'y', 
            'int32_t'
        )

    @y.setter
    def y(self, value: "int32_t"):
        self._set_field(
            'y', 
            value, 
            'int32_t'
        )

    @property
    def coord_y(self) -> "int32_t":
        return self._get_field(
            'coord_y', 
            'int32_t'
        )

    @coord_y.setter
    def coord_y(self, value: "int32_t"):
        self._set_field(
            'coord_y', 
            value, 
            'int32_t'
        )


class draw_img_sup_t(_StructUnion): 
    _c_type = 'lv_draw_img_sup_t *'

    def __init__(
        self, 
        /, 
        chroma_key_color: Optional["color_t"] = _DefaultArg, 
        alpha_color: Optional["color_t"] = _DefaultArg, 
        palette: Optional["color32_t"] = _DefaultArg, 
        palette_size: Optional["uint32_t"] = 0, 
        chroma_keyed: Optional["uint32_t"] = 0
    ):

        super().__init__(
            chroma_key_color=chroma_key_color, 
            alpha_color=alpha_color, 
            palette=palette, 
            palette_size=palette_size, 
            chroma_keyed=chroma_keyed
        )

    @property
    def chroma_key_color(self) -> "color_t":
        return self._get_field(
            'chroma_key_color', 
            'color_t'
        )

    @chroma_key_color.setter
    def chroma_key_color(self, value: "color_t"):
        self._set_field(
            'chroma_key_color', 
            value, 
            'color_t'
        )

    @property
    def alpha_color(self) -> "color_t":
        return self._get_field(
            'alpha_color', 
            'color_t'
        )

    @alpha_color.setter
    def alpha_color(self, value: "color_t"):
        self._set_field(
            'alpha_color', 
            value, 
            'color_t'
        )

    @property
    def palette(self) -> "color32_t":
        return self._get_field(
            'palette', 
            'color32_t'
        )

    @palette.setter
    def palette(self, value: "color32_t"):
        self._set_field(
            'palette', 
            value, 
            'color32_t'
        )

    @property
    def palette_size(self) -> "uint32_t":
        return self._get_field(
            'palette_size', 
            'uint32_t'
        )

    @palette_size.setter
    def palette_size(self, value: "uint32_t"):
        self._set_field(
            'palette_size', 
            value, 
            'uint32_t'
        )

    @property
    def chroma_keyed(self) -> "uint32_t":
        return self._get_field(
            'chroma_keyed', 
            'uint32_t'
        )

    @chroma_keyed.setter
    def chroma_keyed(self, value: "uint32_t"):
        self._set_field(
            'chroma_keyed', 
            value, 
            'uint32_t'
        )


class draw_img_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_img_dsc_t *'

    def __init__(
        self, 
        /, 
        angle: Optional["int16_t"] = 0, 
        zoom: Optional["uint16_t"] = 0, 
        pivot: Optional["point_t"] = _DefaultArg, 
        chroma_key_color: Optional["color_t"] = _DefaultArg, 
        recolor: Optional["color_t"] = _DefaultArg, 
        recolor_opa: Optional["opa_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        frame_id: Optional["int32_t"] = 0, 
        antialias: Optional["uint16_t"] = 0, 
        sup: Optional["draw_img_sup_t"] = _DefaultArg
    ):

        super().__init__(
            angle=angle, 
            zoom=zoom, 
            pivot=pivot, 
            chroma_key_color=chroma_key_color, 
            recolor=recolor, 
            recolor_opa=recolor_opa, 
            opa=opa, 
            blend_mode=blend_mode, 
            frame_id=frame_id, 
            antialias=antialias, 
            sup=sup
        )

    @property
    def angle(self) -> "int16_t":
        return self._get_field(
            'angle', 
            'int16_t'
        )

    @angle.setter
    def angle(self, value: "int16_t"):
        self._set_field(
            'angle', 
            value, 
            'int16_t'
        )

    @property
    def zoom(self) -> "uint16_t":
        return self._get_field(
            'zoom', 
            'uint16_t'
        )

    @zoom.setter
    def zoom(self, value: "uint16_t"):
        self._set_field(
            'zoom', 
            value, 
            'uint16_t'
        )

    @property
    def pivot(self) -> "point_t":
        return self._get_field(
            'pivot', 
            'point_t'
        )

    @pivot.setter
    def pivot(self, value: "point_t"):
        self._set_field(
            'pivot', 
            value, 
            'point_t'
        )

    @property
    def chroma_key_color(self) -> "color_t":
        return self._get_field(
            'chroma_key_color', 
            'color_t'
        )

    @chroma_key_color.setter
    def chroma_key_color(self, value: "color_t"):
        self._set_field(
            'chroma_key_color', 
            value, 
            'color_t'
        )

    @property
    def recolor(self) -> "color_t":
        return self._get_field(
            'recolor', 
            'color_t'
        )

    @recolor.setter
    def recolor(self, value: "color_t"):
        self._set_field(
            'recolor', 
            value, 
            'color_t'
        )

    @property
    def recolor_opa(self) -> "opa_t":
        return self._get_field(
            'recolor_opa', 
            'opa_t'
        )

    @recolor_opa.setter
    def recolor_opa(self, value: "opa_t"):
        self._set_field(
            'recolor_opa', 
            value, 
            'opa_t'
        )

    @property
    def opa(self) -> "opa_t":
        return self._get_field(
            'opa', 
            'opa_t'
        )

    @opa.setter
    def opa(self, value: "opa_t"):
        self._set_field(
            'opa', 
            value, 
            'opa_t'
        )

    @property
    def blend_mode(self) -> "blend_mode_t":
        return self._get_field(
            'blend_mode', 
            'blend_mode_t'
        )

    @blend_mode.setter
    def blend_mode(self, value: "blend_mode_t"):
        self._set_field(
            'blend_mode', 
            value, 
            'blend_mode_t'
        )

    @property
    def frame_id(self) -> "int32_t":
        return self._get_field(
            'frame_id', 
            'int32_t'
        )

    @frame_id.setter
    def frame_id(self, value: "int32_t"):
        self._set_field(
            'frame_id', 
            value, 
            'int32_t'
        )

    @property
    def antialias(self) -> "uint16_t":
        return self._get_field(
            'antialias', 
            'uint16_t'
        )

    @antialias.setter
    def antialias(self, value: "uint16_t"):
        self._set_field(
            'antialias', 
            value, 
            'uint16_t'
        )

    @property
    def sup(self) -> "draw_img_sup_t":
        return self._get_field(
            'sup', 
            'draw_img_sup_t'
        )

    @sup.setter
    def sup(self, value: "draw_img_sup_t"):
        self._set_field(
            'sup', 
            value, 
            'draw_img_sup_t'
        )


class draw_line_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_line_dsc_t *'

    def __init__(
        self, 
        /, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        dash_width: Optional["coord_t"] = _DefaultArg, 
        dash_gap: Optional["coord_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        round_start: Optional["uint8_t"] = 0, 
        round_end: Optional["uint8_t"] = 0, 
        raw_end: Optional["uint8_t"] = 0
    ):

        super().__init__(
            color=color, 
            width=width, 
            dash_width=dash_width, 
            dash_gap=dash_gap, 
            opa=opa, 
            blend_mode=blend_mode, 
            round_start=round_start, 
            round_end=round_end, 
            raw_end=raw_end
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def width(self) -> "coord_t":
        return self._get_field(
            'width', 
            'coord_t'
        )

    @width.setter
    def width(self, value: "coord_t"):
        self._set_field(
            'width', 
            value, 
            'coord_t'
        )

    @property
    def dash_width(self) -> "coord_t":
        return self._get_field(
            'dash_width', 
            'coord_t'
        )

    @dash_width.setter
    def dash_width(self, value: "coord_t"):
        self._set_field(
            'dash_width', 
            value, 
            'coord_t'
        )

    @property
    def dash_gap(self) -> "coord_t":
        return self._get_field(
            'dash_gap', 
            'coord_t'
        )

    @dash_gap.setter
    def dash_gap(self, value: "coord_t"):
        self._set_field(
            'dash_gap', 
            value, 
            'coord_t'
        )

    @property
    def opa(self) -> "opa_t":
        return self._get_field(
            'opa', 
            'opa_t'
        )

    @opa.setter
    def opa(self, value: "opa_t"):
        self._set_field(
            'opa', 
            value, 
            'opa_t'
        )

    @property
    def blend_mode(self) -> "blend_mode_t":
        return self._get_field(
            'blend_mode', 
            'blend_mode_t'
        )

    @blend_mode.setter
    def blend_mode(self, value: "blend_mode_t"):
        self._set_field(
            'blend_mode', 
            value, 
            'blend_mode_t'
        )

    @property
    def round_start(self) -> "uint8_t":
        return self._get_field(
            'round_start', 
            'uint8_t'
        )

    @round_start.setter
    def round_start(self, value: "uint8_t"):
        self._set_field(
            'round_start', 
            value, 
            'uint8_t'
        )

    @property
    def round_end(self) -> "uint8_t":
        return self._get_field(
            'round_end', 
            'uint8_t'
        )

    @round_end.setter
    def round_end(self, value: "uint8_t"):
        self._set_field(
            'round_end', 
            value, 
            'uint8_t'
        )

    @property
    def raw_end(self) -> "uint8_t":
        return self._get_field(
            'raw_end', 
            'uint8_t'
        )

    @raw_end.setter
    def raw_end(self, value: "uint8_t"):
        self._set_field(
            'raw_end', 
            value, 
            'uint8_t'
        )


class draw_arc_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_arc_dsc_t *'

    def __init__(
        self, 
        /, 
        color: Optional["color_t"] = _DefaultArg, 
        width: Optional["coord_t"] = _DefaultArg, 
        start_angle: Optional["uint16_t"] = 0, 
        end_angle: Optional["uint16_t"] = 0, 
        img_src: Optional[Any] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        blend_mode: Optional["blend_mode_t"] = _DefaultArg, 
        rounded: Optional["uint8_t"] = 0
    ):

        super().__init__(
            color=color, 
            width=width, 
            start_angle=start_angle, 
            end_angle=end_angle, 
            img_src=img_src, 
            opa=opa, 
            blend_mode=blend_mode, 
            rounded=rounded
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def width(self) -> "coord_t":
        return self._get_field(
            'width', 
            'coord_t'
        )

    @width.setter
    def width(self, value: "coord_t"):
        self._set_field(
            'width', 
            value, 
            'coord_t'
        )

    @property
    def start_angle(self) -> "uint16_t":
        return self._get_field(
            'start_angle', 
            'uint16_t'
        )

    @start_angle.setter
    def start_angle(self, value: "uint16_t"):
        self._set_field(
            'start_angle', 
            value, 
            'uint16_t'
        )

    @property
    def end_angle(self) -> "uint16_t":
        return self._get_field(
            'end_angle', 
            'uint16_t'
        )

    @end_angle.setter
    def end_angle(self, value: "uint16_t"):
        self._set_field(
            'end_angle', 
            value, 
            'uint16_t'
        )

    @property
    def img_src(self) -> Any:
        return self._get_field(
            'img_src', 
            'void'
        )

    @img_src.setter
    def img_src(self, value: Any):
        self._set_field(
            'img_src', 
            value, 
            'void'
        )

    @property
    def opa(self) -> "opa_t":
        return self._get_field(
            'opa', 
            'opa_t'
        )

    @opa.setter
    def opa(self, value: "opa_t"):
        self._set_field(
            'opa', 
            value, 
            'opa_t'
        )

    @property
    def blend_mode(self) -> "blend_mode_t":
        return self._get_field(
            'blend_mode', 
            'blend_mode_t'
        )

    @blend_mode.setter
    def blend_mode(self, value: "blend_mode_t"):
        self._set_field(
            'blend_mode', 
            value, 
            'blend_mode_t'
        )

    @property
    def rounded(self) -> "uint8_t":
        return self._get_field(
            'rounded', 
            'uint8_t'
        )

    @rounded.setter
    def rounded(self, value: "uint8_t"):
        self._set_field(
            'rounded', 
            value, 
            'uint8_t'
        )


class _draw_mask_saved_t(_StructUnion): 
    _c_type = 'lv_draw_mask_saved_t *'

    def __init__(
        self, 
        /, 
        param: Optional[Any] = _DefaultArg, 
        custom_id: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            param=param, 
            custom_id=custom_id
        )

    @property
    def param(self) -> Any:
        return self._get_field(
            'param', 
            'void'
        )

    @param.setter
    def param(self, value: Any):
        self._set_field(
            'param', 
            value, 
            'void'
        )

    @property
    def custom_id(self) -> Any:
        return self._get_field(
            'custom_id', 
            'void'
        )

    @custom_id.setter
    def custom_id(self, value: Any):
        self._set_field(
            'custom_id', 
            value, 
            'void'
        )


class _draw_mask_common_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_mask_common_dsc_t *'

    def __init__(
        self, 
        /, 
        cb: Optional["draw_mask_xcb_t"] = _DefaultArg, 
        type: Optional["draw_mask_type_t"] = _DefaultArg
    ):

        super().__init__(
            cb=cb, 
            type=type
        )

    @property
    def cb(self) -> "draw_mask_xcb_t":
        return self._get_field(
            'cb', 
            'draw_mask_xcb_t'
        )

    @cb.setter
    def cb(self, value: "draw_mask_xcb_t"):
        self._set_field(
            'cb', 
            value, 
            'draw_mask_xcb_t'
        )

    @property
    def type(self) -> "draw_mask_type_t":
        return self._get_field(
            'type', 
            'draw_mask_type_t'
        )

    @type.setter
    def type(self, value: "draw_mask_type_t"):
        self._set_field(
            'type', 
            value, 
            'draw_mask_type_t'
        )


class draw_mask_line_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_line_param_cfg_t *'

    def __init__(
        self, 
        /, 
        p1: Optional["point_t"] = _DefaultArg, 
        p2: Optional["point_t"] = _DefaultArg, 
        side: Optional["draw_mask_line_side_t"] = _DefaultArg
    ):

        super().__init__(
            p1=p1, 
            p2=p2, 
            side=side
        )

    @property
    def p1(self) -> "point_t":
        return self._get_field(
            'p1', 
            'point_t'
        )

    @p1.setter
    def p1(self, value: "point_t"):
        self._set_field(
            'p1', 
            value, 
            'point_t'
        )

    @property
    def p2(self) -> "point_t":
        return self._get_field(
            'p2', 
            'point_t'
        )

    @p2.setter
    def p2(self, value: "point_t"):
        self._set_field(
            'p2', 
            value, 
            'point_t'
        )

    @property
    def side(self) -> "draw_mask_line_side_t":
        return self._get_field(
            'side', 
            'draw_mask_line_side_t'
        )

    @side.setter
    def side(self, value: "draw_mask_line_side_t"):
        self._set_field(
            'side', 
            value, 
            'draw_mask_line_side_t'
        )


class draw_mask_line_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_line_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_line_param_cfg_t"] = _DefaultArg, 
        origo: Optional["point_t"] = _DefaultArg, 
        xy_steep: Optional["int32_t"] = 0, 
        yx_steep: Optional["int32_t"] = 0, 
        steep: Optional["int32_t"] = 0, 
        spx: Optional["int32_t"] = 0, 
        flat: Optional["uint8_t"] = 0, 
        inv: Optional["uint8_t"] = 0
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg, 
            origo=origo, 
            xy_steep=xy_steep, 
            yx_steep=yx_steep, 
            steep=steep, 
            spx=spx, 
            flat=flat, 
            inv=inv
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_line_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_line_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_line_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_line_param_cfg_t'
        )

    @property
    def origo(self) -> "point_t":
        return self._get_field(
            'origo', 
            'point_t'
        )

    @origo.setter
    def origo(self, value: "point_t"):
        self._set_field(
            'origo', 
            value, 
            'point_t'
        )

    @property
    def xy_steep(self) -> "int32_t":
        return self._get_field(
            'xy_steep', 
            'int32_t'
        )

    @xy_steep.setter
    def xy_steep(self, value: "int32_t"):
        self._set_field(
            'xy_steep', 
            value, 
            'int32_t'
        )

    @property
    def yx_steep(self) -> "int32_t":
        return self._get_field(
            'yx_steep', 
            'int32_t'
        )

    @yx_steep.setter
    def yx_steep(self, value: "int32_t"):
        self._set_field(
            'yx_steep', 
            value, 
            'int32_t'
        )

    @property
    def steep(self) -> "int32_t":
        return self._get_field(
            'steep', 
            'int32_t'
        )

    @steep.setter
    def steep(self, value: "int32_t"):
        self._set_field(
            'steep', 
            value, 
            'int32_t'
        )

    @property
    def spx(self) -> "int32_t":
        return self._get_field(
            'spx', 
            'int32_t'
        )

    @spx.setter
    def spx(self, value: "int32_t"):
        self._set_field(
            'spx', 
            value, 
            'int32_t'
        )

    @property
    def flat(self) -> "uint8_t":
        return self._get_field(
            'flat', 
            'uint8_t'
        )

    @flat.setter
    def flat(self, value: "uint8_t"):
        self._set_field(
            'flat', 
            value, 
            'uint8_t'
        )

    @property
    def inv(self) -> "uint8_t":
        return self._get_field(
            'inv', 
            'uint8_t'
        )

    @inv.setter
    def inv(self, value: "uint8_t"):
        self._set_field(
            'inv', 
            value, 
            'uint8_t'
        )


class draw_mask_angle_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_angle_param_cfg_t *'

    def __init__(
        self, 
        /, 
        vertex_p: Optional["point_t"] = _DefaultArg, 
        start_angle: Optional["coord_t"] = _DefaultArg, 
        end_angle: Optional["coord_t"] = _DefaultArg
    ):

        super().__init__(
            vertex_p=vertex_p, 
            start_angle=start_angle, 
            end_angle=end_angle
        )

    @property
    def vertex_p(self) -> "point_t":
        return self._get_field(
            'vertex_p', 
            'point_t'
        )

    @vertex_p.setter
    def vertex_p(self, value: "point_t"):
        self._set_field(
            'vertex_p', 
            value, 
            'point_t'
        )

    @property
    def start_angle(self) -> "coord_t":
        return self._get_field(
            'start_angle', 
            'coord_t'
        )

    @start_angle.setter
    def start_angle(self, value: "coord_t"):
        self._set_field(
            'start_angle', 
            value, 
            'coord_t'
        )

    @property
    def end_angle(self) -> "coord_t":
        return self._get_field(
            'end_angle', 
            'coord_t'
        )

    @end_angle.setter
    def end_angle(self, value: "coord_t"):
        self._set_field(
            'end_angle', 
            value, 
            'coord_t'
        )


class draw_mask_angle_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_angle_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_angle_param_cfg_t"] = _DefaultArg, 
        start_line: Optional["draw_mask_line_param_t"] = _DefaultArg, 
        end_line: Optional["draw_mask_line_param_t"] = _DefaultArg, 
        delta_deg: Optional["uint16_t"] = 0
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg, 
            start_line=start_line, 
            end_line=end_line, 
            delta_deg=delta_deg
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_angle_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_angle_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_angle_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_angle_param_cfg_t'
        )

    @property
    def start_line(self) -> "draw_mask_line_param_t":
        return self._get_field(
            'start_line', 
            'draw_mask_line_param_t'
        )

    @start_line.setter
    def start_line(self, value: "draw_mask_line_param_t"):
        self._set_field(
            'start_line', 
            value, 
            'draw_mask_line_param_t'
        )

    @property
    def end_line(self) -> "draw_mask_line_param_t":
        return self._get_field(
            'end_line', 
            'draw_mask_line_param_t'
        )

    @end_line.setter
    def end_line(self, value: "draw_mask_line_param_t"):
        self._set_field(
            'end_line', 
            value, 
            'draw_mask_line_param_t'
        )

    @property
    def delta_deg(self) -> "uint16_t":
        return self._get_field(
            'delta_deg', 
            'uint16_t'
        )

    @delta_deg.setter
    def delta_deg(self, value: "uint16_t"):
        self._set_field(
            'delta_deg', 
            value, 
            'uint16_t'
        )


class _draw_mask_radius_circle_dsc_t(_StructUnion): 
    _c_type = 'lv_draw_mask_radius_circle_dsc_t *'

    def __init__(
        self, 
        /, 
        buf: Optional["uint8_t"] = 0, 
        cir_opa: Optional["opa_t"] = _DefaultArg, 
        x_start_on_y: Optional["uint16_t"] = 0, 
        opa_start_on_y: Optional["uint16_t"] = 0, 
        life: Optional["int32_t"] = 0, 
        used_cnt: Optional["uint32_t"] = 0, 
        radius: Optional["coord_t"] = _DefaultArg
    ):

        super().__init__(
            buf=buf, 
            cir_opa=cir_opa, 
            x_start_on_y=x_start_on_y, 
            opa_start_on_y=opa_start_on_y, 
            life=life, 
            used_cnt=used_cnt, 
            radius=radius
        )

    @property
    def buf(self) -> "uint8_t":
        return self._get_field(
            'buf', 
            'uint8_t'
        )

    @buf.setter
    def buf(self, value: "uint8_t"):
        self._set_field(
            'buf', 
            value, 
            'uint8_t'
        )

    @property
    def cir_opa(self) -> "opa_t":
        return self._get_field(
            'cir_opa', 
            'opa_t'
        )

    @cir_opa.setter
    def cir_opa(self, value: "opa_t"):
        self._set_field(
            'cir_opa', 
            value, 
            'opa_t'
        )

    @property
    def x_start_on_y(self) -> "uint16_t":
        return self._get_field(
            'x_start_on_y', 
            'uint16_t'
        )

    @x_start_on_y.setter
    def x_start_on_y(self, value: "uint16_t"):
        self._set_field(
            'x_start_on_y', 
            value, 
            'uint16_t'
        )

    @property
    def opa_start_on_y(self) -> "uint16_t":
        return self._get_field(
            'opa_start_on_y', 
            'uint16_t'
        )

    @opa_start_on_y.setter
    def opa_start_on_y(self, value: "uint16_t"):
        self._set_field(
            'opa_start_on_y', 
            value, 
            'uint16_t'
        )

    @property
    def life(self) -> "int32_t":
        return self._get_field(
            'life', 
            'int32_t'
        )

    @life.setter
    def life(self, value: "int32_t"):
        self._set_field(
            'life', 
            value, 
            'int32_t'
        )

    @property
    def used_cnt(self) -> "uint32_t":
        return self._get_field(
            'used_cnt', 
            'uint32_t'
        )

    @used_cnt.setter
    def used_cnt(self, value: "uint32_t"):
        self._set_field(
            'used_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def radius(self) -> "coord_t":
        return self._get_field(
            'radius', 
            'coord_t'
        )

    @radius.setter
    def radius(self, value: "coord_t"):
        self._set_field(
            'radius', 
            value, 
            'coord_t'
        )


class draw_mask_radius_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_radius_param_cfg_t *'

    def __init__(
        self, 
        /, 
        rect: Optional["area_t"] = _DefaultArg, 
        radius: Optional["coord_t"] = _DefaultArg, 
        outer: Optional["uint8_t"] = 0
    ):

        super().__init__(
            rect=rect, 
            radius=radius, 
            outer=outer
        )

    @property
    def rect(self) -> "area_t":
        return self._get_field(
            'rect', 
            'area_t'
        )

    @rect.setter
    def rect(self, value: "area_t"):
        self._set_field(
            'rect', 
            value, 
            'area_t'
        )

    @property
    def radius(self) -> "coord_t":
        return self._get_field(
            'radius', 
            'coord_t'
        )

    @radius.setter
    def radius(self, value: "coord_t"):
        self._set_field(
            'radius', 
            value, 
            'coord_t'
        )

    @property
    def outer(self) -> "uint8_t":
        return self._get_field(
            'outer', 
            'uint8_t'
        )

    @outer.setter
    def outer(self, value: "uint8_t"):
        self._set_field(
            'outer', 
            value, 
            'uint8_t'
        )


class draw_mask_radius_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_radius_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_radius_param_cfg_t"] = _DefaultArg, 
        circle: Optional["_draw_mask_radius_circle_dsc_t"] = _DefaultArg
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg, 
            circle=circle
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_radius_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_radius_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_radius_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_radius_param_cfg_t'
        )

    @property
    def circle(self) -> "_draw_mask_radius_circle_dsc_t":
        return self._get_field(
            'circle', 
            '_draw_mask_radius_circle_dsc_t'
        )

    @circle.setter
    def circle(self, value: "_draw_mask_radius_circle_dsc_t"):
        self._set_field(
            'circle', 
            value, 
            '_draw_mask_radius_circle_dsc_t'
        )


class draw_mask_fade_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_fade_param_cfg_t *'

    def __init__(
        self, 
        /, 
        coords: Optional["area_t"] = _DefaultArg, 
        y_top: Optional["coord_t"] = _DefaultArg, 
        y_bottom: Optional["coord_t"] = _DefaultArg, 
        opa_top: Optional["opa_t"] = _DefaultArg, 
        opa_bottom: Optional["opa_t"] = _DefaultArg
    ):

        super().__init__(
            coords=coords, 
            y_top=y_top, 
            y_bottom=y_bottom, 
            opa_top=opa_top, 
            opa_bottom=opa_bottom
        )

    @property
    def coords(self) -> "area_t":
        return self._get_field(
            'coords', 
            'area_t'
        )

    @coords.setter
    def coords(self, value: "area_t"):
        self._set_field(
            'coords', 
            value, 
            'area_t'
        )

    @property
    def y_top(self) -> "coord_t":
        return self._get_field(
            'y_top', 
            'coord_t'
        )

    @y_top.setter
    def y_top(self, value: "coord_t"):
        self._set_field(
            'y_top', 
            value, 
            'coord_t'
        )

    @property
    def y_bottom(self) -> "coord_t":
        return self._get_field(
            'y_bottom', 
            'coord_t'
        )

    @y_bottom.setter
    def y_bottom(self, value: "coord_t"):
        self._set_field(
            'y_bottom', 
            value, 
            'coord_t'
        )

    @property
    def opa_top(self) -> "opa_t":
        return self._get_field(
            'opa_top', 
            'opa_t'
        )

    @opa_top.setter
    def opa_top(self, value: "opa_t"):
        self._set_field(
            'opa_top', 
            value, 
            'opa_t'
        )

    @property
    def opa_bottom(self) -> "opa_t":
        return self._get_field(
            'opa_bottom', 
            'opa_t'
        )

    @opa_bottom.setter
    def opa_bottom(self, value: "opa_t"):
        self._set_field(
            'opa_bottom', 
            value, 
            'opa_t'
        )


class draw_mask_fade_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_fade_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_fade_param_cfg_t"] = _DefaultArg
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_fade_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_fade_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_fade_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_fade_param_cfg_t'
        )


class draw_mask_map_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_map_param_cfg_t *'

    def __init__(
        self, 
        /, 
        coords: Optional["area_t"] = _DefaultArg, 
        map: Optional["opa_t"] = _DefaultArg
    ):

        super().__init__(
            coords=coords, 
            map=map
        )

    @property
    def coords(self) -> "area_t":
        return self._get_field(
            'coords', 
            'area_t'
        )

    @coords.setter
    def coords(self, value: "area_t"):
        self._set_field(
            'coords', 
            value, 
            'area_t'
        )

    @property
    def map(self) -> "opa_t":
        return self._get_field(
            'map', 
            'opa_t'
        )

    @map.setter
    def map(self, value: "opa_t"):
        self._set_field(
            'map', 
            value, 
            'opa_t'
        )


class _draw_mask_map_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_map_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_map_param_cfg_t"] = _DefaultArg
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_map_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_map_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_map_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_map_param_cfg_t'
        )


class draw_mask_polygon_param_cfg_t(_StructUnion): 
    _c_type = 'lv_draw_mask_polygon_param_cfg_t *'

    def __init__(
        self, 
        /, 
        points: Optional["point_t"] = _DefaultArg, 
        point_cnt: Optional["uint16_t"] = 0
    ):

        super().__init__(
            points=points, 
            point_cnt=point_cnt
        )

    @property
    def points(self) -> "point_t":
        return self._get_field(
            'points', 
            'point_t'
        )

    @points.setter
    def points(self, value: "point_t"):
        self._set_field(
            'points', 
            value, 
            'point_t'
        )

    @property
    def point_cnt(self) -> "uint16_t":
        return self._get_field(
            'point_cnt', 
            'uint16_t'
        )

    @point_cnt.setter
    def point_cnt(self, value: "uint16_t"):
        self._set_field(
            'point_cnt', 
            value, 
            'uint16_t'
        )


class draw_mask_polygon_param_t(_StructUnion): 
    _c_type = 'lv_draw_mask_polygon_param_t *'

    def __init__(
        self, 
        /, 
        dsc: Optional["_draw_mask_common_dsc_t"] = _DefaultArg, 
        cfg: Optional["draw_mask_polygon_param_cfg_t"] = _DefaultArg
    ):

        super().__init__(
            dsc=dsc, 
            cfg=cfg
        )

    @property
    def dsc(self) -> "_draw_mask_common_dsc_t":
        return self._get_field(
            'dsc', 
            '_draw_mask_common_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "_draw_mask_common_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            '_draw_mask_common_dsc_t'
        )

    @property
    def cfg(self) -> "draw_mask_polygon_param_cfg_t":
        return self._get_field(
            'cfg', 
            'draw_mask_polygon_param_cfg_t'
        )

    @cfg.setter
    def cfg(self, value: "draw_mask_polygon_param_cfg_t"):
        self._set_field(
            'cfg', 
            value, 
            'draw_mask_polygon_param_cfg_t'
        )


class draw_mask_t(_StructUnion): 
    _c_type = 'lv_draw_mask_t *'

    def __init__(
        self, 
        /, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            user_data=user_data
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class draw_layer_ctx_original_t(_StructUnion): 
    _c_type = 'lv_draw_layer_ctx_original_t *'

    def __init__(
        self, 
        /, 
        clip_area: Optional["area_t"] = _DefaultArg, 
        buf_area: Optional["area_t"] = _DefaultArg, 
        buf: Optional[Any] = _DefaultArg, 
        color_format: Optional["color_format_t"] = _DefaultArg
    ):

        super().__init__(
            clip_area=clip_area, 
            buf_area=buf_area, 
            buf=buf, 
            color_format=color_format
        )

    @property
    def clip_area(self) -> "area_t":
        return self._get_field(
            'clip_area', 
            'area_t'
        )

    @clip_area.setter
    def clip_area(self, value: "area_t"):
        self._set_field(
            'clip_area', 
            value, 
            'area_t'
        )

    @property
    def buf_area(self) -> "area_t":
        return self._get_field(
            'buf_area', 
            'area_t'
        )

    @buf_area.setter
    def buf_area(self, value: "area_t"):
        self._set_field(
            'buf_area', 
            value, 
            'area_t'
        )

    @property
    def buf(self) -> Any:
        return self._get_field(
            'buf', 
            'void'
        )

    @buf.setter
    def buf(self, value: Any):
        self._set_field(
            'buf', 
            value, 
            'void'
        )

    @property
    def color_format(self) -> "color_format_t":
        return self._get_field(
            'color_format', 
            'color_format_t'
        )

    @color_format.setter
    def color_format(self, value: "color_format_t"):
        self._set_field(
            'color_format', 
            value, 
            'color_format_t'
        )


class _draw_layer_ctx_t(_StructUnion): 
    _c_type = 'lv_draw_layer_ctx_t *'

    def __init__(
        self, 
        /, 
        area_full: Optional["area_t"] = _DefaultArg, 
        area_act: Optional["area_t"] = _DefaultArg, 
        max_row_with_alpha: Optional["coord_t"] = _DefaultArg, 
        max_row_with_no_alpha: Optional["coord_t"] = _DefaultArg, 
        buf: Optional[Any] = _DefaultArg, 
        original: Optional["draw_layer_ctx_original_t"] = _DefaultArg
    ):

        super().__init__(
            area_full=area_full, 
            area_act=area_act, 
            max_row_with_alpha=max_row_with_alpha, 
            max_row_with_no_alpha=max_row_with_no_alpha, 
            buf=buf, 
            original=original
        )

    @property
    def area_full(self) -> "area_t":
        return self._get_field(
            'area_full', 
            'area_t'
        )

    @area_full.setter
    def area_full(self, value: "area_t"):
        self._set_field(
            'area_full', 
            value, 
            'area_t'
        )

    @property
    def area_act(self) -> "area_t":
        return self._get_field(
            'area_act', 
            'area_t'
        )

    @area_act.setter
    def area_act(self, value: "area_t"):
        self._set_field(
            'area_act', 
            value, 
            'area_t'
        )

    @property
    def max_row_with_alpha(self) -> "coord_t":
        return self._get_field(
            'max_row_with_alpha', 
            'coord_t'
        )

    @max_row_with_alpha.setter
    def max_row_with_alpha(self, value: "coord_t"):
        self._set_field(
            'max_row_with_alpha', 
            value, 
            'coord_t'
        )

    @property
    def max_row_with_no_alpha(self) -> "coord_t":
        return self._get_field(
            'max_row_with_no_alpha', 
            'coord_t'
        )

    @max_row_with_no_alpha.setter
    def max_row_with_no_alpha(self, value: "coord_t"):
        self._set_field(
            'max_row_with_no_alpha', 
            value, 
            'coord_t'
        )

    @property
    def buf(self) -> Any:
        return self._get_field(
            'buf', 
            'void'
        )

    @buf.setter
    def buf(self, value: Any):
        self._set_field(
            'buf', 
            value, 
            'void'
        )

    @property
    def original(self) -> "draw_layer_ctx_original_t":
        return self._get_field(
            'original', 
            'draw_layer_ctx_original_t'
        )

    @original.setter
    def original(self, value: "draw_layer_ctx_original_t"):
        self._set_field(
            'original', 
            value, 
            'draw_layer_ctx_original_t'
        )


class _draw_ctx_t(_StructUnion): 
    _c_type = 'lv_draw_ctx_t *'

    def __init__(
        self, 
        /, 
        buf: Optional[Any] = _DefaultArg, 
        buf_area: Optional["area_t"] = _DefaultArg, 
        clip_area: Optional["area_t"] = _DefaultArg, 
        color_format: Optional["color_format_t"] = _DefaultArg, 
        init_buf: Optional["draw_ctx_init_buf_cb_t"] = _DefaultArg, 
        draw_rect: Optional["draw_ctx_draw_rect_cb_t"] = _DefaultArg, 
        draw_arc: Optional["draw_ctx_draw_arc_cb_t"] = _DefaultArg, 
        draw_img_decoded: Optional["draw_ctx_draw_img_decoded_cb_t"] = _DefaultArg, 
        draw_img: Optional["draw_ctx_draw_img_cb_t"] = _DefaultArg, 
        draw_letter: Optional["draw_ctx_draw_letter_cb_t"] = _DefaultArg, 
        draw_line: Optional["draw_ctx_draw_line_cb_t"] = _DefaultArg, 
        draw_polygon: Optional["draw_ctx_draw_polygon_cb_t"] = _DefaultArg, 
        draw_transform: Optional["draw_ctx_draw_transform_cb_t"] = _DefaultArg, 
        wait_for_finish: Optional["draw_ctx_wait_for_finish_cb_t"] = _DefaultArg, 
        buffer_copy: Optional["draw_ctx_buffer_copy_cb_t"] = _DefaultArg, 
        buffer_convert: Optional["draw_ctx_buffer_convert_cb_t"] = _DefaultArg, 
        buffer_clear: Optional["draw_ctx_buffer_clear_cb_t"] = _DefaultArg, 
        layer_init: Optional["draw_ctx_layer_init_cb_t"] = _DefaultArg, 
        layer_adjust: Optional["draw_ctx_layer_adjust_cb_t"] = _DefaultArg, 
        layer_blend: Optional["draw_ctx_layer_blend_cb_t"] = _DefaultArg, 
        layer_destroy: Optional["draw_ctx_layer_destroy_cb_t"] = _DefaultArg, 
        layer_instance_size: Optional["size_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            buf=buf, 
            buf_area=buf_area, 
            clip_area=clip_area, 
            color_format=color_format, 
            init_buf=init_buf, 
            draw_rect=draw_rect, 
            draw_arc=draw_arc, 
            draw_img_decoded=draw_img_decoded, 
            draw_img=draw_img, 
            draw_letter=draw_letter, 
            draw_line=draw_line, 
            draw_polygon=draw_polygon, 
            draw_transform=draw_transform, 
            wait_for_finish=wait_for_finish, 
            buffer_copy=buffer_copy, 
            buffer_convert=buffer_convert, 
            buffer_clear=buffer_clear, 
            layer_init=layer_init, 
            layer_adjust=layer_adjust, 
            layer_blend=layer_blend, 
            layer_destroy=layer_destroy, 
            layer_instance_size=layer_instance_size, 
            user_data=user_data
        )

    @property
    def buf(self) -> Any:
        return self._get_field(
            'buf', 
            'void'
        )

    @buf.setter
    def buf(self, value: Any):
        self._set_field(
            'buf', 
            value, 
            'void'
        )

    @property
    def buf_area(self) -> "area_t":
        return self._get_field(
            'buf_area', 
            'area_t'
        )

    @buf_area.setter
    def buf_area(self, value: "area_t"):
        self._set_field(
            'buf_area', 
            value, 
            'area_t'
        )

    @property
    def clip_area(self) -> "area_t":
        return self._get_field(
            'clip_area', 
            'area_t'
        )

    @clip_area.setter
    def clip_area(self, value: "area_t"):
        self._set_field(
            'clip_area', 
            value, 
            'area_t'
        )

    @property
    def color_format(self) -> "color_format_t":
        return self._get_field(
            'color_format', 
            'color_format_t'
        )

    @color_format.setter
    def color_format(self, value: "color_format_t"):
        self._set_field(
            'color_format', 
            value, 
            'color_format_t'
        )

    @property
    def init_buf(self) -> Optional["draw_ctx_init_buf_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_init_buf_cb_t"', None)

    @init_buf.setter
    def init_buf(self, value: "draw_ctx_init_buf_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_init_buf_cb_t"' not in cb_store:
            cb_store['"draw_ctx_init_buf_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_init_buf_cb_t')
            cb_store['"draw_ctx_init_buf_cb_t".c_func'] = c_func
            self._obj.init_buf = c_func
        else:
            cb_store['"draw_ctx_init_buf_cb_t"'] = value

    @property
    def draw_rect(self) -> Optional["draw_ctx_draw_rect_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_rect_cb_t"', None)

    @draw_rect.setter
    def draw_rect(self, value: "draw_ctx_draw_rect_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_rect_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_rect_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_rect_cb_t')
            cb_store['"draw_ctx_draw_rect_cb_t".c_func'] = c_func
            self._obj.draw_rect = c_func
        else:
            cb_store['"draw_ctx_draw_rect_cb_t"'] = value

    @property
    def draw_arc(self) -> Optional["draw_ctx_draw_arc_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_arc_cb_t"', None)

    @draw_arc.setter
    def draw_arc(self, value: "draw_ctx_draw_arc_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_arc_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_arc_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_arc_cb_t')
            cb_store['"draw_ctx_draw_arc_cb_t".c_func'] = c_func
            self._obj.draw_arc = c_func
        else:
            cb_store['"draw_ctx_draw_arc_cb_t"'] = value

    @property
    def draw_img_decoded(self) -> Optional["draw_ctx_draw_img_decoded_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_img_decoded_cb_t"', None)

    @draw_img_decoded.setter
    def draw_img_decoded(self, value: "draw_ctx_draw_img_decoded_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_img_decoded_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_img_decoded_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_img_decoded_cb_t')
            cb_store['"draw_ctx_draw_img_decoded_cb_t".c_func'] = c_func
            self._obj.draw_img_decoded = c_func
        else:
            cb_store['"draw_ctx_draw_img_decoded_cb_t"'] = value

    @property
    def draw_img(self) -> Optional["draw_ctx_draw_img_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_img_cb_t"', None)

    @draw_img.setter
    def draw_img(self, value: "draw_ctx_draw_img_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_img_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_img_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_img_cb_t')
            cb_store['"draw_ctx_draw_img_cb_t".c_func'] = c_func
            self._obj.draw_img = c_func
        else:
            cb_store['"draw_ctx_draw_img_cb_t"'] = value

    @property
    def draw_letter(self) -> Optional["draw_ctx_draw_letter_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_letter_cb_t"', None)

    @draw_letter.setter
    def draw_letter(self, value: "draw_ctx_draw_letter_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_letter_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_letter_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_letter_cb_t')
            cb_store['"draw_ctx_draw_letter_cb_t".c_func'] = c_func
            self._obj.draw_letter = c_func
        else:
            cb_store['"draw_ctx_draw_letter_cb_t"'] = value

    @property
    def draw_line(self) -> Optional["draw_ctx_draw_line_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_line_cb_t"', None)

    @draw_line.setter
    def draw_line(self, value: "draw_ctx_draw_line_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_line_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_line_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_line_cb_t')
            cb_store['"draw_ctx_draw_line_cb_t".c_func'] = c_func
            self._obj.draw_line = c_func
        else:
            cb_store['"draw_ctx_draw_line_cb_t"'] = value

    @property
    def draw_polygon(self) -> Optional["draw_ctx_draw_polygon_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_polygon_cb_t"', None)

    @draw_polygon.setter
    def draw_polygon(self, value: "draw_ctx_draw_polygon_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_polygon_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_polygon_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_polygon_cb_t')
            cb_store['"draw_ctx_draw_polygon_cb_t".c_func'] = c_func
            self._obj.draw_polygon = c_func
        else:
            cb_store['"draw_ctx_draw_polygon_cb_t"'] = value

    @property
    def draw_transform(self) -> Optional["draw_ctx_draw_transform_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_draw_transform_cb_t"', None)

    @draw_transform.setter
    def draw_transform(self, value: "draw_ctx_draw_transform_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_draw_transform_cb_t"' not in cb_store:
            cb_store['"draw_ctx_draw_transform_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_draw_transform_cb_t')
            cb_store['"draw_ctx_draw_transform_cb_t".c_func'] = c_func
            self._obj.draw_transform = c_func
        else:
            cb_store['"draw_ctx_draw_transform_cb_t"'] = value

    @property
    def wait_for_finish(self) -> Optional["draw_ctx_wait_for_finish_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_wait_for_finish_cb_t"', None)

    @wait_for_finish.setter
    def wait_for_finish(self, value: "draw_ctx_wait_for_finish_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_wait_for_finish_cb_t"' not in cb_store:
            cb_store['"draw_ctx_wait_for_finish_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_wait_for_finish_cb_t')
            cb_store['"draw_ctx_wait_for_finish_cb_t".c_func'] = c_func
            self._obj.wait_for_finish = c_func
        else:
            cb_store['"draw_ctx_wait_for_finish_cb_t"'] = value

    @property
    def buffer_copy(self) -> Optional["draw_ctx_buffer_copy_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_buffer_copy_cb_t"', None)

    @buffer_copy.setter
    def buffer_copy(self, value: "draw_ctx_buffer_copy_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_buffer_copy_cb_t"' not in cb_store:
            cb_store['"draw_ctx_buffer_copy_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_buffer_copy_cb_t')
            cb_store['"draw_ctx_buffer_copy_cb_t".c_func'] = c_func
            self._obj.buffer_copy = c_func
        else:
            cb_store['"draw_ctx_buffer_copy_cb_t"'] = value

    @property
    def buffer_convert(self) -> Optional["draw_ctx_buffer_convert_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_buffer_convert_cb_t"', None)

    @buffer_convert.setter
    def buffer_convert(self, value: "draw_ctx_buffer_convert_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_buffer_convert_cb_t"' not in cb_store:
            cb_store['"draw_ctx_buffer_convert_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_buffer_convert_cb_t')
            cb_store['"draw_ctx_buffer_convert_cb_t".c_func'] = c_func
            self._obj.buffer_convert = c_func
        else:
            cb_store['"draw_ctx_buffer_convert_cb_t"'] = value

    @property
    def buffer_clear(self) -> Optional["draw_ctx_buffer_clear_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_buffer_clear_cb_t"', None)

    @buffer_clear.setter
    def buffer_clear(self, value: "draw_ctx_buffer_clear_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_buffer_clear_cb_t"' not in cb_store:
            cb_store['"draw_ctx_buffer_clear_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_buffer_clear_cb_t')
            cb_store['"draw_ctx_buffer_clear_cb_t".c_func'] = c_func
            self._obj.buffer_clear = c_func
        else:
            cb_store['"draw_ctx_buffer_clear_cb_t"'] = value

    @property
    def layer_init(self) -> Optional["draw_ctx_layer_init_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_layer_init_cb_t"', None)

    @layer_init.setter
    def layer_init(self, value: "draw_ctx_layer_init_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_layer_init_cb_t"' not in cb_store:
            cb_store['"draw_ctx_layer_init_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_layer_init_cb_t')
            cb_store['"draw_ctx_layer_init_cb_t".c_func'] = c_func
            self._obj.layer_init = c_func
        else:
            cb_store['"draw_ctx_layer_init_cb_t"'] = value

    @property
    def layer_adjust(self) -> Optional["draw_ctx_layer_adjust_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_layer_adjust_cb_t"', None)

    @layer_adjust.setter
    def layer_adjust(self, value: "draw_ctx_layer_adjust_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_layer_adjust_cb_t"' not in cb_store:
            cb_store['"draw_ctx_layer_adjust_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_layer_adjust_cb_t')
            cb_store['"draw_ctx_layer_adjust_cb_t".c_func'] = c_func
            self._obj.layer_adjust = c_func
        else:
            cb_store['"draw_ctx_layer_adjust_cb_t"'] = value

    @property
    def layer_blend(self) -> Optional["draw_ctx_layer_blend_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_layer_blend_cb_t"', None)

    @layer_blend.setter
    def layer_blend(self, value: "draw_ctx_layer_blend_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_layer_blend_cb_t"' not in cb_store:
            cb_store['"draw_ctx_layer_blend_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_layer_blend_cb_t')
            cb_store['"draw_ctx_layer_blend_cb_t".c_func'] = c_func
            self._obj.layer_blend = c_func
        else:
            cb_store['"draw_ctx_layer_blend_cb_t"'] = value

    @property
    def layer_destroy(self) -> Optional["draw_ctx_layer_destroy_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"draw_ctx_layer_destroy_cb_t"', None)

    @layer_destroy.setter
    def layer_destroy(self, value: "draw_ctx_layer_destroy_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"draw_ctx_layer_destroy_cb_t"' not in cb_store:
            cb_store['"draw_ctx_layer_destroy_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_draw_ctx_layer_destroy_cb_t')
            cb_store['"draw_ctx_layer_destroy_cb_t".c_func'] = c_func
            self._obj.layer_destroy = c_func
        else:
            cb_store['"draw_ctx_layer_destroy_cb_t"'] = value

    @property
    def layer_instance_size(self) -> "size_t":
        return self._get_field(
            'layer_instance_size', 
            'size_t'
        )

    @layer_instance_size.setter
    def layer_instance_size(self, value: "size_t"):
        self._set_field(
            'layer_instance_size', 
            value, 
            'size_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value


class obj_draw_part_dsc_t(_StructUnion): 
    _c_type = 'lv_obj_draw_part_dsc_t *'

    def __init__(
        self, 
        /, 
        draw_ctx: Optional["draw_ctx_t"] = _DefaultArg, 
        class_p: Optional["_obj_class_t"] = _DefaultArg, 
        type: Optional["uint32_t"] = 0, 
        draw_area: Optional["area_t"] = _DefaultArg, 
        rect_dsc: Optional["draw_rect_dsc_t"] = _DefaultArg, 
        label_dsc: Optional["draw_label_dsc_t"] = _DefaultArg, 
        line_dsc: Optional["draw_line_dsc_t"] = _DefaultArg, 
        img_dsc: Optional["draw_img_dsc_t"] = _DefaultArg, 
        arc_dsc: Optional["draw_arc_dsc_t"] = _DefaultArg, 
        p1: Optional["point_t"] = _DefaultArg, 
        p2: Optional["point_t"] = _DefaultArg, 
        text: Optional["char"] = _DefaultArg, 
        text_length: Optional["uint32_t"] = 0, 
        part: Optional["uint32_t"] = 0, 
        id: Optional["uint32_t"] = 0, 
        radius: Optional["coord_t"] = _DefaultArg, 
        value: Optional["int32_t"] = 0, 
        sub_part_ptr: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            draw_ctx=draw_ctx, 
            class_p=class_p, 
            type=type, 
            draw_area=draw_area, 
            rect_dsc=rect_dsc, 
            label_dsc=label_dsc, 
            line_dsc=line_dsc, 
            img_dsc=img_dsc, 
            arc_dsc=arc_dsc, 
            p1=p1, 
            p2=p2, 
            text=text, 
            text_length=text_length, 
            part=part, 
            id=id, 
            radius=radius, 
            value=value, 
            sub_part_ptr=sub_part_ptr
        )

    @property
    def draw_ctx(self) -> "draw_ctx_t":
        return self._get_field(
            'draw_ctx', 
            'draw_ctx_t'
        )

    @draw_ctx.setter
    def draw_ctx(self, value: "draw_ctx_t"):
        self._set_field(
            'draw_ctx', 
            value, 
            'draw_ctx_t'
        )

    @property
    def class_p(self) -> "_obj_class_t":
        return self._get_field(
            'class_p', 
            '_obj_class_t'
        )

    @class_p.setter
    def class_p(self, value: "_obj_class_t"):
        self._set_field(
            'class_p', 
            value, 
            '_obj_class_t'
        )

    @property
    def type(self) -> "uint32_t":
        return self._get_field(
            'type', 
            'uint32_t'
        )

    @type.setter
    def type(self, value: "uint32_t"):
        self._set_field(
            'type', 
            value, 
            'uint32_t'
        )

    @property
    def draw_area(self) -> "area_t":
        return self._get_field(
            'draw_area', 
            'area_t'
        )

    @draw_area.setter
    def draw_area(self, value: "area_t"):
        self._set_field(
            'draw_area', 
            value, 
            'area_t'
        )

    @property
    def rect_dsc(self) -> "draw_rect_dsc_t":
        return self._get_field(
            'rect_dsc', 
            'draw_rect_dsc_t'
        )

    @rect_dsc.setter
    def rect_dsc(self, value: "draw_rect_dsc_t"):
        self._set_field(
            'rect_dsc', 
            value, 
            'draw_rect_dsc_t'
        )

    @property
    def label_dsc(self) -> "draw_label_dsc_t":
        return self._get_field(
            'label_dsc', 
            'draw_label_dsc_t'
        )

    @label_dsc.setter
    def label_dsc(self, value: "draw_label_dsc_t"):
        self._set_field(
            'label_dsc', 
            value, 
            'draw_label_dsc_t'
        )

    @property
    def line_dsc(self) -> "draw_line_dsc_t":
        return self._get_field(
            'line_dsc', 
            'draw_line_dsc_t'
        )

    @line_dsc.setter
    def line_dsc(self, value: "draw_line_dsc_t"):
        self._set_field(
            'line_dsc', 
            value, 
            'draw_line_dsc_t'
        )

    @property
    def img_dsc(self) -> "draw_img_dsc_t":
        return self._get_field(
            'img_dsc', 
            'draw_img_dsc_t'
        )

    @img_dsc.setter
    def img_dsc(self, value: "draw_img_dsc_t"):
        self._set_field(
            'img_dsc', 
            value, 
            'draw_img_dsc_t'
        )

    @property
    def arc_dsc(self) -> "draw_arc_dsc_t":
        return self._get_field(
            'arc_dsc', 
            'draw_arc_dsc_t'
        )

    @arc_dsc.setter
    def arc_dsc(self, value: "draw_arc_dsc_t"):
        self._set_field(
            'arc_dsc', 
            value, 
            'draw_arc_dsc_t'
        )

    @property
    def p1(self) -> "point_t":
        return self._get_field(
            'p1', 
            'point_t'
        )

    @p1.setter
    def p1(self, value: "point_t"):
        self._set_field(
            'p1', 
            value, 
            'point_t'
        )

    @property
    def p2(self) -> "point_t":
        return self._get_field(
            'p2', 
            'point_t'
        )

    @p2.setter
    def p2(self, value: "point_t"):
        self._set_field(
            'p2', 
            value, 
            'point_t'
        )

    @property
    def text(self) -> "char":
        return self._get_field(
            'text', 
            'char'
        )

    @text.setter
    def text(self, value: "char"):
        self._set_field(
            'text', 
            value, 
            'char'
        )

    @property
    def text_length(self) -> "uint32_t":
        return self._get_field(
            'text_length', 
            'uint32_t'
        )

    @text_length.setter
    def text_length(self, value: "uint32_t"):
        self._set_field(
            'text_length', 
            value, 
            'uint32_t'
        )

    @property
    def part(self) -> "uint32_t":
        return self._get_field(
            'part', 
            'uint32_t'
        )

    @part.setter
    def part(self, value: "uint32_t"):
        self._set_field(
            'part', 
            value, 
            'uint32_t'
        )

    @property
    def id(self) -> "uint32_t":
        return self._get_field(
            'id', 
            'uint32_t'
        )

    @id.setter
    def id(self, value: "uint32_t"):
        self._set_field(
            'id', 
            value, 
            'uint32_t'
        )

    @property
    def radius(self) -> "coord_t":
        return self._get_field(
            'radius', 
            'coord_t'
        )

    @radius.setter
    def radius(self, value: "coord_t"):
        self._set_field(
            'radius', 
            value, 
            'coord_t'
        )

    @property
    def value(self) -> "int32_t":
        return self._get_field(
            'value', 
            'int32_t'
        )

    @value.setter
    def value(self, value: "int32_t"):
        self._set_field(
            'value', 
            value, 
            'int32_t'
        )

    @property
    def sub_part_ptr(self) -> Any:
        return self._get_field(
            'sub_part_ptr', 
            'void'
        )

    @sub_part_ptr.setter
    def sub_part_ptr(self, value: Any):
        self._set_field(
            'sub_part_ptr', 
            value, 
            'void'
        )


class _obj_class_t(_StructUnion): 
    _c_type = 'lv_obj_class_t *'

    def __init__(
        self, 
        /, 
        base_class: Optional["_obj_class_t"] = _DefaultArg, 
        constructor_cb: Optional["obj_class_constructor_cb_t"] = _DefaultArg, 
        destructor_cb: Optional["obj_class_destructor_cb_t"] = _DefaultArg, 
        event_cb: Optional["obj_class_event_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        width_def: Optional["coord_t"] = _DefaultArg, 
        height_def: Optional["coord_t"] = _DefaultArg, 
        editable: Optional["uint32_t"] = 0, 
        group_def: Optional["uint32_t"] = 0, 
        instance_size: Optional["uint32_t"] = 0, 
        theme_inheritable: Optional["uint32_t"] = 0
    ):

        super().__init__(
            base_class=base_class, 
            constructor_cb=constructor_cb, 
            destructor_cb=destructor_cb, 
            event_cb=event_cb, 
            user_data=user_data, 
            width_def=width_def, 
            height_def=height_def, 
            editable=editable, 
            group_def=group_def, 
            instance_size=instance_size, 
            theme_inheritable=theme_inheritable
        )

    @property
    def base_class(self) -> "_obj_class_t":
        return self._get_field(
            'base_class', 
            '_obj_class_t'
        )

    @base_class.setter
    def base_class(self, value: "_obj_class_t"):
        self._set_field(
            'base_class', 
            value, 
            '_obj_class_t'
        )

    @property
    def constructor_cb(self) -> Optional["obj_class_constructor_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"obj_class_constructor_cb_t"', None)

    @constructor_cb.setter
    def constructor_cb(self, value: "obj_class_constructor_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"obj_class_constructor_cb_t"' not in cb_store:
            cb_store['"obj_class_constructor_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_obj_class_constructor_cb_t')
            cb_store['"obj_class_constructor_cb_t".c_func'] = c_func
            self._obj.constructor_cb = c_func
        else:
            cb_store['"obj_class_constructor_cb_t"'] = value

    @property
    def destructor_cb(self) -> Optional["obj_class_destructor_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"obj_class_destructor_cb_t"', None)

    @destructor_cb.setter
    def destructor_cb(self, value: "obj_class_destructor_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"obj_class_destructor_cb_t"' not in cb_store:
            cb_store['"obj_class_destructor_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_obj_class_destructor_cb_t')
            cb_store['"obj_class_destructor_cb_t".c_func'] = c_func
            self._obj.destructor_cb = c_func
        else:
            cb_store['"obj_class_destructor_cb_t"'] = value

    @property
    def event_cb(self) -> Optional["obj_class_event_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"obj_class_event_cb_t"', None)

    @event_cb.setter
    def event_cb(self, value: "obj_class_event_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"obj_class_event_cb_t"' not in cb_store:
            cb_store['"obj_class_event_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_obj_class_event_cb_t')
            cb_store['"obj_class_event_cb_t".c_func'] = c_func
            self._obj.event_cb = c_func
        else:
            cb_store['"obj_class_event_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def width_def(self) -> "coord_t":
        return self._get_field(
            'width_def', 
            'coord_t'
        )

    @width_def.setter
    def width_def(self, value: "coord_t"):
        self._set_field(
            'width_def', 
            value, 
            'coord_t'
        )

    @property
    def height_def(self) -> "coord_t":
        return self._get_field(
            'height_def', 
            'coord_t'
        )

    @height_def.setter
    def height_def(self, value: "coord_t"):
        self._set_field(
            'height_def', 
            value, 
            'coord_t'
        )

    @property
    def editable(self) -> "uint32_t":
        return self._get_field(
            'editable', 
            'uint32_t'
        )

    @editable.setter
    def editable(self, value: "uint32_t"):
        self._set_field(
            'editable', 
            value, 
            'uint32_t'
        )

    @property
    def group_def(self) -> "uint32_t":
        return self._get_field(
            'group_def', 
            'uint32_t'
        )

    @group_def.setter
    def group_def(self, value: "uint32_t"):
        self._set_field(
            'group_def', 
            value, 
            'uint32_t'
        )

    @property
    def instance_size(self) -> "uint32_t":
        return self._get_field(
            'instance_size', 
            'uint32_t'
        )

    @instance_size.setter
    def instance_size(self, value: "uint32_t"):
        self._set_field(
            'instance_size', 
            value, 
            'uint32_t'
        )

    @property
    def theme_inheritable(self) -> "uint32_t":
        return self._get_field(
            'theme_inheritable', 
            'uint32_t'
        )

    @theme_inheritable.setter
    def theme_inheritable(self, value: "uint32_t"):
        self._set_field(
            'theme_inheritable', 
            value, 
            'uint32_t'
        )


class ll_t(_StructUnion): 
    _c_type = 'lv_ll_t *'

    def __init__(
        self, 
        /, 
        n_size: Optional["uint32_t"] = 0, 
        head: Optional["ll_node_t"] = _DefaultArg, 
        tail: Optional["ll_node_t"] = _DefaultArg
    ):

        super().__init__(
            n_size=n_size, 
            head=head, 
            tail=tail
        )

    @property
    def n_size(self) -> "uint32_t":
        return self._get_field(
            'n_size', 
            'uint32_t'
        )

    @n_size.setter
    def n_size(self, value: "uint32_t"):
        self._set_field(
            'n_size', 
            value, 
            'uint32_t'
        )

    @property
    def head(self) -> "ll_node_t":
        return self._get_field(
            'head', 
            'll_node_t'
        )

    @head.setter
    def head(self, value: "ll_node_t"):
        self._set_field(
            'head', 
            value, 
            'll_node_t'
        )

    @property
    def tail(self) -> "ll_node_t":
        return self._get_field(
            'tail', 
            'll_node_t'
        )

    @tail.setter
    def tail(self, value: "ll_node_t"):
        self._set_field(
            'tail', 
            value, 
            'll_node_t'
        )


class _group_t(_StructUnion): 
    _c_type = 'lv_group_t *'

    def __init__(
        self, 
        /, 
        obj_ll: Optional["ll_t"] = _DefaultArg, 
        obj_focus: Optional["_obj_t"] = _DefaultArg, 
        focus_cb: Optional["group_focus_cb_t"] = _DefaultArg, 
        edge_cb: Optional["group_edge_cb_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        frozen: Optional["uint8_t"] = 0, 
        editing: Optional["uint8_t"] = 0, 
        refocus_policy: Optional["uint8_t"] = 0, 
        wrap: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj_ll=obj_ll, 
            obj_focus=obj_focus, 
            focus_cb=focus_cb, 
            edge_cb=edge_cb, 
            user_data=user_data, 
            frozen=frozen, 
            editing=editing, 
            refocus_policy=refocus_policy, 
            wrap=wrap
        )

    @property
    def obj_ll(self) -> "ll_t":
        return self._get_field(
            'obj_ll', 
            'll_t'
        )

    @obj_ll.setter
    def obj_ll(self, value: "ll_t"):
        self._set_field(
            'obj_ll', 
            value, 
            'll_t'
        )

    @property
    def obj_focus(self) -> "_obj_t":
        return self._get_field(
            'obj_focus', 
            '_obj_t'
        )

    @obj_focus.setter
    def obj_focus(self, value: "_obj_t"):
        self._set_field(
            'obj_focus', 
            value, 
            '_obj_t'
        )

    @property
    def focus_cb(self) -> Optional["group_focus_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"group_focus_cb_t"', None)

    @focus_cb.setter
    def focus_cb(self, value: "group_focus_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"group_focus_cb_t"' not in cb_store:
            cb_store['"group_focus_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_group_focus_cb_t')
            cb_store['"group_focus_cb_t".c_func'] = c_func
            self._obj.focus_cb = c_func
        else:
            cb_store['"group_focus_cb_t"'] = value

    @property
    def edge_cb(self) -> Optional["group_edge_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"group_edge_cb_t"', None)

    @edge_cb.setter
    def edge_cb(self, value: "group_edge_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"group_edge_cb_t"' not in cb_store:
            cb_store['"group_edge_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_group_edge_cb_t')
            cb_store['"group_edge_cb_t".c_func'] = c_func
            self._obj.edge_cb = c_func
        else:
            cb_store['"group_edge_cb_t"'] = value

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def frozen(self) -> "uint8_t":
        return self._get_field(
            'frozen', 
            'uint8_t'
        )

    @frozen.setter
    def frozen(self, value: "uint8_t"):
        self._set_field(
            'frozen', 
            value, 
            'uint8_t'
        )

    @property
    def editing(self) -> "uint8_t":
        return self._get_field(
            'editing', 
            'uint8_t'
        )

    @editing.setter
    def editing(self, value: "uint8_t"):
        self._set_field(
            'editing', 
            value, 
            'uint8_t'
        )

    @property
    def refocus_policy(self) -> "uint8_t":
        return self._get_field(
            'refocus_policy', 
            'uint8_t'
        )

    @refocus_policy.setter
    def refocus_policy(self, value: "uint8_t"):
        self._set_field(
            'refocus_policy', 
            value, 
            'uint8_t'
        )

    @property
    def wrap(self) -> "uint8_t":
        return self._get_field(
            'wrap', 
            'uint8_t'
        )

    @wrap.setter
    def wrap(self, value: "uint8_t"):
        self._set_field(
            'wrap', 
            value, 
            'uint8_t'
        )


class indev_data_t(_StructUnion): 
    _c_type = 'lv_indev_data_t *'

    def __init__(
        self, 
        /, 
        point: Optional["point_t"] = _DefaultArg, 
        key: Optional["uint32_t"] = 0, 
        btn_id: Optional["uint32_t"] = 0, 
        enc_diff: Optional["int16_t"] = 0, 
        state: Optional["indev_state_t"] = _DefaultArg, 
        continue_reading: Optional["bool"] = _DefaultArg
    ):

        super().__init__(
            point=point, 
            key=key, 
            btn_id=btn_id, 
            enc_diff=enc_diff, 
            state=state, 
            continue_reading=continue_reading
        )

    @property
    def point(self) -> "point_t":
        return self._get_field(
            'point', 
            'point_t'
        )

    @point.setter
    def point(self, value: "point_t"):
        self._set_field(
            'point', 
            value, 
            'point_t'
        )

    @property
    def key(self) -> "uint32_t":
        return self._get_field(
            'key', 
            'uint32_t'
        )

    @key.setter
    def key(self, value: "uint32_t"):
        self._set_field(
            'key', 
            value, 
            'uint32_t'
        )

    @property
    def btn_id(self) -> "uint32_t":
        return self._get_field(
            'btn_id', 
            'uint32_t'
        )

    @btn_id.setter
    def btn_id(self, value: "uint32_t"):
        self._set_field(
            'btn_id', 
            value, 
            'uint32_t'
        )

    @property
    def enc_diff(self) -> "int16_t":
        return self._get_field(
            'enc_diff', 
            'int16_t'
        )

    @enc_diff.setter
    def enc_diff(self, value: "int16_t"):
        self._set_field(
            'enc_diff', 
            value, 
            'int16_t'
        )

    @property
    def state(self) -> "indev_state_t":
        return self._get_field(
            'state', 
            'indev_state_t'
        )

    @state.setter
    def state(self, value: "indev_state_t"):
        self._set_field(
            'state', 
            value, 
            'indev_state_t'
        )

    @property
    def continue_reading(self) -> "bool":
        return self._get_field(
            'continue_reading', 
            'bool'
        )

    @continue_reading.setter
    def continue_reading(self, value: "bool"):
        self._set_field(
            'continue_reading', 
            value, 
            'bool'
        )


class hit_test_info_t(_StructUnion): 
    _c_type = 'lv_hit_test_info_t *'

    def __init__(
        self, 
        /, 
        point: Optional["point_t"] = _DefaultArg, 
        res: Optional["bool"] = _DefaultArg
    ):

        super().__init__(
            point=point, 
            res=res
        )

    @property
    def point(self) -> "point_t":
        return self._get_field(
            'point', 
            'point_t'
        )

    @point.setter
    def point(self, value: "point_t"):
        self._set_field(
            'point', 
            value, 
            'point_t'
        )

    @property
    def res(self) -> "bool":
        return self._get_field(
            'res', 
            'bool'
        )

    @res.setter
    def res(self, value: "bool"):
        self._set_field(
            'res', 
            value, 
            'bool'
        )


class cover_check_info_t(_StructUnion): 
    _c_type = 'lv_cover_check_info_t *'

    def __init__(
        self, 
        /, 
        res: Optional["cover_res_t"] = _DefaultArg, 
        area: Optional["area_t"] = _DefaultArg
    ):

        super().__init__(
            res=res, 
            area=area
        )

    @property
    def res(self) -> "cover_res_t":
        return self._get_field(
            'res', 
            'cover_res_t'
        )

    @res.setter
    def res(self, value: "cover_res_t"):
        self._set_field(
            'res', 
            value, 
            'cover_res_t'
        )

    @property
    def area(self) -> "area_t":
        return self._get_field(
            'area', 
            'area_t'
        )

    @area.setter
    def area(self, value: "area_t"):
        self._set_field(
            'area', 
            value, 
            'area_t'
        )


class _obj_spec_attr_t(_StructUnion): 
    _c_type = 'lv_obj_spec_attr_t *'

    def __init__(
        self, 
        /, 
        children: Optional["_obj_t"] = _DefaultArg, 
        child_cnt: Optional["uint32_t"] = 0, 
        group_p: Optional["group_t"] = _DefaultArg, 
        event_list: Optional["event_list_t"] = _DefaultArg, 
        scroll: Optional["point_t"] = _DefaultArg, 
        ext_click_pad: Optional["coord_t"] = _DefaultArg, 
        ext_draw_size: Optional["coord_t"] = _DefaultArg, 
        scrollbar_mode: Optional["scrollbar_mode_t"] = _DefaultArg, 
        scroll_snap_x: Optional["scroll_snap_t"] = _DefaultArg, 
        scroll_snap_y: Optional["scroll_snap_t"] = _DefaultArg, 
        scroll_dir: Optional["dir_t"] = _DefaultArg, 
        layer_type: Optional["uint8_t"] = 0
    ):

        super().__init__(
            children=children, 
            child_cnt=child_cnt, 
            group_p=group_p, 
            event_list=event_list, 
            scroll=scroll, 
            ext_click_pad=ext_click_pad, 
            ext_draw_size=ext_draw_size, 
            scrollbar_mode=scrollbar_mode, 
            scroll_snap_x=scroll_snap_x, 
            scroll_snap_y=scroll_snap_y, 
            scroll_dir=scroll_dir, 
            layer_type=layer_type
        )

    @property
    def children(self) -> "_obj_t":
        return self._get_field(
            'children', 
            '_obj_t'
        )

    @children.setter
    def children(self, value: "_obj_t"):
        self._set_field(
            'children', 
            value, 
            '_obj_t'
        )

    @property
    def child_cnt(self) -> "uint32_t":
        return self._get_field(
            'child_cnt', 
            'uint32_t'
        )

    @child_cnt.setter
    def child_cnt(self, value: "uint32_t"):
        self._set_field(
            'child_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def group_p(self) -> "group_t":
        return self._get_field(
            'group_p', 
            'group_t'
        )

    @group_p.setter
    def group_p(self, value: "group_t"):
        self._set_field(
            'group_p', 
            value, 
            'group_t'
        )

    @property
    def event_list(self) -> "event_list_t":
        return self._get_field(
            'event_list', 
            'event_list_t'
        )

    @event_list.setter
    def event_list(self, value: "event_list_t"):
        self._set_field(
            'event_list', 
            value, 
            'event_list_t'
        )

    @property
    def scroll(self) -> "point_t":
        return self._get_field(
            'scroll', 
            'point_t'
        )

    @scroll.setter
    def scroll(self, value: "point_t"):
        self._set_field(
            'scroll', 
            value, 
            'point_t'
        )

    @property
    def ext_click_pad(self) -> "coord_t":
        return self._get_field(
            'ext_click_pad', 
            'coord_t'
        )

    @ext_click_pad.setter
    def ext_click_pad(self, value: "coord_t"):
        self._set_field(
            'ext_click_pad', 
            value, 
            'coord_t'
        )

    @property
    def ext_draw_size(self) -> "coord_t":
        return self._get_field(
            'ext_draw_size', 
            'coord_t'
        )

    @ext_draw_size.setter
    def ext_draw_size(self, value: "coord_t"):
        self._set_field(
            'ext_draw_size', 
            value, 
            'coord_t'
        )

    @property
    def scrollbar_mode(self) -> "scrollbar_mode_t":
        return self._get_field(
            'scrollbar_mode', 
            'scrollbar_mode_t'
        )

    @scrollbar_mode.setter
    def scrollbar_mode(self, value: "scrollbar_mode_t"):
        self._set_field(
            'scrollbar_mode', 
            value, 
            'scrollbar_mode_t'
        )

    @property
    def scroll_snap_x(self) -> "scroll_snap_t":
        return self._get_field(
            'scroll_snap_x', 
            'scroll_snap_t'
        )

    @scroll_snap_x.setter
    def scroll_snap_x(self, value: "scroll_snap_t"):
        self._set_field(
            'scroll_snap_x', 
            value, 
            'scroll_snap_t'
        )

    @property
    def scroll_snap_y(self) -> "scroll_snap_t":
        return self._get_field(
            'scroll_snap_y', 
            'scroll_snap_t'
        )

    @scroll_snap_y.setter
    def scroll_snap_y(self, value: "scroll_snap_t"):
        self._set_field(
            'scroll_snap_y', 
            value, 
            'scroll_snap_t'
        )

    @property
    def scroll_dir(self) -> "dir_t":
        return self._get_field(
            'scroll_dir', 
            'dir_t'
        )

    @scroll_dir.setter
    def scroll_dir(self, value: "dir_t"):
        self._set_field(
            'scroll_dir', 
            value, 
            'dir_t'
        )

    @property
    def layer_type(self) -> "uint8_t":
        return self._get_field(
            'layer_type', 
            'uint8_t'
        )

    @layer_type.setter
    def layer_type(self, value: "uint8_t"):
        self._set_field(
            'layer_type', 
            value, 
            'uint8_t'
        )


class _obj_t(_StructUnion): 
    _c_type = 'lv_obj_t *'

    def __init__(
        self, 
        /, 
        class_p: Optional["obj_class_t"] = _DefaultArg, 
        parent: Optional["_obj_t"] = _DefaultArg, 
        spec_attr: Optional["_obj_spec_attr_t"] = _DefaultArg, 
        styles: Optional["_obj_style_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        coords: Optional["area_t"] = _DefaultArg, 
        flags: Optional["obj_flag_t"] = _DefaultArg, 
        state: Optional["state_t"] = 0, 
        layout_inv: Optional["uint16_t"] = 0, 
        scr_layout_inv: Optional["uint16_t"] = 0, 
        skip_trans: Optional["uint16_t"] = 0, 
        style_cnt: Optional["uint16_t"] = 0, 
        h_layout: Optional["uint16_t"] = 0, 
        w_layout: Optional["uint16_t"] = 0
    ):

        super().__init__(
            class_p=class_p, 
            parent=parent, 
            spec_attr=spec_attr, 
            styles=styles, 
            user_data=user_data, 
            coords=coords, 
            flags=flags, 
            state=state, 
            layout_inv=layout_inv, 
            scr_layout_inv=scr_layout_inv, 
            skip_trans=skip_trans, 
            style_cnt=style_cnt, 
            h_layout=h_layout, 
            w_layout=w_layout
        )

    @property
    def class_p(self) -> "obj_class_t":
        return self._get_field(
            'class_p', 
            'obj_class_t'
        )

    @class_p.setter
    def class_p(self, value: "obj_class_t"):
        self._set_field(
            'class_p', 
            value, 
            'obj_class_t'
        )

    @property
    def parent(self) -> "_obj_t":
        return self._get_field(
            'parent', 
            '_obj_t'
        )

    @parent.setter
    def parent(self, value: "_obj_t"):
        self._set_field(
            'parent', 
            value, 
            '_obj_t'
        )

    @property
    def spec_attr(self) -> "_obj_spec_attr_t":
        return self._get_field(
            'spec_attr', 
            '_obj_spec_attr_t'
        )

    @spec_attr.setter
    def spec_attr(self, value: "_obj_spec_attr_t"):
        self._set_field(
            'spec_attr', 
            value, 
            '_obj_spec_attr_t'
        )

    @property
    def styles(self) -> "_obj_style_t":
        return self._get_field(
            'styles', 
            '_obj_style_t'
        )

    @styles.setter
    def styles(self, value: "_obj_style_t"):
        self._set_field(
            'styles', 
            value, 
            '_obj_style_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def coords(self) -> "area_t":
        return self._get_field(
            'coords', 
            'area_t'
        )

    @coords.setter
    def coords(self, value: "area_t"):
        self._set_field(
            'coords', 
            value, 
            'area_t'
        )

    @property
    def flags(self) -> "obj_flag_t":
        return self._get_field(
            'flags', 
            'obj_flag_t'
        )

    @flags.setter
    def flags(self, value: "obj_flag_t"):
        self._set_field(
            'flags', 
            value, 
            'obj_flag_t'
        )

    @property
    def state(self) -> "state_t":
        return self._get_field(
            'state', 
            'state_t'
        )

    @state.setter
    def state(self, value: "state_t"):
        self._set_field(
            'state', 
            value, 
            'state_t'
        )

    @property
    def layout_inv(self) -> "uint16_t":
        return self._get_field(
            'layout_inv', 
            'uint16_t'
        )

    @layout_inv.setter
    def layout_inv(self, value: "uint16_t"):
        self._set_field(
            'layout_inv', 
            value, 
            'uint16_t'
        )

    @property
    def scr_layout_inv(self) -> "uint16_t":
        return self._get_field(
            'scr_layout_inv', 
            'uint16_t'
        )

    @scr_layout_inv.setter
    def scr_layout_inv(self, value: "uint16_t"):
        self._set_field(
            'scr_layout_inv', 
            value, 
            'uint16_t'
        )

    @property
    def skip_trans(self) -> "uint16_t":
        return self._get_field(
            'skip_trans', 
            'uint16_t'
        )

    @skip_trans.setter
    def skip_trans(self, value: "uint16_t"):
        self._set_field(
            'skip_trans', 
            value, 
            'uint16_t'
        )

    @property
    def style_cnt(self) -> "uint16_t":
        return self._get_field(
            'style_cnt', 
            'uint16_t'
        )

    @style_cnt.setter
    def style_cnt(self, value: "uint16_t"):
        self._set_field(
            'style_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def h_layout(self) -> "uint16_t":
        return self._get_field(
            'h_layout', 
            'uint16_t'
        )

    @h_layout.setter
    def h_layout(self, value: "uint16_t"):
        self._set_field(
            'h_layout', 
            value, 
            'uint16_t'
        )

    @property
    def w_layout(self) -> "uint16_t":
        return self._get_field(
            'w_layout', 
            'uint16_t'
        )

    @w_layout.setter
    def w_layout(self, value: "uint16_t"):
        self._set_field(
            'w_layout', 
            value, 
            'uint16_t'
        )


class _theme_t(_StructUnion): 
    _c_type = 'lv_theme_t *'

    def __init__(
        self, 
        /, 
        apply_cb: Optional["theme_apply_cb_t"] = _DefaultArg, 
        parent: Optional["_theme_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        disp: Optional["_disp_t"] = _DefaultArg, 
        color_primary: Optional["color_t"] = _DefaultArg, 
        color_secondary: Optional["color_t"] = _DefaultArg, 
        font_small: Optional["font_t"] = _DefaultArg, 
        font_normal: Optional["font_t"] = _DefaultArg, 
        font_large: Optional["font_t"] = _DefaultArg, 
        flags: Optional["uint32_t"] = 0
    ):

        super().__init__(
            apply_cb=apply_cb, 
            parent=parent, 
            user_data=user_data, 
            disp=disp, 
            color_primary=color_primary, 
            color_secondary=color_secondary, 
            font_small=font_small, 
            font_normal=font_normal, 
            font_large=font_large, 
            flags=flags
        )

    @property
    def apply_cb(self) -> Optional["theme_apply_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"theme_apply_cb_t"', None)

    @apply_cb.setter
    def apply_cb(self, value: "theme_apply_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"theme_apply_cb_t"' not in cb_store:
            cb_store['"theme_apply_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_theme_apply_cb_t')
            cb_store['"theme_apply_cb_t".c_func'] = c_func
            self._obj.apply_cb = c_func
        else:
            cb_store['"theme_apply_cb_t"'] = value

    @property
    def parent(self) -> "_theme_t":
        return self._get_field(
            'parent', 
            '_theme_t'
        )

    @parent.setter
    def parent(self, value: "_theme_t"):
        self._set_field(
            'parent', 
            value, 
            '_theme_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def disp(self) -> "_disp_t":
        return self._get_field(
            'disp', 
            '_disp_t'
        )

    @disp.setter
    def disp(self, value: "_disp_t"):
        self._set_field(
            'disp', 
            value, 
            '_disp_t'
        )

    @property
    def color_primary(self) -> "color_t":
        return self._get_field(
            'color_primary', 
            'color_t'
        )

    @color_primary.setter
    def color_primary(self, value: "color_t"):
        self._set_field(
            'color_primary', 
            value, 
            'color_t'
        )

    @property
    def color_secondary(self) -> "color_t":
        return self._get_field(
            'color_secondary', 
            'color_t'
        )

    @color_secondary.setter
    def color_secondary(self, value: "color_t"):
        self._set_field(
            'color_secondary', 
            value, 
            'color_t'
        )

    @property
    def font_small(self) -> "font_t":
        return self._get_field(
            'font_small', 
            'font_t'
        )

    @font_small.setter
    def font_small(self, value: "font_t"):
        self._set_field(
            'font_small', 
            value, 
            'font_t'
        )

    @property
    def font_normal(self) -> "font_t":
        return self._get_field(
            'font_normal', 
            'font_t'
        )

    @font_normal.setter
    def font_normal(self, value: "font_t"):
        self._set_field(
            'font_normal', 
            value, 
            'font_t'
        )

    @property
    def font_large(self) -> "font_t":
        return self._get_field(
            'font_large', 
            'font_t'
        )

    @font_large.setter
    def font_large(self, value: "font_t"):
        self._set_field(
            'font_large', 
            value, 
            'font_t'
        )

    @property
    def flags(self) -> "uint32_t":
        return self._get_field(
            'flags', 
            'uint32_t'
        )

    @flags.setter
    def flags(self, value: "uint32_t"):
        self._set_field(
            'flags', 
            value, 
            'uint32_t'
        )


class font_fmt_txt_glyph_dsc_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_glyph_dsc_t *'

    def __init__(
        self, 
        /, 
        bitmap_index: Optional["uint32_t"] = 0, 
        adv_w: Optional["uint32_t"] = 0, 
        box_w: Optional["uint16_t"] = 0, 
        box_h: Optional["uint16_t"] = 0, 
        ofs_x: Optional["int16_t"] = 0, 
        ofs_y: Optional["int16_t"] = 0
    ):

        super().__init__(
            bitmap_index=bitmap_index, 
            adv_w=adv_w, 
            box_w=box_w, 
            box_h=box_h, 
            ofs_x=ofs_x, 
            ofs_y=ofs_y
        )

    @property
    def bitmap_index(self) -> "uint32_t":
        return self._get_field(
            'bitmap_index', 
            'uint32_t'
        )

    @bitmap_index.setter
    def bitmap_index(self, value: "uint32_t"):
        self._set_field(
            'bitmap_index', 
            value, 
            'uint32_t'
        )

    @property
    def adv_w(self) -> "uint32_t":
        return self._get_field(
            'adv_w', 
            'uint32_t'
        )

    @adv_w.setter
    def adv_w(self, value: "uint32_t"):
        self._set_field(
            'adv_w', 
            value, 
            'uint32_t'
        )

    @property
    def box_w(self) -> "uint16_t":
        return self._get_field(
            'box_w', 
            'uint16_t'
        )

    @box_w.setter
    def box_w(self, value: "uint16_t"):
        self._set_field(
            'box_w', 
            value, 
            'uint16_t'
        )

    @property
    def box_h(self) -> "uint16_t":
        return self._get_field(
            'box_h', 
            'uint16_t'
        )

    @box_h.setter
    def box_h(self, value: "uint16_t"):
        self._set_field(
            'box_h', 
            value, 
            'uint16_t'
        )

    @property
    def ofs_x(self) -> "int16_t":
        return self._get_field(
            'ofs_x', 
            'int16_t'
        )

    @ofs_x.setter
    def ofs_x(self, value: "int16_t"):
        self._set_field(
            'ofs_x', 
            value, 
            'int16_t'
        )

    @property
    def ofs_y(self) -> "int16_t":
        return self._get_field(
            'ofs_y', 
            'int16_t'
        )

    @ofs_y.setter
    def ofs_y(self, value: "int16_t"):
        self._set_field(
            'ofs_y', 
            value, 
            'int16_t'
        )


class font_fmt_txt_cmap_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_cmap_t *'

    def __init__(
        self, 
        /, 
        range_start: Optional["uint32_t"] = 0, 
        range_length: Optional["uint16_t"] = 0, 
        glyph_id_start: Optional["uint16_t"] = 0, 
        unicode_list: Optional["uint16_t"] = 0, 
        glyph_id_ofs_list: Optional[Any] = _DefaultArg, 
        list_length: Optional["uint16_t"] = 0, 
        type: Optional["font_fmt_txt_cmap_type_t"] = _DefaultArg
    ):

        super().__init__(
            range_start=range_start, 
            range_length=range_length, 
            glyph_id_start=glyph_id_start, 
            unicode_list=unicode_list, 
            glyph_id_ofs_list=glyph_id_ofs_list, 
            list_length=list_length, 
            type=type
        )

    @property
    def range_start(self) -> "uint32_t":
        return self._get_field(
            'range_start', 
            'uint32_t'
        )

    @range_start.setter
    def range_start(self, value: "uint32_t"):
        self._set_field(
            'range_start', 
            value, 
            'uint32_t'
        )

    @property
    def range_length(self) -> "uint16_t":
        return self._get_field(
            'range_length', 
            'uint16_t'
        )

    @range_length.setter
    def range_length(self, value: "uint16_t"):
        self._set_field(
            'range_length', 
            value, 
            'uint16_t'
        )

    @property
    def glyph_id_start(self) -> "uint16_t":
        return self._get_field(
            'glyph_id_start', 
            'uint16_t'
        )

    @glyph_id_start.setter
    def glyph_id_start(self, value: "uint16_t"):
        self._set_field(
            'glyph_id_start', 
            value, 
            'uint16_t'
        )

    @property
    def unicode_list(self) -> "uint16_t":
        return self._get_field(
            'unicode_list', 
            'uint16_t'
        )

    @unicode_list.setter
    def unicode_list(self, value: "uint16_t"):
        self._set_field(
            'unicode_list', 
            value, 
            'uint16_t'
        )

    @property
    def glyph_id_ofs_list(self) -> Any:
        return self._get_field(
            'glyph_id_ofs_list', 
            'void'
        )

    @glyph_id_ofs_list.setter
    def glyph_id_ofs_list(self, value: Any):
        self._set_field(
            'glyph_id_ofs_list', 
            value, 
            'void'
        )

    @property
    def list_length(self) -> "uint16_t":
        return self._get_field(
            'list_length', 
            'uint16_t'
        )

    @list_length.setter
    def list_length(self, value: "uint16_t"):
        self._set_field(
            'list_length', 
            value, 
            'uint16_t'
        )

    @property
    def type(self) -> "font_fmt_txt_cmap_type_t":
        return self._get_field(
            'type', 
            'font_fmt_txt_cmap_type_t'
        )

    @type.setter
    def type(self, value: "font_fmt_txt_cmap_type_t"):
        self._set_field(
            'type', 
            value, 
            'font_fmt_txt_cmap_type_t'
        )


class font_fmt_txt_kern_pair_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_kern_pair_t *'

    def __init__(
        self, 
        /, 
        glyph_ids: Optional[Any] = _DefaultArg, 
        values: Optional["int8_t"] = 0, 
        pair_cnt: Optional["uint32_t"] = 0, 
        glyph_ids_size: Optional["uint32_t"] = 0
    ):

        super().__init__(
            glyph_ids=glyph_ids, 
            values=values, 
            pair_cnt=pair_cnt, 
            glyph_ids_size=glyph_ids_size
        )

    @property
    def glyph_ids(self) -> Any:
        return self._get_field(
            'glyph_ids', 
            'void'
        )

    @glyph_ids.setter
    def glyph_ids(self, value: Any):
        self._set_field(
            'glyph_ids', 
            value, 
            'void'
        )

    @property
    def values(self) -> "int8_t":
        return self._get_field(
            'values', 
            'int8_t'
        )

    @values.setter
    def values(self, value: "int8_t"):
        self._set_field(
            'values', 
            value, 
            'int8_t'
        )

    @property
    def pair_cnt(self) -> "uint32_t":
        return self._get_field(
            'pair_cnt', 
            'uint32_t'
        )

    @pair_cnt.setter
    def pair_cnt(self, value: "uint32_t"):
        self._set_field(
            'pair_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def glyph_ids_size(self) -> "uint32_t":
        return self._get_field(
            'glyph_ids_size', 
            'uint32_t'
        )

    @glyph_ids_size.setter
    def glyph_ids_size(self, value: "uint32_t"):
        self._set_field(
            'glyph_ids_size', 
            value, 
            'uint32_t'
        )


class font_fmt_txt_kern_classes_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_kern_classes_t *'

    def __init__(
        self, 
        /, 
        class_pair_values: Optional["int8_t"] = 0, 
        left_class_mapping: Optional["uint8_t"] = 0, 
        right_class_mapping: Optional["uint8_t"] = 0, 
        left_class_cnt: Optional["uint8_t"] = 0, 
        right_class_cnt: Optional["uint8_t"] = 0
    ):

        super().__init__(
            class_pair_values=class_pair_values, 
            left_class_mapping=left_class_mapping, 
            right_class_mapping=right_class_mapping, 
            left_class_cnt=left_class_cnt, 
            right_class_cnt=right_class_cnt
        )

    @property
    def class_pair_values(self) -> "int8_t":
        return self._get_field(
            'class_pair_values', 
            'int8_t'
        )

    @class_pair_values.setter
    def class_pair_values(self, value: "int8_t"):
        self._set_field(
            'class_pair_values', 
            value, 
            'int8_t'
        )

    @property
    def left_class_mapping(self) -> "uint8_t":
        return self._get_field(
            'left_class_mapping', 
            'uint8_t'
        )

    @left_class_mapping.setter
    def left_class_mapping(self, value: "uint8_t"):
        self._set_field(
            'left_class_mapping', 
            value, 
            'uint8_t'
        )

    @property
    def right_class_mapping(self) -> "uint8_t":
        return self._get_field(
            'right_class_mapping', 
            'uint8_t'
        )

    @right_class_mapping.setter
    def right_class_mapping(self, value: "uint8_t"):
        self._set_field(
            'right_class_mapping', 
            value, 
            'uint8_t'
        )

    @property
    def left_class_cnt(self) -> "uint8_t":
        return self._get_field(
            'left_class_cnt', 
            'uint8_t'
        )

    @left_class_cnt.setter
    def left_class_cnt(self, value: "uint8_t"):
        self._set_field(
            'left_class_cnt', 
            value, 
            'uint8_t'
        )

    @property
    def right_class_cnt(self) -> "uint8_t":
        return self._get_field(
            'right_class_cnt', 
            'uint8_t'
        )

    @right_class_cnt.setter
    def right_class_cnt(self, value: "uint8_t"):
        self._set_field(
            'right_class_cnt', 
            value, 
            'uint8_t'
        )


class font_fmt_txt_glyph_cache_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_glyph_cache_t *'

    def __init__(
        self, 
        /, 
        last_letter: Optional["uint32_t"] = 0, 
        last_glyph_id: Optional["uint32_t"] = 0
    ):

        super().__init__(
            last_letter=last_letter, 
            last_glyph_id=last_glyph_id
        )

    @property
    def last_letter(self) -> "uint32_t":
        return self._get_field(
            'last_letter', 
            'uint32_t'
        )

    @last_letter.setter
    def last_letter(self, value: "uint32_t"):
        self._set_field(
            'last_letter', 
            value, 
            'uint32_t'
        )

    @property
    def last_glyph_id(self) -> "uint32_t":
        return self._get_field(
            'last_glyph_id', 
            'uint32_t'
        )

    @last_glyph_id.setter
    def last_glyph_id(self, value: "uint32_t"):
        self._set_field(
            'last_glyph_id', 
            value, 
            'uint32_t'
        )


class font_fmt_txt_dsc_t(_StructUnion): 
    _c_type = 'lv_font_fmt_txt_dsc_t *'

    def __init__(
        self, 
        /, 
        glyph_bitmap: Optional["uint8_t"] = 0, 
        glyph_dsc: Optional["font_fmt_txt_glyph_dsc_t"] = _DefaultArg, 
        cmaps: Optional["font_fmt_txt_cmap_t"] = _DefaultArg, 
        kern_dsc: Optional[Any] = _DefaultArg, 
        kern_scale: Optional["uint16_t"] = 0, 
        cmap_num: Optional["uint16_t"] = 0, 
        bpp: Optional["uint16_t"] = 0, 
        kern_classes: Optional["uint16_t"] = 0, 
        bitmap_format: Optional["uint16_t"] = 0, 
        cache: Optional["font_fmt_txt_glyph_cache_t"] = _DefaultArg
    ):

        super().__init__(
            glyph_bitmap=glyph_bitmap, 
            glyph_dsc=glyph_dsc, 
            cmaps=cmaps, 
            kern_dsc=kern_dsc, 
            kern_scale=kern_scale, 
            cmap_num=cmap_num, 
            bpp=bpp, 
            kern_classes=kern_classes, 
            bitmap_format=bitmap_format, 
            cache=cache
        )

    @property
    def glyph_bitmap(self) -> "uint8_t":
        return self._get_field(
            'glyph_bitmap', 
            'uint8_t'
        )

    @glyph_bitmap.setter
    def glyph_bitmap(self, value: "uint8_t"):
        self._set_field(
            'glyph_bitmap', 
            value, 
            'uint8_t'
        )

    @property
    def glyph_dsc(self) -> "font_fmt_txt_glyph_dsc_t":
        return self._get_field(
            'glyph_dsc', 
            'font_fmt_txt_glyph_dsc_t'
        )

    @glyph_dsc.setter
    def glyph_dsc(self, value: "font_fmt_txt_glyph_dsc_t"):
        self._set_field(
            'glyph_dsc', 
            value, 
            'font_fmt_txt_glyph_dsc_t'
        )

    @property
    def cmaps(self) -> "font_fmt_txt_cmap_t":
        return self._get_field(
            'cmaps', 
            'font_fmt_txt_cmap_t'
        )

    @cmaps.setter
    def cmaps(self, value: "font_fmt_txt_cmap_t"):
        self._set_field(
            'cmaps', 
            value, 
            'font_fmt_txt_cmap_t'
        )

    @property
    def kern_dsc(self) -> Any:
        return self._get_field(
            'kern_dsc', 
            'void'
        )

    @kern_dsc.setter
    def kern_dsc(self, value: Any):
        self._set_field(
            'kern_dsc', 
            value, 
            'void'
        )

    @property
    def kern_scale(self) -> "uint16_t":
        return self._get_field(
            'kern_scale', 
            'uint16_t'
        )

    @kern_scale.setter
    def kern_scale(self, value: "uint16_t"):
        self._set_field(
            'kern_scale', 
            value, 
            'uint16_t'
        )

    @property
    def cmap_num(self) -> "uint16_t":
        return self._get_field(
            'cmap_num', 
            'uint16_t'
        )

    @cmap_num.setter
    def cmap_num(self, value: "uint16_t"):
        self._set_field(
            'cmap_num', 
            value, 
            'uint16_t'
        )

    @property
    def bpp(self) -> "uint16_t":
        return self._get_field(
            'bpp', 
            'uint16_t'
        )

    @bpp.setter
    def bpp(self, value: "uint16_t"):
        self._set_field(
            'bpp', 
            value, 
            'uint16_t'
        )

    @property
    def kern_classes(self) -> "uint16_t":
        return self._get_field(
            'kern_classes', 
            'uint16_t'
        )

    @kern_classes.setter
    def kern_classes(self, value: "uint16_t"):
        self._set_field(
            'kern_classes', 
            value, 
            'uint16_t'
        )

    @property
    def bitmap_format(self) -> "uint16_t":
        return self._get_field(
            'bitmap_format', 
            'uint16_t'
        )

    @bitmap_format.setter
    def bitmap_format(self, value: "uint16_t"):
        self._set_field(
            'bitmap_format', 
            value, 
            'uint16_t'
        )

    @property
    def cache(self) -> "font_fmt_txt_glyph_cache_t":
        return self._get_field(
            'cache', 
            'font_fmt_txt_glyph_cache_t'
        )

    @cache.setter
    def cache(self, value: "font_fmt_txt_glyph_cache_t"):
        self._set_field(
            'cache', 
            value, 
            'font_fmt_txt_glyph_cache_t'
        )


class img_t(_StructUnion): 
    _c_type = 'lv_img_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        src: Optional[Any] = _DefaultArg, 
        offset: Optional["point_t"] = _DefaultArg, 
        w: Optional["coord_t"] = _DefaultArg, 
        h: Optional["coord_t"] = _DefaultArg, 
        angle: Optional["uint16_t"] = 0, 
        pivot: Optional["point_t"] = _DefaultArg, 
        zoom: Optional["uint16_t"] = 0, 
        src_type: Optional["uint8_t"] = 0, 
        cf: Optional["uint8_t"] = 0, 
        antialias: Optional["uint8_t"] = 0, 
        obj_size_mode: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            src=src, 
            offset=offset, 
            w=w, 
            h=h, 
            angle=angle, 
            pivot=pivot, 
            zoom=zoom, 
            src_type=src_type, 
            cf=cf, 
            antialias=antialias, 
            obj_size_mode=obj_size_mode
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def src(self) -> Any:
        return self._get_field(
            'src', 
            'void'
        )

    @src.setter
    def src(self, value: Any):
        self._set_field(
            'src', 
            value, 
            'void'
        )

    @property
    def offset(self) -> "point_t":
        return self._get_field(
            'offset', 
            'point_t'
        )

    @offset.setter
    def offset(self, value: "point_t"):
        self._set_field(
            'offset', 
            value, 
            'point_t'
        )

    @property
    def w(self) -> "coord_t":
        return self._get_field(
            'w', 
            'coord_t'
        )

    @w.setter
    def w(self, value: "coord_t"):
        self._set_field(
            'w', 
            value, 
            'coord_t'
        )

    @property
    def h(self) -> "coord_t":
        return self._get_field(
            'h', 
            'coord_t'
        )

    @h.setter
    def h(self, value: "coord_t"):
        self._set_field(
            'h', 
            value, 
            'coord_t'
        )

    @property
    def angle(self) -> "uint16_t":
        return self._get_field(
            'angle', 
            'uint16_t'
        )

    @angle.setter
    def angle(self, value: "uint16_t"):
        self._set_field(
            'angle', 
            value, 
            'uint16_t'
        )

    @property
    def pivot(self) -> "point_t":
        return self._get_field(
            'pivot', 
            'point_t'
        )

    @pivot.setter
    def pivot(self, value: "point_t"):
        self._set_field(
            'pivot', 
            value, 
            'point_t'
        )

    @property
    def zoom(self) -> "uint16_t":
        return self._get_field(
            'zoom', 
            'uint16_t'
        )

    @zoom.setter
    def zoom(self, value: "uint16_t"):
        self._set_field(
            'zoom', 
            value, 
            'uint16_t'
        )

    @property
    def src_type(self) -> "uint8_t":
        return self._get_field(
            'src_type', 
            'uint8_t'
        )

    @src_type.setter
    def src_type(self, value: "uint8_t"):
        self._set_field(
            'src_type', 
            value, 
            'uint8_t'
        )

    @property
    def cf(self) -> "uint8_t":
        return self._get_field(
            'cf', 
            'uint8_t'
        )

    @cf.setter
    def cf(self, value: "uint8_t"):
        self._set_field(
            'cf', 
            value, 
            'uint8_t'
        )

    @property
    def antialias(self) -> "uint8_t":
        return self._get_field(
            'antialias', 
            'uint8_t'
        )

    @antialias.setter
    def antialias(self, value: "uint8_t"):
        self._set_field(
            'antialias', 
            value, 
            'uint8_t'
        )

    @property
    def obj_size_mode(self) -> "uint8_t":
        return self._get_field(
            'obj_size_mode', 
            'uint8_t'
        )

    @obj_size_mode.setter
    def obj_size_mode(self, value: "uint8_t"):
        self._set_field(
            'obj_size_mode', 
            value, 
            'uint8_t'
        )


class animimg_t(_StructUnion): 
    _c_type = 'lv_animimg_t *'

    def __init__(
        self, 
        /, 
        img: Optional["img_t"] = _DefaultArg, 
        anim: Optional["anim_t"] = _DefaultArg, 
        dsc: Optional[Any] = _DefaultArg, 
        pic_count: Optional["int8_t"] = 0
    ):

        super().__init__(
            img=img, 
            anim=anim, 
            dsc=dsc, 
            pic_count=pic_count
        )

    @property
    def img(self) -> "img_t":
        return self._get_field(
            'img', 
            'img_t'
        )

    @img.setter
    def img(self, value: "img_t"):
        self._set_field(
            'img', 
            value, 
            'img_t'
        )

    @property
    def anim(self) -> "anim_t":
        return self._get_field(
            'anim', 
            'anim_t'
        )

    @anim.setter
    def anim(self, value: "anim_t"):
        self._set_field(
            'anim', 
            value, 
            'anim_t'
        )

    @property
    def dsc(self) -> Any:
        return self._get_field(
            'dsc', 
            'void'
        )

    @dsc.setter
    def dsc(self, value: Any):
        self._set_field(
            'dsc', 
            value, 
            'void'
        )

    @property
    def pic_count(self) -> "int8_t":
        return self._get_field(
            'pic_count', 
            'int8_t'
        )

    @pic_count.setter
    def pic_count(self, value: "int8_t"):
        self._set_field(
            'pic_count', 
            value, 
            'int8_t'
        )


class arc_t(_StructUnion): 
    _c_type = 'lv_arc_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        rotation: Optional["uint16_t"] = 0, 
        indic_angle_start: Optional["uint16_t"] = 0, 
        indic_angle_end: Optional["uint16_t"] = 0, 
        bg_angle_start: Optional["uint16_t"] = 0, 
        bg_angle_end: Optional["uint16_t"] = 0, 
        value: Optional["int16_t"] = 0, 
        min_value: Optional["int16_t"] = 0, 
        max_value: Optional["int16_t"] = 0, 
        dragging: Optional["uint16_t"] = 0, 
        type: Optional["uint16_t"] = 0, 
        min_close: Optional["uint16_t"] = 0, 
        chg_rate: Optional["uint16_t"] = 0, 
        last_tick: Optional["uint32_t"] = 0, 
        last_angle: Optional["int16_t"] = 0, 
        knob_offset: Optional["int16_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            rotation=rotation, 
            indic_angle_start=indic_angle_start, 
            indic_angle_end=indic_angle_end, 
            bg_angle_start=bg_angle_start, 
            bg_angle_end=bg_angle_end, 
            value=value, 
            min_value=min_value, 
            max_value=max_value, 
            dragging=dragging, 
            type=type, 
            min_close=min_close, 
            chg_rate=chg_rate, 
            last_tick=last_tick, 
            last_angle=last_angle, 
            knob_offset=knob_offset
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def rotation(self) -> "uint16_t":
        return self._get_field(
            'rotation', 
            'uint16_t'
        )

    @rotation.setter
    def rotation(self, value: "uint16_t"):
        self._set_field(
            'rotation', 
            value, 
            'uint16_t'
        )

    @property
    def indic_angle_start(self) -> "uint16_t":
        return self._get_field(
            'indic_angle_start', 
            'uint16_t'
        )

    @indic_angle_start.setter
    def indic_angle_start(self, value: "uint16_t"):
        self._set_field(
            'indic_angle_start', 
            value, 
            'uint16_t'
        )

    @property
    def indic_angle_end(self) -> "uint16_t":
        return self._get_field(
            'indic_angle_end', 
            'uint16_t'
        )

    @indic_angle_end.setter
    def indic_angle_end(self, value: "uint16_t"):
        self._set_field(
            'indic_angle_end', 
            value, 
            'uint16_t'
        )

    @property
    def bg_angle_start(self) -> "uint16_t":
        return self._get_field(
            'bg_angle_start', 
            'uint16_t'
        )

    @bg_angle_start.setter
    def bg_angle_start(self, value: "uint16_t"):
        self._set_field(
            'bg_angle_start', 
            value, 
            'uint16_t'
        )

    @property
    def bg_angle_end(self) -> "uint16_t":
        return self._get_field(
            'bg_angle_end', 
            'uint16_t'
        )

    @bg_angle_end.setter
    def bg_angle_end(self, value: "uint16_t"):
        self._set_field(
            'bg_angle_end', 
            value, 
            'uint16_t'
        )

    @property
    def value(self) -> "int16_t":
        return self._get_field(
            'value', 
            'int16_t'
        )

    @value.setter
    def value(self, value: "int16_t"):
        self._set_field(
            'value', 
            value, 
            'int16_t'
        )

    @property
    def min_value(self) -> "int16_t":
        return self._get_field(
            'min_value', 
            'int16_t'
        )

    @min_value.setter
    def min_value(self, value: "int16_t"):
        self._set_field(
            'min_value', 
            value, 
            'int16_t'
        )

    @property
    def max_value(self) -> "int16_t":
        return self._get_field(
            'max_value', 
            'int16_t'
        )

    @max_value.setter
    def max_value(self, value: "int16_t"):
        self._set_field(
            'max_value', 
            value, 
            'int16_t'
        )

    @property
    def dragging(self) -> "uint16_t":
        return self._get_field(
            'dragging', 
            'uint16_t'
        )

    @dragging.setter
    def dragging(self, value: "uint16_t"):
        self._set_field(
            'dragging', 
            value, 
            'uint16_t'
        )

    @property
    def type(self) -> "uint16_t":
        return self._get_field(
            'type', 
            'uint16_t'
        )

    @type.setter
    def type(self, value: "uint16_t"):
        self._set_field(
            'type', 
            value, 
            'uint16_t'
        )

    @property
    def min_close(self) -> "uint16_t":
        return self._get_field(
            'min_close', 
            'uint16_t'
        )

    @min_close.setter
    def min_close(self, value: "uint16_t"):
        self._set_field(
            'min_close', 
            value, 
            'uint16_t'
        )

    @property
    def chg_rate(self) -> "uint16_t":
        return self._get_field(
            'chg_rate', 
            'uint16_t'
        )

    @chg_rate.setter
    def chg_rate(self, value: "uint16_t"):
        self._set_field(
            'chg_rate', 
            value, 
            'uint16_t'
        )

    @property
    def last_tick(self) -> "uint32_t":
        return self._get_field(
            'last_tick', 
            'uint32_t'
        )

    @last_tick.setter
    def last_tick(self, value: "uint32_t"):
        self._set_field(
            'last_tick', 
            value, 
            'uint32_t'
        )

    @property
    def last_angle(self) -> "int16_t":
        return self._get_field(
            'last_angle', 
            'int16_t'
        )

    @last_angle.setter
    def last_angle(self, value: "int16_t"):
        self._set_field(
            'last_angle', 
            value, 
            'int16_t'
        )

    @property
    def knob_offset(self) -> "int16_t":
        return self._get_field(
            'knob_offset', 
            'int16_t'
        )

    @knob_offset.setter
    def knob_offset(self, value: "int16_t"):
        self._set_field(
            'knob_offset', 
            value, 
            'int16_t'
        )


class label_dot_t(_StructUnion): 
    _c_type = 'lv_label_dot_t *'

    def __init__(
        self, 
        /, 
        tmp_ptr: Optional["char"] = _DefaultArg, 
        tmp: Optional[List["char"]] = _DefaultArg
    ):

        super().__init__(
            tmp_ptr=tmp_ptr, 
            tmp=tmp
        )

    @property
    def tmp_ptr(self) -> "char":
        return self._get_field(
            'tmp_ptr', 
            'char'
        )

    @tmp_ptr.setter
    def tmp_ptr(self, value: "char"):
        self._set_field(
            'tmp_ptr', 
            value, 
            'char'
        )

    @property
    def tmp(self) -> List["char"]:
        return self._get_field(
            'tmp', 
            'List[char]'
        )

    @tmp.setter
    def tmp(self, value: List["char"]):
        self._set_field(
            'tmp', 
            value, 
            'List[char]'
        )


class label_t(_StructUnion): 
    _c_type = 'lv_label_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        text: Optional["char"] = _DefaultArg, 
        dot: Optional["label_dot_t"] = _DefaultArg, 
        dot_end: Optional["uint32_t"] = 0, 
        hint: Optional["draw_label_hint_t"] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = 0, 
        sel_end: Optional["uint32_t"] = 0, 
        size_cache: Optional["point_t"] = _DefaultArg, 
        offset: Optional["point_t"] = _DefaultArg, 
        long_mode: Optional["label_long_mode_t"] = _DefaultArg, 
        static_txt: Optional["uint8_t"] = 0, 
        recolor: Optional["uint8_t"] = 0, 
        expand: Optional["uint8_t"] = 0, 
        dot_tmp_alloc: Optional["uint8_t"] = 0, 
        invalid_size_cache: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            text=text, 
            dot=dot, 
            dot_end=dot_end, 
            hint=hint, 
            sel_start=sel_start, 
            sel_end=sel_end, 
            size_cache=size_cache, 
            offset=offset, 
            long_mode=long_mode, 
            static_txt=static_txt, 
            recolor=recolor, 
            expand=expand, 
            dot_tmp_alloc=dot_tmp_alloc, 
            invalid_size_cache=invalid_size_cache
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def text(self) -> "char":
        return self._get_field(
            'text', 
            'char'
        )

    @text.setter
    def text(self, value: "char"):
        self._set_field(
            'text', 
            value, 
            'char'
        )

    @property
    def dot(self) -> "label_dot_t":
        return self._get_field(
            'dot', 
            'label_dot_t'
        )

    @dot.setter
    def dot(self, value: "label_dot_t"):
        self._set_field(
            'dot', 
            value, 
            'label_dot_t'
        )

    @property
    def dot_end(self) -> "uint32_t":
        return self._get_field(
            'dot_end', 
            'uint32_t'
        )

    @dot_end.setter
    def dot_end(self, value: "uint32_t"):
        self._set_field(
            'dot_end', 
            value, 
            'uint32_t'
        )

    @property
    def hint(self) -> "draw_label_hint_t":
        return self._get_field(
            'hint', 
            'draw_label_hint_t'
        )

    @hint.setter
    def hint(self, value: "draw_label_hint_t"):
        self._set_field(
            'hint', 
            value, 
            'draw_label_hint_t'
        )

    @property
    def sel_start(self) -> "uint32_t":
        return self._get_field(
            'sel_start', 
            'uint32_t'
        )

    @sel_start.setter
    def sel_start(self, value: "uint32_t"):
        self._set_field(
            'sel_start', 
            value, 
            'uint32_t'
        )

    @property
    def sel_end(self) -> "uint32_t":
        return self._get_field(
            'sel_end', 
            'uint32_t'
        )

    @sel_end.setter
    def sel_end(self, value: "uint32_t"):
        self._set_field(
            'sel_end', 
            value, 
            'uint32_t'
        )

    @property
    def size_cache(self) -> "point_t":
        return self._get_field(
            'size_cache', 
            'point_t'
        )

    @size_cache.setter
    def size_cache(self, value: "point_t"):
        self._set_field(
            'size_cache', 
            value, 
            'point_t'
        )

    @property
    def offset(self) -> "point_t":
        return self._get_field(
            'offset', 
            'point_t'
        )

    @offset.setter
    def offset(self, value: "point_t"):
        self._set_field(
            'offset', 
            value, 
            'point_t'
        )

    @property
    def long_mode(self) -> "label_long_mode_t":
        return self._get_field(
            'long_mode', 
            'label_long_mode_t'
        )

    @long_mode.setter
    def long_mode(self, value: "label_long_mode_t"):
        self._set_field(
            'long_mode', 
            value, 
            'label_long_mode_t'
        )

    @property
    def static_txt(self) -> "uint8_t":
        return self._get_field(
            'static_txt', 
            'uint8_t'
        )

    @static_txt.setter
    def static_txt(self, value: "uint8_t"):
        self._set_field(
            'static_txt', 
            value, 
            'uint8_t'
        )

    @property
    def recolor(self) -> "uint8_t":
        return self._get_field(
            'recolor', 
            'uint8_t'
        )

    @recolor.setter
    def recolor(self, value: "uint8_t"):
        self._set_field(
            'recolor', 
            value, 
            'uint8_t'
        )

    @property
    def expand(self) -> "uint8_t":
        return self._get_field(
            'expand', 
            'uint8_t'
        )

    @expand.setter
    def expand(self, value: "uint8_t"):
        self._set_field(
            'expand', 
            value, 
            'uint8_t'
        )

    @property
    def dot_tmp_alloc(self) -> "uint8_t":
        return self._get_field(
            'dot_tmp_alloc', 
            'uint8_t'
        )

    @dot_tmp_alloc.setter
    def dot_tmp_alloc(self, value: "uint8_t"):
        self._set_field(
            'dot_tmp_alloc', 
            value, 
            'uint8_t'
        )

    @property
    def invalid_size_cache(self) -> "uint8_t":
        return self._get_field(
            'invalid_size_cache', 
            'uint8_t'
        )

    @invalid_size_cache.setter
    def invalid_size_cache(self, value: "uint8_t"):
        self._set_field(
            'invalid_size_cache', 
            value, 
            'uint8_t'
        )


class _bar_anim_t(_StructUnion): 
    _c_type = 'lv_bar_anim_t *'

    def __init__(
        self, 
        /, 
        bar: Optional["obj_t"] = _DefaultArg, 
        anim_start: Optional["int32_t"] = 0, 
        anim_end: Optional["int32_t"] = 0, 
        anim_state: Optional["int32_t"] = 0
    ):

        super().__init__(
            bar=bar, 
            anim_start=anim_start, 
            anim_end=anim_end, 
            anim_state=anim_state
        )

    @property
    def bar(self) -> "obj_t":
        return self._get_field(
            'bar', 
            'obj_t'
        )

    @bar.setter
    def bar(self, value: "obj_t"):
        self._set_field(
            'bar', 
            value, 
            'obj_t'
        )

    @property
    def anim_start(self) -> "int32_t":
        return self._get_field(
            'anim_start', 
            'int32_t'
        )

    @anim_start.setter
    def anim_start(self, value: "int32_t"):
        self._set_field(
            'anim_start', 
            value, 
            'int32_t'
        )

    @property
    def anim_end(self) -> "int32_t":
        return self._get_field(
            'anim_end', 
            'int32_t'
        )

    @anim_end.setter
    def anim_end(self, value: "int32_t"):
        self._set_field(
            'anim_end', 
            value, 
            'int32_t'
        )

    @property
    def anim_state(self) -> "int32_t":
        return self._get_field(
            'anim_state', 
            'int32_t'
        )

    @anim_state.setter
    def anim_state(self, value: "int32_t"):
        self._set_field(
            'anim_state', 
            value, 
            'int32_t'
        )


class bar_t(_StructUnion): 
    _c_type = 'lv_bar_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        cur_value: Optional["int32_t"] = 0, 
        min_value: Optional["int32_t"] = 0, 
        max_value: Optional["int32_t"] = 0, 
        start_value: Optional["int32_t"] = 0, 
        indic_area: Optional["area_t"] = _DefaultArg, 
        cur_value_anim: Optional["_bar_anim_t"] = _DefaultArg, 
        start_value_anim: Optional["_bar_anim_t"] = _DefaultArg, 
        mode: Optional["bar_mode_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            cur_value=cur_value, 
            min_value=min_value, 
            max_value=max_value, 
            start_value=start_value, 
            indic_area=indic_area, 
            cur_value_anim=cur_value_anim, 
            start_value_anim=start_value_anim, 
            mode=mode
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def cur_value(self) -> "int32_t":
        return self._get_field(
            'cur_value', 
            'int32_t'
        )

    @cur_value.setter
    def cur_value(self, value: "int32_t"):
        self._set_field(
            'cur_value', 
            value, 
            'int32_t'
        )

    @property
    def min_value(self) -> "int32_t":
        return self._get_field(
            'min_value', 
            'int32_t'
        )

    @min_value.setter
    def min_value(self, value: "int32_t"):
        self._set_field(
            'min_value', 
            value, 
            'int32_t'
        )

    @property
    def max_value(self) -> "int32_t":
        return self._get_field(
            'max_value', 
            'int32_t'
        )

    @max_value.setter
    def max_value(self, value: "int32_t"):
        self._set_field(
            'max_value', 
            value, 
            'int32_t'
        )

    @property
    def start_value(self) -> "int32_t":
        return self._get_field(
            'start_value', 
            'int32_t'
        )

    @start_value.setter
    def start_value(self, value: "int32_t"):
        self._set_field(
            'start_value', 
            value, 
            'int32_t'
        )

    @property
    def indic_area(self) -> "area_t":
        return self._get_field(
            'indic_area', 
            'area_t'
        )

    @indic_area.setter
    def indic_area(self, value: "area_t"):
        self._set_field(
            'indic_area', 
            value, 
            'area_t'
        )

    @property
    def cur_value_anim(self) -> "_bar_anim_t":
        return self._get_field(
            'cur_value_anim', 
            '_bar_anim_t'
        )

    @cur_value_anim.setter
    def cur_value_anim(self, value: "_bar_anim_t"):
        self._set_field(
            'cur_value_anim', 
            value, 
            '_bar_anim_t'
        )

    @property
    def start_value_anim(self) -> "_bar_anim_t":
        return self._get_field(
            'start_value_anim', 
            '_bar_anim_t'
        )

    @start_value_anim.setter
    def start_value_anim(self, value: "_bar_anim_t"):
        self._set_field(
            'start_value_anim', 
            value, 
            '_bar_anim_t'
        )

    @property
    def mode(self) -> "bar_mode_t":
        return self._get_field(
            'mode', 
            'bar_mode_t'
        )

    @mode.setter
    def mode(self, value: "bar_mode_t"):
        self._set_field(
            'mode', 
            value, 
            'bar_mode_t'
        )


class btn_t(_StructUnion): 
    _c_type = 'lv_btn_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )


class btnmatrix_t(_StructUnion): 
    _c_type = 'lv_btnmatrix_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        map_p: Optional["char"] = _DefaultArg, 
        button_areas: Optional["area_t"] = _DefaultArg, 
        ctrl_bits: Optional["btnmatrix_ctrl_t"] = _DefaultArg, 
        btn_cnt: Optional["uint16_t"] = 0, 
        row_cnt: Optional["uint16_t"] = 0, 
        btn_id_sel: Optional["uint16_t"] = 0, 
        one_check: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            map_p=map_p, 
            button_areas=button_areas, 
            ctrl_bits=ctrl_bits, 
            btn_cnt=btn_cnt, 
            row_cnt=row_cnt, 
            btn_id_sel=btn_id_sel, 
            one_check=one_check
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def map_p(self) -> "char":
        return self._get_field(
            'map_p', 
            'char'
        )

    @map_p.setter
    def map_p(self, value: "char"):
        self._set_field(
            'map_p', 
            value, 
            'char'
        )

    @property
    def button_areas(self) -> "area_t":
        return self._get_field(
            'button_areas', 
            'area_t'
        )

    @button_areas.setter
    def button_areas(self, value: "area_t"):
        self._set_field(
            'button_areas', 
            value, 
            'area_t'
        )

    @property
    def ctrl_bits(self) -> "btnmatrix_ctrl_t":
        return self._get_field(
            'ctrl_bits', 
            'btnmatrix_ctrl_t'
        )

    @ctrl_bits.setter
    def ctrl_bits(self, value: "btnmatrix_ctrl_t"):
        self._set_field(
            'ctrl_bits', 
            value, 
            'btnmatrix_ctrl_t'
        )

    @property
    def btn_cnt(self) -> "uint16_t":
        return self._get_field(
            'btn_cnt', 
            'uint16_t'
        )

    @btn_cnt.setter
    def btn_cnt(self, value: "uint16_t"):
        self._set_field(
            'btn_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def row_cnt(self) -> "uint16_t":
        return self._get_field(
            'row_cnt', 
            'uint16_t'
        )

    @row_cnt.setter
    def row_cnt(self, value: "uint16_t"):
        self._set_field(
            'row_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def btn_id_sel(self) -> "uint16_t":
        return self._get_field(
            'btn_id_sel', 
            'uint16_t'
        )

    @btn_id_sel.setter
    def btn_id_sel(self, value: "uint16_t"):
        self._set_field(
            'btn_id_sel', 
            value, 
            'uint16_t'
        )

    @property
    def one_check(self) -> "uint8_t":
        return self._get_field(
            'one_check', 
            'uint8_t'
        )

    @one_check.setter
    def one_check(self, value: "uint8_t"):
        self._set_field(
            'one_check', 
            value, 
            'uint8_t'
        )


class calendar_date_t(_StructUnion): 
    _c_type = 'lv_calendar_date_t *'

    def __init__(
        self, 
        /, 
        year: Optional["uint16_t"] = 0, 
        month: Optional["int8_t"] = 0, 
        day: Optional["int8_t"] = 0
    ):

        super().__init__(
            year=year, 
            month=month, 
            day=day
        )

    @property
    def year(self) -> "uint16_t":
        return self._get_field(
            'year', 
            'uint16_t'
        )

    @year.setter
    def year(self, value: "uint16_t"):
        self._set_field(
            'year', 
            value, 
            'uint16_t'
        )

    @property
    def month(self) -> "int8_t":
        return self._get_field(
            'month', 
            'int8_t'
        )

    @month.setter
    def month(self, value: "int8_t"):
        self._set_field(
            'month', 
            value, 
            'int8_t'
        )

    @property
    def day(self) -> "int8_t":
        return self._get_field(
            'day', 
            'int8_t'
        )

    @day.setter
    def day(self, value: "int8_t"):
        self._set_field(
            'day', 
            value, 
            'int8_t'
        )


class calendar_t(_StructUnion): 
    _c_type = 'lv_calendar_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        btnm: Optional["obj_t"] = _DefaultArg, 
        today: Optional["calendar_date_t"] = _DefaultArg, 
        showed_date: Optional["calendar_date_t"] = _DefaultArg, 
        highlighted_dates: Optional["calendar_date_t"] = _DefaultArg, 
        highlighted_dates_num: Optional["uint16_t"] = 0, 
        map: Optional[List["char"]] = _DefaultArg, 
        nums: Optional[List[List["char"]]] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            btnm=btnm, 
            today=today, 
            showed_date=showed_date, 
            highlighted_dates=highlighted_dates, 
            highlighted_dates_num=highlighted_dates_num, 
            map=map, 
            nums=nums
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def btnm(self) -> "obj_t":
        return self._get_field(
            'btnm', 
            'obj_t'
        )

    @btnm.setter
    def btnm(self, value: "obj_t"):
        self._set_field(
            'btnm', 
            value, 
            'obj_t'
        )

    @property
    def today(self) -> "calendar_date_t":
        return self._get_field(
            'today', 
            'calendar_date_t'
        )

    @today.setter
    def today(self, value: "calendar_date_t"):
        self._set_field(
            'today', 
            value, 
            'calendar_date_t'
        )

    @property
    def showed_date(self) -> "calendar_date_t":
        return self._get_field(
            'showed_date', 
            'calendar_date_t'
        )

    @showed_date.setter
    def showed_date(self, value: "calendar_date_t"):
        self._set_field(
            'showed_date', 
            value, 
            'calendar_date_t'
        )

    @property
    def highlighted_dates(self) -> "calendar_date_t":
        return self._get_field(
            'highlighted_dates', 
            'calendar_date_t'
        )

    @highlighted_dates.setter
    def highlighted_dates(self, value: "calendar_date_t"):
        self._set_field(
            'highlighted_dates', 
            value, 
            'calendar_date_t'
        )

    @property
    def highlighted_dates_num(self) -> "uint16_t":
        return self._get_field(
            'highlighted_dates_num', 
            'uint16_t'
        )

    @highlighted_dates_num.setter
    def highlighted_dates_num(self, value: "uint16_t"):
        self._set_field(
            'highlighted_dates_num', 
            value, 
            'uint16_t'
        )

    @property
    def map(self) -> List["char"]:
        return self._get_field(
            'map', 
            'List[char]'
        )

    @map.setter
    def map(self, value: List["char"]):
        self._set_field(
            'map', 
            value, 
            'List[char]'
        )

    @property
    def nums(self) -> List[List["char"]]:
        return self._get_field(
            'nums', 
            'List[List[char]]'
        )

    @nums.setter
    def nums(self, value: List[List["char"]]):
        self._set_field(
            'nums', 
            value, 
            'List[List[char]]'
        )


class canvas_t(_StructUnion): 
    _c_type = 'lv_canvas_t *'

    def __init__(
        self, 
        /, 
        img: Optional["img_t"] = _DefaultArg, 
        dsc: Optional["img_dsc_t"] = _DefaultArg
    ):

        super().__init__(
            img=img, 
            dsc=dsc
        )

    @property
    def img(self) -> "img_t":
        return self._get_field(
            'img', 
            'img_t'
        )

    @img.setter
    def img(self, value: "img_t"):
        self._set_field(
            'img', 
            value, 
            'img_t'
        )

    @property
    def dsc(self) -> "img_dsc_t":
        return self._get_field(
            'dsc', 
            'img_dsc_t'
        )

    @dsc.setter
    def dsc(self, value: "img_dsc_t"):
        self._set_field(
            'dsc', 
            value, 
            'img_dsc_t'
        )


class chart_series_t(_StructUnion): 
    _c_type = 'lv_chart_series_t *'

    def __init__(
        self, 
        /, 
        x_points: Optional["coord_t"] = _DefaultArg, 
        y_points: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        start_point: Optional["uint16_t"] = 0, 
        hidden: Optional["uint8_t"] = 0, 
        x_ext_buf_assigned: Optional["uint8_t"] = 0, 
        y_ext_buf_assigned: Optional["uint8_t"] = 0, 
        x_axis_sec: Optional["uint8_t"] = 0, 
        y_axis_sec: Optional["uint8_t"] = 0
    ):

        super().__init__(
            x_points=x_points, 
            y_points=y_points, 
            color=color, 
            start_point=start_point, 
            hidden=hidden, 
            x_ext_buf_assigned=x_ext_buf_assigned, 
            y_ext_buf_assigned=y_ext_buf_assigned, 
            x_axis_sec=x_axis_sec, 
            y_axis_sec=y_axis_sec
        )

    @property
    def x_points(self) -> "coord_t":
        return self._get_field(
            'x_points', 
            'coord_t'
        )

    @x_points.setter
    def x_points(self, value: "coord_t"):
        self._set_field(
            'x_points', 
            value, 
            'coord_t'
        )

    @property
    def y_points(self) -> "coord_t":
        return self._get_field(
            'y_points', 
            'coord_t'
        )

    @y_points.setter
    def y_points(self, value: "coord_t"):
        self._set_field(
            'y_points', 
            value, 
            'coord_t'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def start_point(self) -> "uint16_t":
        return self._get_field(
            'start_point', 
            'uint16_t'
        )

    @start_point.setter
    def start_point(self, value: "uint16_t"):
        self._set_field(
            'start_point', 
            value, 
            'uint16_t'
        )

    @property
    def hidden(self) -> "uint8_t":
        return self._get_field(
            'hidden', 
            'uint8_t'
        )

    @hidden.setter
    def hidden(self, value: "uint8_t"):
        self._set_field(
            'hidden', 
            value, 
            'uint8_t'
        )

    @property
    def x_ext_buf_assigned(self) -> "uint8_t":
        return self._get_field(
            'x_ext_buf_assigned', 
            'uint8_t'
        )

    @x_ext_buf_assigned.setter
    def x_ext_buf_assigned(self, value: "uint8_t"):
        self._set_field(
            'x_ext_buf_assigned', 
            value, 
            'uint8_t'
        )

    @property
    def y_ext_buf_assigned(self) -> "uint8_t":
        return self._get_field(
            'y_ext_buf_assigned', 
            'uint8_t'
        )

    @y_ext_buf_assigned.setter
    def y_ext_buf_assigned(self, value: "uint8_t"):
        self._set_field(
            'y_ext_buf_assigned', 
            value, 
            'uint8_t'
        )

    @property
    def x_axis_sec(self) -> "uint8_t":
        return self._get_field(
            'x_axis_sec', 
            'uint8_t'
        )

    @x_axis_sec.setter
    def x_axis_sec(self, value: "uint8_t"):
        self._set_field(
            'x_axis_sec', 
            value, 
            'uint8_t'
        )

    @property
    def y_axis_sec(self) -> "uint8_t":
        return self._get_field(
            'y_axis_sec', 
            'uint8_t'
        )

    @y_axis_sec.setter
    def y_axis_sec(self, value: "uint8_t"):
        self._set_field(
            'y_axis_sec', 
            value, 
            'uint8_t'
        )


class chart_cursor_t(_StructUnion): 
    _c_type = 'lv_chart_cursor_t *'

    def __init__(
        self, 
        /, 
        pos: Optional["point_t"] = _DefaultArg, 
        point_id: Optional["coord_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        ser: Optional["chart_series_t"] = _DefaultArg, 
        dir: Optional["dir_t"] = _DefaultArg, 
        pos_set: Optional["uint8_t"] = 0
    ):

        super().__init__(
            pos=pos, 
            point_id=point_id, 
            color=color, 
            ser=ser, 
            dir=dir, 
            pos_set=pos_set
        )

    @property
    def pos(self) -> "point_t":
        return self._get_field(
            'pos', 
            'point_t'
        )

    @pos.setter
    def pos(self, value: "point_t"):
        self._set_field(
            'pos', 
            value, 
            'point_t'
        )

    @property
    def point_id(self) -> "coord_t":
        return self._get_field(
            'point_id', 
            'coord_t'
        )

    @point_id.setter
    def point_id(self, value: "coord_t"):
        self._set_field(
            'point_id', 
            value, 
            'coord_t'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def ser(self) -> "chart_series_t":
        return self._get_field(
            'ser', 
            'chart_series_t'
        )

    @ser.setter
    def ser(self, value: "chart_series_t"):
        self._set_field(
            'ser', 
            value, 
            'chart_series_t'
        )

    @property
    def dir(self) -> "dir_t":
        return self._get_field(
            'dir', 
            'dir_t'
        )

    @dir.setter
    def dir(self, value: "dir_t"):
        self._set_field(
            'dir', 
            value, 
            'dir_t'
        )

    @property
    def pos_set(self) -> "uint8_t":
        return self._get_field(
            'pos_set', 
            'uint8_t'
        )

    @pos_set.setter
    def pos_set(self, value: "uint8_t"):
        self._set_field(
            'pos_set', 
            value, 
            'uint8_t'
        )


class chart_tick_dsc_t(_StructUnion): 
    _c_type = 'lv_chart_tick_dsc_t *'

    def __init__(
        self, 
        /, 
        major_len: Optional["coord_t"] = _DefaultArg, 
        minor_len: Optional["coord_t"] = _DefaultArg, 
        draw_size: Optional["coord_t"] = _DefaultArg, 
        minor_cnt: Optional["uint32_t"] = 0, 
        major_cnt: Optional["uint32_t"] = 0, 
        label_en: Optional["uint32_t"] = 0
    ):

        super().__init__(
            major_len=major_len, 
            minor_len=minor_len, 
            draw_size=draw_size, 
            minor_cnt=minor_cnt, 
            major_cnt=major_cnt, 
            label_en=label_en
        )

    @property
    def major_len(self) -> "coord_t":
        return self._get_field(
            'major_len', 
            'coord_t'
        )

    @major_len.setter
    def major_len(self, value: "coord_t"):
        self._set_field(
            'major_len', 
            value, 
            'coord_t'
        )

    @property
    def minor_len(self) -> "coord_t":
        return self._get_field(
            'minor_len', 
            'coord_t'
        )

    @minor_len.setter
    def minor_len(self, value: "coord_t"):
        self._set_field(
            'minor_len', 
            value, 
            'coord_t'
        )

    @property
    def draw_size(self) -> "coord_t":
        return self._get_field(
            'draw_size', 
            'coord_t'
        )

    @draw_size.setter
    def draw_size(self, value: "coord_t"):
        self._set_field(
            'draw_size', 
            value, 
            'coord_t'
        )

    @property
    def minor_cnt(self) -> "uint32_t":
        return self._get_field(
            'minor_cnt', 
            'uint32_t'
        )

    @minor_cnt.setter
    def minor_cnt(self, value: "uint32_t"):
        self._set_field(
            'minor_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def major_cnt(self) -> "uint32_t":
        return self._get_field(
            'major_cnt', 
            'uint32_t'
        )

    @major_cnt.setter
    def major_cnt(self, value: "uint32_t"):
        self._set_field(
            'major_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def label_en(self) -> "uint32_t":
        return self._get_field(
            'label_en', 
            'uint32_t'
        )

    @label_en.setter
    def label_en(self, value: "uint32_t"):
        self._set_field(
            'label_en', 
            value, 
            'uint32_t'
        )


class chart_t(_StructUnion): 
    _c_type = 'lv_chart_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        series_ll: Optional["ll_t"] = _DefaultArg, 
        cursor_ll: Optional["ll_t"] = _DefaultArg, 
        tick: Optional[List["chart_tick_dsc_t"]] = _DefaultArg, 
        ymin: Optional[List["coord_t"]] = _DefaultArg, 
        ymax: Optional[List["coord_t"]] = _DefaultArg, 
        xmin: Optional[List["coord_t"]] = _DefaultArg, 
        xmax: Optional[List["coord_t"]] = _DefaultArg, 
        pressed_point_id: Optional["coord_t"] = _DefaultArg, 
        hdiv_cnt: Optional["uint16_t"] = 0, 
        vdiv_cnt: Optional["uint16_t"] = 0, 
        point_cnt: Optional["uint16_t"] = 0, 
        zoom_x: Optional["uint16_t"] = 0, 
        zoom_y: Optional["uint16_t"] = 0, 
        type: Optional["chart_type_t"] = _DefaultArg, 
        update_mode: Optional["chart_update_mode_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            series_ll=series_ll, 
            cursor_ll=cursor_ll, 
            tick=tick, 
            ymin=ymin, 
            ymax=ymax, 
            xmin=xmin, 
            xmax=xmax, 
            pressed_point_id=pressed_point_id, 
            hdiv_cnt=hdiv_cnt, 
            vdiv_cnt=vdiv_cnt, 
            point_cnt=point_cnt, 
            zoom_x=zoom_x, 
            zoom_y=zoom_y, 
            type=type, 
            update_mode=update_mode
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def series_ll(self) -> "ll_t":
        return self._get_field(
            'series_ll', 
            'll_t'
        )

    @series_ll.setter
    def series_ll(self, value: "ll_t"):
        self._set_field(
            'series_ll', 
            value, 
            'll_t'
        )

    @property
    def cursor_ll(self) -> "ll_t":
        return self._get_field(
            'cursor_ll', 
            'll_t'
        )

    @cursor_ll.setter
    def cursor_ll(self, value: "ll_t"):
        self._set_field(
            'cursor_ll', 
            value, 
            'll_t'
        )

    @property
    def tick(self) -> List["chart_tick_dsc_t"]:
        return self._get_field(
            'tick', 
            'List[chart_tick_dsc_t]'
        )

    @tick.setter
    def tick(self, value: List["chart_tick_dsc_t"]):
        self._set_field(
            'tick', 
            value, 
            'List[chart_tick_dsc_t]'
        )

    @property
    def ymin(self) -> List["coord_t"]:
        return self._get_field(
            'ymin', 
            'List[coord_t]'
        )

    @ymin.setter
    def ymin(self, value: List["coord_t"]):
        self._set_field(
            'ymin', 
            value, 
            'List[coord_t]'
        )

    @property
    def ymax(self) -> List["coord_t"]:
        return self._get_field(
            'ymax', 
            'List[coord_t]'
        )

    @ymax.setter
    def ymax(self, value: List["coord_t"]):
        self._set_field(
            'ymax', 
            value, 
            'List[coord_t]'
        )

    @property
    def xmin(self) -> List["coord_t"]:
        return self._get_field(
            'xmin', 
            'List[coord_t]'
        )

    @xmin.setter
    def xmin(self, value: List["coord_t"]):
        self._set_field(
            'xmin', 
            value, 
            'List[coord_t]'
        )

    @property
    def xmax(self) -> List["coord_t"]:
        return self._get_field(
            'xmax', 
            'List[coord_t]'
        )

    @xmax.setter
    def xmax(self, value: List["coord_t"]):
        self._set_field(
            'xmax', 
            value, 
            'List[coord_t]'
        )

    @property
    def pressed_point_id(self) -> "coord_t":
        return self._get_field(
            'pressed_point_id', 
            'coord_t'
        )

    @pressed_point_id.setter
    def pressed_point_id(self, value: "coord_t"):
        self._set_field(
            'pressed_point_id', 
            value, 
            'coord_t'
        )

    @property
    def hdiv_cnt(self) -> "uint16_t":
        return self._get_field(
            'hdiv_cnt', 
            'uint16_t'
        )

    @hdiv_cnt.setter
    def hdiv_cnt(self, value: "uint16_t"):
        self._set_field(
            'hdiv_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def vdiv_cnt(self) -> "uint16_t":
        return self._get_field(
            'vdiv_cnt', 
            'uint16_t'
        )

    @vdiv_cnt.setter
    def vdiv_cnt(self, value: "uint16_t"):
        self._set_field(
            'vdiv_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def point_cnt(self) -> "uint16_t":
        return self._get_field(
            'point_cnt', 
            'uint16_t'
        )

    @point_cnt.setter
    def point_cnt(self, value: "uint16_t"):
        self._set_field(
            'point_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def zoom_x(self) -> "uint16_t":
        return self._get_field(
            'zoom_x', 
            'uint16_t'
        )

    @zoom_x.setter
    def zoom_x(self, value: "uint16_t"):
        self._set_field(
            'zoom_x', 
            value, 
            'uint16_t'
        )

    @property
    def zoom_y(self) -> "uint16_t":
        return self._get_field(
            'zoom_y', 
            'uint16_t'
        )

    @zoom_y.setter
    def zoom_y(self, value: "uint16_t"):
        self._set_field(
            'zoom_y', 
            value, 
            'uint16_t'
        )

    @property
    def type(self) -> "chart_type_t":
        return self._get_field(
            'type', 
            'chart_type_t'
        )

    @type.setter
    def type(self, value: "chart_type_t"):
        self._set_field(
            'type', 
            value, 
            'chart_type_t'
        )

    @property
    def update_mode(self) -> "chart_update_mode_t":
        return self._get_field(
            'update_mode', 
            'chart_update_mode_t'
        )

    @update_mode.setter
    def update_mode(self, value: "chart_update_mode_t"):
        self._set_field(
            'update_mode', 
            value, 
            'chart_update_mode_t'
        )


class checkbox_t(_StructUnion): 
    _c_type = 'lv_checkbox_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        txt: Optional["char"] = _DefaultArg, 
        static_txt: Optional["uint32_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            txt=txt, 
            static_txt=static_txt
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def txt(self) -> "char":
        return self._get_field(
            'txt', 
            'char'
        )

    @txt.setter
    def txt(self, value: "char"):
        self._set_field(
            'txt', 
            value, 
            'char'
        )

    @property
    def static_txt(self) -> "uint32_t":
        return self._get_field(
            'static_txt', 
            'uint32_t'
        )

    @static_txt.setter
    def static_txt(self, value: "uint32_t"):
        self._set_field(
            'static_txt', 
            value, 
            'uint32_t'
        )


class colorwheel_knob_t(_StructUnion): 
    _c_type = 'lv_colorwheel_knob_t *'

    def __init__(
        self, 
        /, 
        pos: Optional["point_t"] = _DefaultArg, 
        recolor: Optional["uint8_t"] = 0
    ):

        super().__init__(
            pos=pos, 
            recolor=recolor
        )

    @property
    def pos(self) -> "point_t":
        return self._get_field(
            'pos', 
            'point_t'
        )

    @pos.setter
    def pos(self, value: "point_t"):
        self._set_field(
            'pos', 
            value, 
            'point_t'
        )

    @property
    def recolor(self) -> "uint8_t":
        return self._get_field(
            'recolor', 
            'uint8_t'
        )

    @recolor.setter
    def recolor(self, value: "uint8_t"):
        self._set_field(
            'recolor', 
            value, 
            'uint8_t'
        )


class colorwheel_t(_StructUnion): 
    _c_type = 'lv_colorwheel_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        hsv: Optional["color_hsv_t"] = _DefaultArg, 
        knob: Optional["colorwheel_knob_t"] = _DefaultArg, 
        last_click_time: Optional["uint32_t"] = 0, 
        last_change_time: Optional["uint32_t"] = 0, 
        last_press_point: Optional["point_t"] = _DefaultArg, 
        mode: Optional["colorwheel_mode_t"] = _DefaultArg, 
        mode_fixed: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            hsv=hsv, 
            knob=knob, 
            last_click_time=last_click_time, 
            last_change_time=last_change_time, 
            last_press_point=last_press_point, 
            mode=mode, 
            mode_fixed=mode_fixed
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def hsv(self) -> "color_hsv_t":
        return self._get_field(
            'hsv', 
            'color_hsv_t'
        )

    @hsv.setter
    def hsv(self, value: "color_hsv_t"):
        self._set_field(
            'hsv', 
            value, 
            'color_hsv_t'
        )

    @property
    def knob(self) -> "colorwheel_knob_t":
        return self._get_field(
            'knob', 
            'colorwheel_knob_t'
        )

    @knob.setter
    def knob(self, value: "colorwheel_knob_t"):
        self._set_field(
            'knob', 
            value, 
            'colorwheel_knob_t'
        )

    @property
    def last_click_time(self) -> "uint32_t":
        return self._get_field(
            'last_click_time', 
            'uint32_t'
        )

    @last_click_time.setter
    def last_click_time(self, value: "uint32_t"):
        self._set_field(
            'last_click_time', 
            value, 
            'uint32_t'
        )

    @property
    def last_change_time(self) -> "uint32_t":
        return self._get_field(
            'last_change_time', 
            'uint32_t'
        )

    @last_change_time.setter
    def last_change_time(self, value: "uint32_t"):
        self._set_field(
            'last_change_time', 
            value, 
            'uint32_t'
        )

    @property
    def last_press_point(self) -> "point_t":
        return self._get_field(
            'last_press_point', 
            'point_t'
        )

    @last_press_point.setter
    def last_press_point(self, value: "point_t"):
        self._set_field(
            'last_press_point', 
            value, 
            'point_t'
        )

    @property
    def mode(self) -> "colorwheel_mode_t":
        return self._get_field(
            'mode', 
            'colorwheel_mode_t'
        )

    @mode.setter
    def mode(self, value: "colorwheel_mode_t"):
        self._set_field(
            'mode', 
            value, 
            'colorwheel_mode_t'
        )

    @property
    def mode_fixed(self) -> "uint8_t":
        return self._get_field(
            'mode_fixed', 
            'uint8_t'
        )

    @mode_fixed.setter
    def mode_fixed(self, value: "uint8_t"):
        self._set_field(
            'mode_fixed', 
            value, 
            'uint8_t'
        )


class dropdown_t(_StructUnion): 
    _c_type = 'lv_dropdown_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        list: Optional["obj_t"] = _DefaultArg, 
        text: Optional["char"] = _DefaultArg, 
        symbol: Optional[Any] = _DefaultArg, 
        options: Optional["char"] = _DefaultArg, 
        option_cnt: Optional["uint16_t"] = 0, 
        sel_opt_id: Optional["uint16_t"] = 0, 
        sel_opt_id_orig: Optional["uint16_t"] = 0, 
        pr_opt_id: Optional["uint16_t"] = 0, 
        dir: Optional["dir_t"] = _DefaultArg, 
        static_txt: Optional["uint8_t"] = 0, 
        selected_highlight: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            list=list, 
            text=text, 
            symbol=symbol, 
            options=options, 
            option_cnt=option_cnt, 
            sel_opt_id=sel_opt_id, 
            sel_opt_id_orig=sel_opt_id_orig, 
            pr_opt_id=pr_opt_id, 
            dir=dir, 
            static_txt=static_txt, 
            selected_highlight=selected_highlight
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def list(self) -> "obj_t":
        return self._get_field(
            'list', 
            'obj_t'
        )

    @list.setter
    def list(self, value: "obj_t"):
        self._set_field(
            'list', 
            value, 
            'obj_t'
        )

    @property
    def text(self) -> "char":
        return self._get_field(
            'text', 
            'char'
        )

    @text.setter
    def text(self, value: "char"):
        self._set_field(
            'text', 
            value, 
            'char'
        )

    @property
    def symbol(self) -> Any:
        return self._get_field(
            'symbol', 
            'void'
        )

    @symbol.setter
    def symbol(self, value: Any):
        self._set_field(
            'symbol', 
            value, 
            'void'
        )

    @property
    def options(self) -> "char":
        return self._get_field(
            'options', 
            'char'
        )

    @options.setter
    def options(self, value: "char"):
        self._set_field(
            'options', 
            value, 
            'char'
        )

    @property
    def option_cnt(self) -> "uint16_t":
        return self._get_field(
            'option_cnt', 
            'uint16_t'
        )

    @option_cnt.setter
    def option_cnt(self, value: "uint16_t"):
        self._set_field(
            'option_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def sel_opt_id(self) -> "uint16_t":
        return self._get_field(
            'sel_opt_id', 
            'uint16_t'
        )

    @sel_opt_id.setter
    def sel_opt_id(self, value: "uint16_t"):
        self._set_field(
            'sel_opt_id', 
            value, 
            'uint16_t'
        )

    @property
    def sel_opt_id_orig(self) -> "uint16_t":
        return self._get_field(
            'sel_opt_id_orig', 
            'uint16_t'
        )

    @sel_opt_id_orig.setter
    def sel_opt_id_orig(self, value: "uint16_t"):
        self._set_field(
            'sel_opt_id_orig', 
            value, 
            'uint16_t'
        )

    @property
    def pr_opt_id(self) -> "uint16_t":
        return self._get_field(
            'pr_opt_id', 
            'uint16_t'
        )

    @pr_opt_id.setter
    def pr_opt_id(self, value: "uint16_t"):
        self._set_field(
            'pr_opt_id', 
            value, 
            'uint16_t'
        )

    @property
    def dir(self) -> "dir_t":
        return self._get_field(
            'dir', 
            'dir_t'
        )

    @dir.setter
    def dir(self, value: "dir_t"):
        self._set_field(
            'dir', 
            value, 
            'dir_t'
        )

    @property
    def static_txt(self) -> "uint8_t":
        return self._get_field(
            'static_txt', 
            'uint8_t'
        )

    @static_txt.setter
    def static_txt(self, value: "uint8_t"):
        self._set_field(
            'static_txt', 
            value, 
            'uint8_t'
        )

    @property
    def selected_highlight(self) -> "uint8_t":
        return self._get_field(
            'selected_highlight', 
            'uint8_t'
        )

    @selected_highlight.setter
    def selected_highlight(self, value: "uint8_t"):
        self._set_field(
            'selected_highlight', 
            value, 
            'uint8_t'
        )


class dropdown_list_t(_StructUnion): 
    _c_type = 'lv_dropdown_list_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        dropdown: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            dropdown=dropdown
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def dropdown(self) -> "obj_t":
        return self._get_field(
            'dropdown', 
            'obj_t'
        )

    @dropdown.setter
    def dropdown(self, value: "obj_t"):
        self._set_field(
            'dropdown', 
            value, 
            'obj_t'
        )


class imgbtn_src_info_t(_StructUnion): 
    _c_type = 'lv_imgbtn_src_info_t *'

    def __init__(
        self, 
        /, 
        img_src: Optional[Any] = _DefaultArg, 
        header: Optional["img_header_t"] = _DefaultArg
    ):

        super().__init__(
            img_src=img_src, 
            header=header
        )

    @property
    def img_src(self) -> Any:
        return self._get_field(
            'img_src', 
            'void'
        )

    @img_src.setter
    def img_src(self, value: Any):
        self._set_field(
            'img_src', 
            value, 
            'void'
        )

    @property
    def header(self) -> "img_header_t":
        return self._get_field(
            'header', 
            'img_header_t'
        )

    @header.setter
    def header(self, value: "img_header_t"):
        self._set_field(
            'header', 
            value, 
            'img_header_t'
        )


class imgbtn_t(_StructUnion): 
    _c_type = 'lv_imgbtn_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        src_mid: Optional[List["imgbtn_src_info_t"]] = _DefaultArg, 
        src_left: Optional[List["imgbtn_src_info_t"]] = _DefaultArg, 
        src_right: Optional[List["imgbtn_src_info_t"]] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            src_mid=src_mid, 
            src_left=src_left, 
            src_right=src_right
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def src_mid(self) -> List["imgbtn_src_info_t"]:
        return self._get_field(
            'src_mid', 
            'List[imgbtn_src_info_t]'
        )

    @src_mid.setter
    def src_mid(self, value: List["imgbtn_src_info_t"]):
        self._set_field(
            'src_mid', 
            value, 
            'List[imgbtn_src_info_t]'
        )

    @property
    def src_left(self) -> List["imgbtn_src_info_t"]:
        return self._get_field(
            'src_left', 
            'List[imgbtn_src_info_t]'
        )

    @src_left.setter
    def src_left(self, value: List["imgbtn_src_info_t"]):
        self._set_field(
            'src_left', 
            value, 
            'List[imgbtn_src_info_t]'
        )

    @property
    def src_right(self) -> List["imgbtn_src_info_t"]:
        return self._get_field(
            'src_right', 
            'List[imgbtn_src_info_t]'
        )

    @src_right.setter
    def src_right(self, value: List["imgbtn_src_info_t"]):
        self._set_field(
            'src_right', 
            value, 
            'List[imgbtn_src_info_t]'
        )


class keyboard_t(_StructUnion): 
    _c_type = 'lv_keyboard_t *'

    def __init__(
        self, 
        /, 
        btnm: Optional["btnmatrix_t"] = _DefaultArg, 
        ta: Optional["obj_t"] = _DefaultArg, 
        mode: Optional["keyboard_mode_t"] = _DefaultArg, 
        popovers: Optional["uint8_t"] = 0
    ):

        super().__init__(
            btnm=btnm, 
            ta=ta, 
            mode=mode, 
            popovers=popovers
        )

    @property
    def btnm(self) -> "btnmatrix_t":
        return self._get_field(
            'btnm', 
            'btnmatrix_t'
        )

    @btnm.setter
    def btnm(self, value: "btnmatrix_t"):
        self._set_field(
            'btnm', 
            value, 
            'btnmatrix_t'
        )

    @property
    def ta(self) -> "obj_t":
        return self._get_field(
            'ta', 
            'obj_t'
        )

    @ta.setter
    def ta(self, value: "obj_t"):
        self._set_field(
            'ta', 
            value, 
            'obj_t'
        )

    @property
    def mode(self) -> "keyboard_mode_t":
        return self._get_field(
            'mode', 
            'keyboard_mode_t'
        )

    @mode.setter
    def mode(self, value: "keyboard_mode_t"):
        self._set_field(
            'mode', 
            value, 
            'keyboard_mode_t'
        )

    @property
    def popovers(self) -> "uint8_t":
        return self._get_field(
            'popovers', 
            'uint8_t'
        )

    @popovers.setter
    def popovers(self, value: "uint8_t"):
        self._set_field(
            'popovers', 
            value, 
            'uint8_t'
        )


class led_t(_StructUnion): 
    _c_type = 'lv_led_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        bright: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            color=color, 
            bright=bright
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def bright(self) -> "uint8_t":
        return self._get_field(
            'bright', 
            'uint8_t'
        )

    @bright.setter
    def bright(self, value: "uint8_t"):
        self._set_field(
            'bright', 
            value, 
            'uint8_t'
        )


class line_t(_StructUnion): 
    _c_type = 'lv_line_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        point_array: Optional["point_t"] = _DefaultArg, 
        point_num: Optional["uint16_t"] = 0, 
        y_inv: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            point_array=point_array, 
            point_num=point_num, 
            y_inv=y_inv
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def point_array(self) -> "point_t":
        return self._get_field(
            'point_array', 
            'point_t'
        )

    @point_array.setter
    def point_array(self, value: "point_t"):
        self._set_field(
            'point_array', 
            value, 
            'point_t'
        )

    @property
    def point_num(self) -> "uint16_t":
        return self._get_field(
            'point_num', 
            'uint16_t'
        )

    @point_num.setter
    def point_num(self, value: "uint16_t"):
        self._set_field(
            'point_num', 
            value, 
            'uint16_t'
        )

    @property
    def y_inv(self) -> "uint8_t":
        return self._get_field(
            'y_inv', 
            'uint8_t'
        )

    @y_inv.setter
    def y_inv(self, value: "uint8_t"):
        self._set_field(
            'y_inv', 
            value, 
            'uint8_t'
        )


class menu_load_page_event_data_t(_StructUnion): 
    _c_type = 'lv_menu_load_page_event_data_t *'

    def __init__(
        self, 
        /, 
        menu: Optional["obj_t"] = _DefaultArg, 
        page: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            menu=menu, 
            page=page
        )

    @property
    def menu(self) -> "obj_t":
        return self._get_field(
            'menu', 
            'obj_t'
        )

    @menu.setter
    def menu(self, value: "obj_t"):
        self._set_field(
            'menu', 
            value, 
            'obj_t'
        )

    @property
    def page(self) -> "obj_t":
        return self._get_field(
            'page', 
            'obj_t'
        )

    @page.setter
    def page(self, value: "obj_t"):
        self._set_field(
            'page', 
            value, 
            'obj_t'
        )


class menu_history_t(_StructUnion): 
    _c_type = 'lv_menu_history_t *'

    def __init__(
        self, 
        /, 
        page: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            page=page
        )

    @property
    def page(self) -> "obj_t":
        return self._get_field(
            'page', 
            'obj_t'
        )

    @page.setter
    def page(self, value: "obj_t"):
        self._set_field(
            'page', 
            value, 
            'obj_t'
        )


class menu_t(_StructUnion): 
    _c_type = 'lv_menu_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        storage: Optional["obj_t"] = _DefaultArg, 
        main: Optional["obj_t"] = _DefaultArg, 
        main_page: Optional["obj_t"] = _DefaultArg, 
        main_header: Optional["obj_t"] = _DefaultArg, 
        main_header_back_btn: Optional["obj_t"] = _DefaultArg, 
        main_header_title: Optional["obj_t"] = _DefaultArg, 
        sidebar: Optional["obj_t"] = _DefaultArg, 
        sidebar_page: Optional["obj_t"] = _DefaultArg, 
        sidebar_header: Optional["obj_t"] = _DefaultArg, 
        sidebar_header_back_btn: Optional["obj_t"] = _DefaultArg, 
        sidebar_header_title: Optional["obj_t"] = _DefaultArg, 
        selected_tab: Optional["obj_t"] = _DefaultArg, 
        history_ll: Optional["ll_t"] = _DefaultArg, 
        cur_depth: Optional["uint8_t"] = 0, 
        prev_depth: Optional["uint8_t"] = 0, 
        sidebar_generated: Optional["uint8_t"] = 0, 
        mode_header: Optional["menu_mode_header_t"] = _DefaultArg, 
        mode_root_back_btn: Optional["menu_mode_root_back_btn_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            storage=storage, 
            main=main, 
            main_page=main_page, 
            main_header=main_header, 
            main_header_back_btn=main_header_back_btn, 
            main_header_title=main_header_title, 
            sidebar=sidebar, 
            sidebar_page=sidebar_page, 
            sidebar_header=sidebar_header, 
            sidebar_header_back_btn=sidebar_header_back_btn, 
            sidebar_header_title=sidebar_header_title, 
            selected_tab=selected_tab, 
            history_ll=history_ll, 
            cur_depth=cur_depth, 
            prev_depth=prev_depth, 
            sidebar_generated=sidebar_generated, 
            mode_header=mode_header, 
            mode_root_back_btn=mode_root_back_btn
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def storage(self) -> "obj_t":
        return self._get_field(
            'storage', 
            'obj_t'
        )

    @storage.setter
    def storage(self, value: "obj_t"):
        self._set_field(
            'storage', 
            value, 
            'obj_t'
        )

    @property
    def main(self) -> "obj_t":
        return self._get_field(
            'main', 
            'obj_t'
        )

    @main.setter
    def main(self, value: "obj_t"):
        self._set_field(
            'main', 
            value, 
            'obj_t'
        )

    @property
    def main_page(self) -> "obj_t":
        return self._get_field(
            'main_page', 
            'obj_t'
        )

    @main_page.setter
    def main_page(self, value: "obj_t"):
        self._set_field(
            'main_page', 
            value, 
            'obj_t'
        )

    @property
    def main_header(self) -> "obj_t":
        return self._get_field(
            'main_header', 
            'obj_t'
        )

    @main_header.setter
    def main_header(self, value: "obj_t"):
        self._set_field(
            'main_header', 
            value, 
            'obj_t'
        )

    @property
    def main_header_back_btn(self) -> "obj_t":
        return self._get_field(
            'main_header_back_btn', 
            'obj_t'
        )

    @main_header_back_btn.setter
    def main_header_back_btn(self, value: "obj_t"):
        self._set_field(
            'main_header_back_btn', 
            value, 
            'obj_t'
        )

    @property
    def main_header_title(self) -> "obj_t":
        return self._get_field(
            'main_header_title', 
            'obj_t'
        )

    @main_header_title.setter
    def main_header_title(self, value: "obj_t"):
        self._set_field(
            'main_header_title', 
            value, 
            'obj_t'
        )

    @property
    def sidebar(self) -> "obj_t":
        return self._get_field(
            'sidebar', 
            'obj_t'
        )

    @sidebar.setter
    def sidebar(self, value: "obj_t"):
        self._set_field(
            'sidebar', 
            value, 
            'obj_t'
        )

    @property
    def sidebar_page(self) -> "obj_t":
        return self._get_field(
            'sidebar_page', 
            'obj_t'
        )

    @sidebar_page.setter
    def sidebar_page(self, value: "obj_t"):
        self._set_field(
            'sidebar_page', 
            value, 
            'obj_t'
        )

    @property
    def sidebar_header(self) -> "obj_t":
        return self._get_field(
            'sidebar_header', 
            'obj_t'
        )

    @sidebar_header.setter
    def sidebar_header(self, value: "obj_t"):
        self._set_field(
            'sidebar_header', 
            value, 
            'obj_t'
        )

    @property
    def sidebar_header_back_btn(self) -> "obj_t":
        return self._get_field(
            'sidebar_header_back_btn', 
            'obj_t'
        )

    @sidebar_header_back_btn.setter
    def sidebar_header_back_btn(self, value: "obj_t"):
        self._set_field(
            'sidebar_header_back_btn', 
            value, 
            'obj_t'
        )

    @property
    def sidebar_header_title(self) -> "obj_t":
        return self._get_field(
            'sidebar_header_title', 
            'obj_t'
        )

    @sidebar_header_title.setter
    def sidebar_header_title(self, value: "obj_t"):
        self._set_field(
            'sidebar_header_title', 
            value, 
            'obj_t'
        )

    @property
    def selected_tab(self) -> "obj_t":
        return self._get_field(
            'selected_tab', 
            'obj_t'
        )

    @selected_tab.setter
    def selected_tab(self, value: "obj_t"):
        self._set_field(
            'selected_tab', 
            value, 
            'obj_t'
        )

    @property
    def history_ll(self) -> "ll_t":
        return self._get_field(
            'history_ll', 
            'll_t'
        )

    @history_ll.setter
    def history_ll(self, value: "ll_t"):
        self._set_field(
            'history_ll', 
            value, 
            'll_t'
        )

    @property
    def cur_depth(self) -> "uint8_t":
        return self._get_field(
            'cur_depth', 
            'uint8_t'
        )

    @cur_depth.setter
    def cur_depth(self, value: "uint8_t"):
        self._set_field(
            'cur_depth', 
            value, 
            'uint8_t'
        )

    @property
    def prev_depth(self) -> "uint8_t":
        return self._get_field(
            'prev_depth', 
            'uint8_t'
        )

    @prev_depth.setter
    def prev_depth(self, value: "uint8_t"):
        self._set_field(
            'prev_depth', 
            value, 
            'uint8_t'
        )

    @property
    def sidebar_generated(self) -> "uint8_t":
        return self._get_field(
            'sidebar_generated', 
            'uint8_t'
        )

    @sidebar_generated.setter
    def sidebar_generated(self, value: "uint8_t"):
        self._set_field(
            'sidebar_generated', 
            value, 
            'uint8_t'
        )

    @property
    def mode_header(self) -> "menu_mode_header_t":
        return self._get_field(
            'mode_header', 
            'menu_mode_header_t'
        )

    @mode_header.setter
    def mode_header(self, value: "menu_mode_header_t"):
        self._set_field(
            'mode_header', 
            value, 
            'menu_mode_header_t'
        )

    @property
    def mode_root_back_btn(self) -> "menu_mode_root_back_btn_t":
        return self._get_field(
            'mode_root_back_btn', 
            'menu_mode_root_back_btn_t'
        )

    @mode_root_back_btn.setter
    def mode_root_back_btn(self, value: "menu_mode_root_back_btn_t"):
        self._set_field(
            'mode_root_back_btn', 
            value, 
            'menu_mode_root_back_btn_t'
        )


class menu_page_t(_StructUnion): 
    _c_type = 'lv_menu_page_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        title: Optional["char"] = _DefaultArg, 
        static_title: Optional["bool"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            title=title, 
            static_title=static_title
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def title(self) -> "char":
        return self._get_field(
            'title', 
            'char'
        )

    @title.setter
    def title(self, value: "char"):
        self._set_field(
            'title', 
            value, 
            'char'
        )

    @property
    def static_title(self) -> "bool":
        return self._get_field(
            'static_title', 
            'bool'
        )

    @static_title.setter
    def static_title(self, value: "bool"):
        self._set_field(
            'static_title', 
            value, 
            'bool'
        )


class meter_indicator_type_data_needle_img_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_type_data_needle_img_t *'

    def __init__(
        self, 
        /, 
        src: Optional[Any] = _DefaultArg, 
        pivot: Optional["point_t"] = _DefaultArg
    ):

        super().__init__(
            src=src, 
            pivot=pivot
        )

    @property
    def src(self) -> Any:
        return self._get_field(
            'src', 
            'void'
        )

    @src.setter
    def src(self, value: Any):
        self._set_field(
            'src', 
            value, 
            'void'
        )

    @property
    def pivot(self) -> "point_t":
        return self._get_field(
            'pivot', 
            'point_t'
        )

    @pivot.setter
    def pivot(self, value: "point_t"):
        self._set_field(
            'pivot', 
            value, 
            'point_t'
        )


class meter_indicator_type_data_needle_line_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_type_data_needle_line_t *'

    def __init__(
        self, 
        /, 
        width: Optional["uint16_t"] = 0, 
        r_mod: Optional["int16_t"] = 0, 
        color: Optional["color_t"] = _DefaultArg
    ):

        super().__init__(
            width=width, 
            r_mod=r_mod, 
            color=color
        )

    @property
    def width(self) -> "uint16_t":
        return self._get_field(
            'width', 
            'uint16_t'
        )

    @width.setter
    def width(self, value: "uint16_t"):
        self._set_field(
            'width', 
            value, 
            'uint16_t'
        )

    @property
    def r_mod(self) -> "int16_t":
        return self._get_field(
            'r_mod', 
            'int16_t'
        )

    @r_mod.setter
    def r_mod(self, value: "int16_t"):
        self._set_field(
            'r_mod', 
            value, 
            'int16_t'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )


class meter_indicator_type_data_arc_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_type_data_arc_t *'

    def __init__(
        self, 
        /, 
        width: Optional["uint16_t"] = 0, 
        src: Optional[Any] = _DefaultArg, 
        color: Optional["color_t"] = _DefaultArg, 
        r_mod: Optional["int16_t"] = 0
    ):

        super().__init__(
            width=width, 
            src=src, 
            color=color, 
            r_mod=r_mod
        )

    @property
    def width(self) -> "uint16_t":
        return self._get_field(
            'width', 
            'uint16_t'
        )

    @width.setter
    def width(self, value: "uint16_t"):
        self._set_field(
            'width', 
            value, 
            'uint16_t'
        )

    @property
    def src(self) -> Any:
        return self._get_field(
            'src', 
            'void'
        )

    @src.setter
    def src(self, value: Any):
        self._set_field(
            'src', 
            value, 
            'void'
        )

    @property
    def color(self) -> "color_t":
        return self._get_field(
            'color', 
            'color_t'
        )

    @color.setter
    def color(self, value: "color_t"):
        self._set_field(
            'color', 
            value, 
            'color_t'
        )

    @property
    def r_mod(self) -> "int16_t":
        return self._get_field(
            'r_mod', 
            'int16_t'
        )

    @r_mod.setter
    def r_mod(self, value: "int16_t"):
        self._set_field(
            'r_mod', 
            value, 
            'int16_t'
        )


class meter_indicator_type_data_scale_lines_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_type_data_scale_lines_t *'

    def __init__(
        self, 
        /, 
        width_mod: Optional["int16_t"] = 0, 
        color_start: Optional["color_t"] = _DefaultArg, 
        color_end: Optional["color_t"] = _DefaultArg, 
        local_grad: Optional["uint8_t"] = 0
    ):

        super().__init__(
            width_mod=width_mod, 
            color_start=color_start, 
            color_end=color_end, 
            local_grad=local_grad
        )

    @property
    def width_mod(self) -> "int16_t":
        return self._get_field(
            'width_mod', 
            'int16_t'
        )

    @width_mod.setter
    def width_mod(self, value: "int16_t"):
        self._set_field(
            'width_mod', 
            value, 
            'int16_t'
        )

    @property
    def color_start(self) -> "color_t":
        return self._get_field(
            'color_start', 
            'color_t'
        )

    @color_start.setter
    def color_start(self, value: "color_t"):
        self._set_field(
            'color_start', 
            value, 
            'color_t'
        )

    @property
    def color_end(self) -> "color_t":
        return self._get_field(
            'color_end', 
            'color_t'
        )

    @color_end.setter
    def color_end(self, value: "color_t"):
        self._set_field(
            'color_end', 
            value, 
            'color_t'
        )

    @property
    def local_grad(self) -> "uint8_t":
        return self._get_field(
            'local_grad', 
            'uint8_t'
        )

    @local_grad.setter
    def local_grad(self, value: "uint8_t"):
        self._set_field(
            'local_grad', 
            value, 
            'uint8_t'
        )


class meter_indicator_type_data_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_type_data_t *'

    def __init__(
        self, 
        /, 
        needle_img: Optional["meter_indicator_type_data_needle_img_t"] = _DefaultArg, 
        needle_line: Optional["meter_indicator_type_data_needle_line_t"] = _DefaultArg, 
        arc: Optional["meter_indicator_type_data_arc_t"] = _DefaultArg, 
        scale_lines: Optional["meter_indicator_type_data_scale_lines_t"] = _DefaultArg
    ):

        super().__init__(
            needle_img=needle_img, 
            needle_line=needle_line, 
            arc=arc, 
            scale_lines=scale_lines
        )

    @property
    def needle_img(self) -> "meter_indicator_type_data_needle_img_t":
        return self._get_field(
            'needle_img', 
            'meter_indicator_type_data_needle_img_t'
        )

    @needle_img.setter
    def needle_img(self, value: "meter_indicator_type_data_needle_img_t"):
        self._set_field(
            'needle_img', 
            value, 
            'meter_indicator_type_data_needle_img_t'
        )

    @property
    def needle_line(self) -> "meter_indicator_type_data_needle_line_t":
        return self._get_field(
            'needle_line', 
            'meter_indicator_type_data_needle_line_t'
        )

    @needle_line.setter
    def needle_line(self, value: "meter_indicator_type_data_needle_line_t"):
        self._set_field(
            'needle_line', 
            value, 
            'meter_indicator_type_data_needle_line_t'
        )

    @property
    def arc(self) -> "meter_indicator_type_data_arc_t":
        return self._get_field(
            'arc', 
            'meter_indicator_type_data_arc_t'
        )

    @arc.setter
    def arc(self, value: "meter_indicator_type_data_arc_t"):
        self._set_field(
            'arc', 
            value, 
            'meter_indicator_type_data_arc_t'
        )

    @property
    def scale_lines(self) -> "meter_indicator_type_data_scale_lines_t":
        return self._get_field(
            'scale_lines', 
            'meter_indicator_type_data_scale_lines_t'
        )

    @scale_lines.setter
    def scale_lines(self, value: "meter_indicator_type_data_scale_lines_t"):
        self._set_field(
            'scale_lines', 
            value, 
            'meter_indicator_type_data_scale_lines_t'
        )


class meter_indicator_t(_StructUnion): 
    _c_type = 'lv_meter_indicator_t *'

    def __init__(
        self, 
        /, 
        type: Optional["meter_indicator_type_t"] = _DefaultArg, 
        opa: Optional["opa_t"] = _DefaultArg, 
        start_value: Optional["int32_t"] = 0, 
        end_value: Optional["int32_t"] = 0, 
        type_data: Optional["meter_indicator_type_data_t"] = _DefaultArg
    ):

        super().__init__(
            type=type, 
            opa=opa, 
            start_value=start_value, 
            end_value=end_value, 
            type_data=type_data
        )

    @property
    def type(self) -> "meter_indicator_type_t":
        return self._get_field(
            'type', 
            'meter_indicator_type_t'
        )

    @type.setter
    def type(self, value: "meter_indicator_type_t"):
        self._set_field(
            'type', 
            value, 
            'meter_indicator_type_t'
        )

    @property
    def opa(self) -> "opa_t":
        return self._get_field(
            'opa', 
            'opa_t'
        )

    @opa.setter
    def opa(self, value: "opa_t"):
        self._set_field(
            'opa', 
            value, 
            'opa_t'
        )

    @property
    def start_value(self) -> "int32_t":
        return self._get_field(
            'start_value', 
            'int32_t'
        )

    @start_value.setter
    def start_value(self, value: "int32_t"):
        self._set_field(
            'start_value', 
            value, 
            'int32_t'
        )

    @property
    def end_value(self) -> "int32_t":
        return self._get_field(
            'end_value', 
            'int32_t'
        )

    @end_value.setter
    def end_value(self, value: "int32_t"):
        self._set_field(
            'end_value', 
            value, 
            'int32_t'
        )

    @property
    def type_data(self) -> "meter_indicator_type_data_t":
        return self._get_field(
            'type_data', 
            'meter_indicator_type_data_t'
        )

    @type_data.setter
    def type_data(self, value: "meter_indicator_type_data_t"):
        self._set_field(
            'type_data', 
            value, 
            'meter_indicator_type_data_t'
        )


class meter_scale_t(_StructUnion): 
    _c_type = 'lv_meter_scale_t *'

    def __init__(
        self, 
        /, 
        tick_color: Optional["color_t"] = _DefaultArg, 
        tick_cnt: Optional["uint16_t"] = 0, 
        tick_length: Optional["uint16_t"] = 0, 
        tick_width: Optional["uint16_t"] = 0, 
        tick_major_color: Optional["color_t"] = _DefaultArg, 
        tick_major_nth: Optional["uint16_t"] = 0, 
        tick_major_length: Optional["uint16_t"] = 0, 
        tick_major_width: Optional["uint16_t"] = 0, 
        label_gap: Optional["int16_t"] = 0, 
        label_color: Optional["int16_t"] = 0, 
        min: Optional["int32_t"] = 0, 
        max: Optional["int32_t"] = 0, 
        r_mod: Optional["int16_t"] = 0, 
        angle_range: Optional["uint16_t"] = 0, 
        rotation: Optional["int16_t"] = 0
    ):

        super().__init__(
            tick_color=tick_color, 
            tick_cnt=tick_cnt, 
            tick_length=tick_length, 
            tick_width=tick_width, 
            tick_major_color=tick_major_color, 
            tick_major_nth=tick_major_nth, 
            tick_major_length=tick_major_length, 
            tick_major_width=tick_major_width, 
            label_gap=label_gap, 
            label_color=label_color, 
            min=min, 
            max=max, 
            r_mod=r_mod, 
            angle_range=angle_range, 
            rotation=rotation
        )

    @property
    def tick_color(self) -> "color_t":
        return self._get_field(
            'tick_color', 
            'color_t'
        )

    @tick_color.setter
    def tick_color(self, value: "color_t"):
        self._set_field(
            'tick_color', 
            value, 
            'color_t'
        )

    @property
    def tick_cnt(self) -> "uint16_t":
        return self._get_field(
            'tick_cnt', 
            'uint16_t'
        )

    @tick_cnt.setter
    def tick_cnt(self, value: "uint16_t"):
        self._set_field(
            'tick_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def tick_length(self) -> "uint16_t":
        return self._get_field(
            'tick_length', 
            'uint16_t'
        )

    @tick_length.setter
    def tick_length(self, value: "uint16_t"):
        self._set_field(
            'tick_length', 
            value, 
            'uint16_t'
        )

    @property
    def tick_width(self) -> "uint16_t":
        return self._get_field(
            'tick_width', 
            'uint16_t'
        )

    @tick_width.setter
    def tick_width(self, value: "uint16_t"):
        self._set_field(
            'tick_width', 
            value, 
            'uint16_t'
        )

    @property
    def tick_major_color(self) -> "color_t":
        return self._get_field(
            'tick_major_color', 
            'color_t'
        )

    @tick_major_color.setter
    def tick_major_color(self, value: "color_t"):
        self._set_field(
            'tick_major_color', 
            value, 
            'color_t'
        )

    @property
    def tick_major_nth(self) -> "uint16_t":
        return self._get_field(
            'tick_major_nth', 
            'uint16_t'
        )

    @tick_major_nth.setter
    def tick_major_nth(self, value: "uint16_t"):
        self._set_field(
            'tick_major_nth', 
            value, 
            'uint16_t'
        )

    @property
    def tick_major_length(self) -> "uint16_t":
        return self._get_field(
            'tick_major_length', 
            'uint16_t'
        )

    @tick_major_length.setter
    def tick_major_length(self, value: "uint16_t"):
        self._set_field(
            'tick_major_length', 
            value, 
            'uint16_t'
        )

    @property
    def tick_major_width(self) -> "uint16_t":
        return self._get_field(
            'tick_major_width', 
            'uint16_t'
        )

    @tick_major_width.setter
    def tick_major_width(self, value: "uint16_t"):
        self._set_field(
            'tick_major_width', 
            value, 
            'uint16_t'
        )

    @property
    def label_gap(self) -> "int16_t":
        return self._get_field(
            'label_gap', 
            'int16_t'
        )

    @label_gap.setter
    def label_gap(self, value: "int16_t"):
        self._set_field(
            'label_gap', 
            value, 
            'int16_t'
        )

    @property
    def label_color(self) -> "int16_t":
        return self._get_field(
            'label_color', 
            'int16_t'
        )

    @label_color.setter
    def label_color(self, value: "int16_t"):
        self._set_field(
            'label_color', 
            value, 
            'int16_t'
        )

    @property
    def min(self) -> "int32_t":
        return self._get_field(
            'min', 
            'int32_t'
        )

    @min.setter
    def min(self, value: "int32_t"):
        self._set_field(
            'min', 
            value, 
            'int32_t'
        )

    @property
    def max(self) -> "int32_t":
        return self._get_field(
            'max', 
            'int32_t'
        )

    @max.setter
    def max(self, value: "int32_t"):
        self._set_field(
            'max', 
            value, 
            'int32_t'
        )

    @property
    def r_mod(self) -> "int16_t":
        return self._get_field(
            'r_mod', 
            'int16_t'
        )

    @r_mod.setter
    def r_mod(self, value: "int16_t"):
        self._set_field(
            'r_mod', 
            value, 
            'int16_t'
        )

    @property
    def angle_range(self) -> "uint16_t":
        return self._get_field(
            'angle_range', 
            'uint16_t'
        )

    @angle_range.setter
    def angle_range(self, value: "uint16_t"):
        self._set_field(
            'angle_range', 
            value, 
            'uint16_t'
        )

    @property
    def rotation(self) -> "int16_t":
        return self._get_field(
            'rotation', 
            'int16_t'
        )

    @rotation.setter
    def rotation(self, value: "int16_t"):
        self._set_field(
            'rotation', 
            value, 
            'int16_t'
        )


class meter_t(_StructUnion): 
    _c_type = 'lv_meter_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        scale: Optional["meter_scale_t"] = _DefaultArg, 
        indicator_ll: Optional["ll_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            scale=scale, 
            indicator_ll=indicator_ll
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def scale(self) -> "meter_scale_t":
        return self._get_field(
            'scale', 
            'meter_scale_t'
        )

    @scale.setter
    def scale(self, value: "meter_scale_t"):
        self._set_field(
            'scale', 
            value, 
            'meter_scale_t'
        )

    @property
    def indicator_ll(self) -> "ll_t":
        return self._get_field(
            'indicator_ll', 
            'll_t'
        )

    @indicator_ll.setter
    def indicator_ll(self, value: "ll_t"):
        self._set_field(
            'indicator_ll', 
            value, 
            'll_t'
        )


class msgbox_t(_StructUnion): 
    _c_type = 'lv_msgbox_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        title: Optional["obj_t"] = _DefaultArg, 
        close_btn: Optional["obj_t"] = _DefaultArg, 
        content: Optional["obj_t"] = _DefaultArg, 
        text: Optional["obj_t"] = _DefaultArg, 
        btns: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            title=title, 
            close_btn=close_btn, 
            content=content, 
            text=text, 
            btns=btns
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def title(self) -> "obj_t":
        return self._get_field(
            'title', 
            'obj_t'
        )

    @title.setter
    def title(self, value: "obj_t"):
        self._set_field(
            'title', 
            value, 
            'obj_t'
        )

    @property
    def close_btn(self) -> "obj_t":
        return self._get_field(
            'close_btn', 
            'obj_t'
        )

    @close_btn.setter
    def close_btn(self, value: "obj_t"):
        self._set_field(
            'close_btn', 
            value, 
            'obj_t'
        )

    @property
    def content(self) -> "obj_t":
        return self._get_field(
            'content', 
            'obj_t'
        )

    @content.setter
    def content(self, value: "obj_t"):
        self._set_field(
            'content', 
            value, 
            'obj_t'
        )

    @property
    def text(self) -> "obj_t":
        return self._get_field(
            'text', 
            'obj_t'
        )

    @text.setter
    def text(self, value: "obj_t"):
        self._set_field(
            'text', 
            value, 
            'obj_t'
        )

    @property
    def btns(self) -> "obj_t":
        return self._get_field(
            'btns', 
            'obj_t'
        )

    @btns.setter
    def btns(self, value: "obj_t"):
        self._set_field(
            'btns', 
            value, 
            'obj_t'
        )


class roller_t(_StructUnion): 
    _c_type = 'lv_roller_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        option_cnt: Optional["uint16_t"] = 0, 
        sel_opt_id: Optional["uint16_t"] = 0, 
        sel_opt_id_ori: Optional["uint16_t"] = 0, 
        inf_page_cnt: Optional["uint32_t"] = 0, 
        mode: Optional["roller_mode_t"] = _DefaultArg, 
        moved: Optional["uint32_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            option_cnt=option_cnt, 
            sel_opt_id=sel_opt_id, 
            sel_opt_id_ori=sel_opt_id_ori, 
            inf_page_cnt=inf_page_cnt, 
            mode=mode, 
            moved=moved
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def option_cnt(self) -> "uint16_t":
        return self._get_field(
            'option_cnt', 
            'uint16_t'
        )

    @option_cnt.setter
    def option_cnt(self, value: "uint16_t"):
        self._set_field(
            'option_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def sel_opt_id(self) -> "uint16_t":
        return self._get_field(
            'sel_opt_id', 
            'uint16_t'
        )

    @sel_opt_id.setter
    def sel_opt_id(self, value: "uint16_t"):
        self._set_field(
            'sel_opt_id', 
            value, 
            'uint16_t'
        )

    @property
    def sel_opt_id_ori(self) -> "uint16_t":
        return self._get_field(
            'sel_opt_id_ori', 
            'uint16_t'
        )

    @sel_opt_id_ori.setter
    def sel_opt_id_ori(self, value: "uint16_t"):
        self._set_field(
            'sel_opt_id_ori', 
            value, 
            'uint16_t'
        )

    @property
    def inf_page_cnt(self) -> "uint32_t":
        return self._get_field(
            'inf_page_cnt', 
            'uint32_t'
        )

    @inf_page_cnt.setter
    def inf_page_cnt(self, value: "uint32_t"):
        self._set_field(
            'inf_page_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def mode(self) -> "roller_mode_t":
        return self._get_field(
            'mode', 
            'roller_mode_t'
        )

    @mode.setter
    def mode(self, value: "roller_mode_t"):
        self._set_field(
            'mode', 
            value, 
            'roller_mode_t'
        )

    @property
    def moved(self) -> "uint32_t":
        return self._get_field(
            'moved', 
            'uint32_t'
        )

    @moved.setter
    def moved(self, value: "uint32_t"):
        self._set_field(
            'moved', 
            value, 
            'uint32_t'
        )


class slider_t(_StructUnion): 
    _c_type = 'lv_slider_t *'

    def __init__(
        self, 
        /, 
        bar: Optional["bar_t"] = _DefaultArg, 
        left_knob_area: Optional["area_t"] = _DefaultArg, 
        right_knob_area: Optional["area_t"] = _DefaultArg, 
        pressed_point: Optional["point_t"] = _DefaultArg, 
        value_to_set: Optional["int32_t"] = 0, 
        dragging: Optional["uint8_t"] = 0, 
        left_knob_focus: Optional["uint8_t"] = 0
    ):

        super().__init__(
            bar=bar, 
            left_knob_area=left_knob_area, 
            right_knob_area=right_knob_area, 
            pressed_point=pressed_point, 
            value_to_set=value_to_set, 
            dragging=dragging, 
            left_knob_focus=left_knob_focus
        )

    @property
    def bar(self) -> "bar_t":
        return self._get_field(
            'bar', 
            'bar_t'
        )

    @bar.setter
    def bar(self, value: "bar_t"):
        self._set_field(
            'bar', 
            value, 
            'bar_t'
        )

    @property
    def left_knob_area(self) -> "area_t":
        return self._get_field(
            'left_knob_area', 
            'area_t'
        )

    @left_knob_area.setter
    def left_knob_area(self, value: "area_t"):
        self._set_field(
            'left_knob_area', 
            value, 
            'area_t'
        )

    @property
    def right_knob_area(self) -> "area_t":
        return self._get_field(
            'right_knob_area', 
            'area_t'
        )

    @right_knob_area.setter
    def right_knob_area(self, value: "area_t"):
        self._set_field(
            'right_knob_area', 
            value, 
            'area_t'
        )

    @property
    def pressed_point(self) -> "point_t":
        return self._get_field(
            'pressed_point', 
            'point_t'
        )

    @pressed_point.setter
    def pressed_point(self, value: "point_t"):
        self._set_field(
            'pressed_point', 
            value, 
            'point_t'
        )

    @property
    def value_to_set(self) -> "int32_t":
        return self._get_field(
            'value_to_set', 
            'int32_t'
        )

    @value_to_set.setter
    def value_to_set(self, value: "int32_t"):
        self._set_field(
            'value_to_set', 
            value, 
            'int32_t'
        )

    @property
    def dragging(self) -> "uint8_t":
        return self._get_field(
            'dragging', 
            'uint8_t'
        )

    @dragging.setter
    def dragging(self, value: "uint8_t"):
        self._set_field(
            'dragging', 
            value, 
            'uint8_t'
        )

    @property
    def left_knob_focus(self) -> "uint8_t":
        return self._get_field(
            'left_knob_focus', 
            'uint8_t'
        )

    @left_knob_focus.setter
    def left_knob_focus(self, value: "uint8_t"):
        self._set_field(
            'left_knob_focus', 
            value, 
            'uint8_t'
        )


class span_t(_StructUnion): 
    _c_type = 'lv_span_t *'

    def __init__(
        self, 
        /, 
        txt: Optional["char"] = _DefaultArg, 
        spangroup: Optional["obj_t"] = _DefaultArg, 
        style: Optional["style_t"] = _DefaultArg, 
        static_flag: Optional["uint8_t"] = 0
    ):

        super().__init__(
            txt=txt, 
            spangroup=spangroup, 
            style=style, 
            static_flag=static_flag
        )

    @property
    def txt(self) -> "char":
        return self._get_field(
            'txt', 
            'char'
        )

    @txt.setter
    def txt(self, value: "char"):
        self._set_field(
            'txt', 
            value, 
            'char'
        )

    @property
    def spangroup(self) -> "obj_t":
        return self._get_field(
            'spangroup', 
            'obj_t'
        )

    @spangroup.setter
    def spangroup(self, value: "obj_t"):
        self._set_field(
            'spangroup', 
            value, 
            'obj_t'
        )

    @property
    def style(self) -> "style_t":
        return self._get_field(
            'style', 
            'style_t'
        )

    @style.setter
    def style(self, value: "style_t"):
        self._set_field(
            'style', 
            value, 
            'style_t'
        )

    @property
    def static_flag(self) -> "uint8_t":
        return self._get_field(
            'static_flag', 
            'uint8_t'
        )

    @static_flag.setter
    def static_flag(self, value: "uint8_t"):
        self._set_field(
            'static_flag', 
            value, 
            'uint8_t'
        )


class spangroup_t(_StructUnion): 
    _c_type = 'lv_spangroup_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        lines: Optional["int32_t"] = 0, 
        indent: Optional["coord_t"] = _DefaultArg, 
        cache_w: Optional["coord_t"] = _DefaultArg, 
        cache_h: Optional["coord_t"] = _DefaultArg, 
        child_ll: Optional["ll_t"] = _DefaultArg, 
        mode: Optional["uint8_t"] = 0, 
        overflow: Optional["uint8_t"] = 0, 
        refresh: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            lines=lines, 
            indent=indent, 
            cache_w=cache_w, 
            cache_h=cache_h, 
            child_ll=child_ll, 
            mode=mode, 
            overflow=overflow, 
            refresh=refresh
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def lines(self) -> "int32_t":
        return self._get_field(
            'lines', 
            'int32_t'
        )

    @lines.setter
    def lines(self, value: "int32_t"):
        self._set_field(
            'lines', 
            value, 
            'int32_t'
        )

    @property
    def indent(self) -> "coord_t":
        return self._get_field(
            'indent', 
            'coord_t'
        )

    @indent.setter
    def indent(self, value: "coord_t"):
        self._set_field(
            'indent', 
            value, 
            'coord_t'
        )

    @property
    def cache_w(self) -> "coord_t":
        return self._get_field(
            'cache_w', 
            'coord_t'
        )

    @cache_w.setter
    def cache_w(self, value: "coord_t"):
        self._set_field(
            'cache_w', 
            value, 
            'coord_t'
        )

    @property
    def cache_h(self) -> "coord_t":
        return self._get_field(
            'cache_h', 
            'coord_t'
        )

    @cache_h.setter
    def cache_h(self, value: "coord_t"):
        self._set_field(
            'cache_h', 
            value, 
            'coord_t'
        )

    @property
    def child_ll(self) -> "ll_t":
        return self._get_field(
            'child_ll', 
            'll_t'
        )

    @child_ll.setter
    def child_ll(self, value: "ll_t"):
        self._set_field(
            'child_ll', 
            value, 
            'll_t'
        )

    @property
    def mode(self) -> "uint8_t":
        return self._get_field(
            'mode', 
            'uint8_t'
        )

    @mode.setter
    def mode(self, value: "uint8_t"):
        self._set_field(
            'mode', 
            value, 
            'uint8_t'
        )

    @property
    def overflow(self) -> "uint8_t":
        return self._get_field(
            'overflow', 
            'uint8_t'
        )

    @overflow.setter
    def overflow(self, value: "uint8_t"):
        self._set_field(
            'overflow', 
            value, 
            'uint8_t'
        )

    @property
    def refresh(self) -> "uint8_t":
        return self._get_field(
            'refresh', 
            'uint8_t'
        )

    @refresh.setter
    def refresh(self, value: "uint8_t"):
        self._set_field(
            'refresh', 
            value, 
            'uint8_t'
        )


class textarea_cursor_t(_StructUnion): 
    _c_type = 'lv_textarea_cursor_t *'

    def __init__(
        self, 
        /, 
        valid_x: Optional["coord_t"] = _DefaultArg, 
        pos: Optional["uint32_t"] = 0, 
        area: Optional["area_t"] = _DefaultArg, 
        txt_byte_pos: Optional["uint32_t"] = 0, 
        show: Optional["uint8_t"] = 0, 
        click_pos: Optional["uint8_t"] = 0
    ):

        super().__init__(
            valid_x=valid_x, 
            pos=pos, 
            area=area, 
            txt_byte_pos=txt_byte_pos, 
            show=show, 
            click_pos=click_pos
        )

    @property
    def valid_x(self) -> "coord_t":
        return self._get_field(
            'valid_x', 
            'coord_t'
        )

    @valid_x.setter
    def valid_x(self, value: "coord_t"):
        self._set_field(
            'valid_x', 
            value, 
            'coord_t'
        )

    @property
    def pos(self) -> "uint32_t":
        return self._get_field(
            'pos', 
            'uint32_t'
        )

    @pos.setter
    def pos(self, value: "uint32_t"):
        self._set_field(
            'pos', 
            value, 
            'uint32_t'
        )

    @property
    def area(self) -> "area_t":
        return self._get_field(
            'area', 
            'area_t'
        )

    @area.setter
    def area(self, value: "area_t"):
        self._set_field(
            'area', 
            value, 
            'area_t'
        )

    @property
    def txt_byte_pos(self) -> "uint32_t":
        return self._get_field(
            'txt_byte_pos', 
            'uint32_t'
        )

    @txt_byte_pos.setter
    def txt_byte_pos(self, value: "uint32_t"):
        self._set_field(
            'txt_byte_pos', 
            value, 
            'uint32_t'
        )

    @property
    def show(self) -> "uint8_t":
        return self._get_field(
            'show', 
            'uint8_t'
        )

    @show.setter
    def show(self, value: "uint8_t"):
        self._set_field(
            'show', 
            value, 
            'uint8_t'
        )

    @property
    def click_pos(self) -> "uint8_t":
        return self._get_field(
            'click_pos', 
            'uint8_t'
        )

    @click_pos.setter
    def click_pos(self, value: "uint8_t"):
        self._set_field(
            'click_pos', 
            value, 
            'uint8_t'
        )


class textarea_t(_StructUnion): 
    _c_type = 'lv_textarea_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        label: Optional["obj_t"] = _DefaultArg, 
        placeholder_txt: Optional["char"] = _DefaultArg, 
        pwd_tmp: Optional["char"] = _DefaultArg, 
        pwd_bullet: Optional["char"] = _DefaultArg, 
        accepted_chars: Optional["char"] = _DefaultArg, 
        max_length: Optional["uint32_t"] = 0, 
        pwd_show_time: Optional["uint16_t"] = 0, 
        cursor: Optional["textarea_cursor_t"] = _DefaultArg, 
        sel_start: Optional["uint32_t"] = 0, 
        sel_end: Optional["uint32_t"] = 0, 
        text_sel_in_prog: Optional["uint8_t"] = 0, 
        text_sel_en: Optional["uint8_t"] = 0, 
        pwd_mode: Optional["uint8_t"] = 0, 
        one_line: Optional["uint8_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            label=label, 
            placeholder_txt=placeholder_txt, 
            pwd_tmp=pwd_tmp, 
            pwd_bullet=pwd_bullet, 
            accepted_chars=accepted_chars, 
            max_length=max_length, 
            pwd_show_time=pwd_show_time, 
            cursor=cursor, 
            sel_start=sel_start, 
            sel_end=sel_end, 
            text_sel_in_prog=text_sel_in_prog, 
            text_sel_en=text_sel_en, 
            pwd_mode=pwd_mode, 
            one_line=one_line
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def label(self) -> "obj_t":
        return self._get_field(
            'label', 
            'obj_t'
        )

    @label.setter
    def label(self, value: "obj_t"):
        self._set_field(
            'label', 
            value, 
            'obj_t'
        )

    @property
    def placeholder_txt(self) -> "char":
        return self._get_field(
            'placeholder_txt', 
            'char'
        )

    @placeholder_txt.setter
    def placeholder_txt(self, value: "char"):
        self._set_field(
            'placeholder_txt', 
            value, 
            'char'
        )

    @property
    def pwd_tmp(self) -> "char":
        return self._get_field(
            'pwd_tmp', 
            'char'
        )

    @pwd_tmp.setter
    def pwd_tmp(self, value: "char"):
        self._set_field(
            'pwd_tmp', 
            value, 
            'char'
        )

    @property
    def pwd_bullet(self) -> "char":
        return self._get_field(
            'pwd_bullet', 
            'char'
        )

    @pwd_bullet.setter
    def pwd_bullet(self, value: "char"):
        self._set_field(
            'pwd_bullet', 
            value, 
            'char'
        )

    @property
    def accepted_chars(self) -> "char":
        return self._get_field(
            'accepted_chars', 
            'char'
        )

    @accepted_chars.setter
    def accepted_chars(self, value: "char"):
        self._set_field(
            'accepted_chars', 
            value, 
            'char'
        )

    @property
    def max_length(self) -> "uint32_t":
        return self._get_field(
            'max_length', 
            'uint32_t'
        )

    @max_length.setter
    def max_length(self, value: "uint32_t"):
        self._set_field(
            'max_length', 
            value, 
            'uint32_t'
        )

    @property
    def pwd_show_time(self) -> "uint16_t":
        return self._get_field(
            'pwd_show_time', 
            'uint16_t'
        )

    @pwd_show_time.setter
    def pwd_show_time(self, value: "uint16_t"):
        self._set_field(
            'pwd_show_time', 
            value, 
            'uint16_t'
        )

    @property
    def cursor(self) -> "textarea_cursor_t":
        return self._get_field(
            'cursor', 
            'textarea_cursor_t'
        )

    @cursor.setter
    def cursor(self, value: "textarea_cursor_t"):
        self._set_field(
            'cursor', 
            value, 
            'textarea_cursor_t'
        )

    @property
    def sel_start(self) -> "uint32_t":
        return self._get_field(
            'sel_start', 
            'uint32_t'
        )

    @sel_start.setter
    def sel_start(self, value: "uint32_t"):
        self._set_field(
            'sel_start', 
            value, 
            'uint32_t'
        )

    @property
    def sel_end(self) -> "uint32_t":
        return self._get_field(
            'sel_end', 
            'uint32_t'
        )

    @sel_end.setter
    def sel_end(self, value: "uint32_t"):
        self._set_field(
            'sel_end', 
            value, 
            'uint32_t'
        )

    @property
    def text_sel_in_prog(self) -> "uint8_t":
        return self._get_field(
            'text_sel_in_prog', 
            'uint8_t'
        )

    @text_sel_in_prog.setter
    def text_sel_in_prog(self, value: "uint8_t"):
        self._set_field(
            'text_sel_in_prog', 
            value, 
            'uint8_t'
        )

    @property
    def text_sel_en(self) -> "uint8_t":
        return self._get_field(
            'text_sel_en', 
            'uint8_t'
        )

    @text_sel_en.setter
    def text_sel_en(self, value: "uint8_t"):
        self._set_field(
            'text_sel_en', 
            value, 
            'uint8_t'
        )

    @property
    def pwd_mode(self) -> "uint8_t":
        return self._get_field(
            'pwd_mode', 
            'uint8_t'
        )

    @pwd_mode.setter
    def pwd_mode(self, value: "uint8_t"):
        self._set_field(
            'pwd_mode', 
            value, 
            'uint8_t'
        )

    @property
    def one_line(self) -> "uint8_t":
        return self._get_field(
            'one_line', 
            'uint8_t'
        )

    @one_line.setter
    def one_line(self, value: "uint8_t"):
        self._set_field(
            'one_line', 
            value, 
            'uint8_t'
        )


class spinbox_t(_StructUnion): 
    _c_type = 'lv_spinbox_t *'

    def __init__(
        self, 
        /, 
        ta: Optional["textarea_t"] = _DefaultArg, 
        value: Optional["int32_t"] = 0, 
        range_max: Optional["int32_t"] = 0, 
        range_min: Optional["int32_t"] = 0, 
        step: Optional["int32_t"] = 0, 
        digit_count: Optional["uint16_t"] = 0, 
        dec_point_pos: Optional["uint16_t"] = 0, 
        rollover: Optional["uint16_t"] = 0, 
        digit_step_dir: Optional["uint16_t"] = 0
    ):

        super().__init__(
            ta=ta, 
            value=value, 
            range_max=range_max, 
            range_min=range_min, 
            step=step, 
            digit_count=digit_count, 
            dec_point_pos=dec_point_pos, 
            rollover=rollover, 
            digit_step_dir=digit_step_dir
        )

    @property
    def ta(self) -> "textarea_t":
        return self._get_field(
            'ta', 
            'textarea_t'
        )

    @ta.setter
    def ta(self, value: "textarea_t"):
        self._set_field(
            'ta', 
            value, 
            'textarea_t'
        )

    @property
    def value(self) -> "int32_t":
        return self._get_field(
            'value', 
            'int32_t'
        )

    @value.setter
    def value(self, value: "int32_t"):
        self._set_field(
            'value', 
            value, 
            'int32_t'
        )

    @property
    def range_max(self) -> "int32_t":
        return self._get_field(
            'range_max', 
            'int32_t'
        )

    @range_max.setter
    def range_max(self, value: "int32_t"):
        self._set_field(
            'range_max', 
            value, 
            'int32_t'
        )

    @property
    def range_min(self) -> "int32_t":
        return self._get_field(
            'range_min', 
            'int32_t'
        )

    @range_min.setter
    def range_min(self, value: "int32_t"):
        self._set_field(
            'range_min', 
            value, 
            'int32_t'
        )

    @property
    def step(self) -> "int32_t":
        return self._get_field(
            'step', 
            'int32_t'
        )

    @step.setter
    def step(self, value: "int32_t"):
        self._set_field(
            'step', 
            value, 
            'int32_t'
        )

    @property
    def digit_count(self) -> "uint16_t":
        return self._get_field(
            'digit_count', 
            'uint16_t'
        )

    @digit_count.setter
    def digit_count(self, value: "uint16_t"):
        self._set_field(
            'digit_count', 
            value, 
            'uint16_t'
        )

    @property
    def dec_point_pos(self) -> "uint16_t":
        return self._get_field(
            'dec_point_pos', 
            'uint16_t'
        )

    @dec_point_pos.setter
    def dec_point_pos(self, value: "uint16_t"):
        self._set_field(
            'dec_point_pos', 
            value, 
            'uint16_t'
        )

    @property
    def rollover(self) -> "uint16_t":
        return self._get_field(
            'rollover', 
            'uint16_t'
        )

    @rollover.setter
    def rollover(self, value: "uint16_t"):
        self._set_field(
            'rollover', 
            value, 
            'uint16_t'
        )

    @property
    def digit_step_dir(self) -> "uint16_t":
        return self._get_field(
            'digit_step_dir', 
            'uint16_t'
        )

    @digit_step_dir.setter
    def digit_step_dir(self, value: "uint16_t"):
        self._set_field(
            'digit_step_dir', 
            value, 
            'uint16_t'
        )


class switch_t(_StructUnion): 
    _c_type = 'lv_switch_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        anim_state: Optional["int32_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            anim_state=anim_state
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def anim_state(self) -> "int32_t":
        return self._get_field(
            'anim_state', 
            'int32_t'
        )

    @anim_state.setter
    def anim_state(self, value: "int32_t"):
        self._set_field(
            'anim_state', 
            value, 
            'int32_t'
        )


class table_t(_StructUnion): 
    _c_type = 'lv_table_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        col_cnt: Optional["uint16_t"] = 0, 
        row_cnt: Optional["uint16_t"] = 0, 
        cell_data: Optional["char"] = _DefaultArg, 
        row_h: Optional["coord_t"] = _DefaultArg, 
        col_w: Optional["coord_t"] = _DefaultArg, 
        col_act: Optional["uint16_t"] = 0, 
        row_act: Optional["uint16_t"] = 0
    ):

        super().__init__(
            obj=obj, 
            col_cnt=col_cnt, 
            row_cnt=row_cnt, 
            cell_data=cell_data, 
            row_h=row_h, 
            col_w=col_w, 
            col_act=col_act, 
            row_act=row_act
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def col_cnt(self) -> "uint16_t":
        return self._get_field(
            'col_cnt', 
            'uint16_t'
        )

    @col_cnt.setter
    def col_cnt(self, value: "uint16_t"):
        self._set_field(
            'col_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def row_cnt(self) -> "uint16_t":
        return self._get_field(
            'row_cnt', 
            'uint16_t'
        )

    @row_cnt.setter
    def row_cnt(self, value: "uint16_t"):
        self._set_field(
            'row_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def cell_data(self) -> "char":
        return self._get_field(
            'cell_data', 
            'char'
        )

    @cell_data.setter
    def cell_data(self, value: "char"):
        self._set_field(
            'cell_data', 
            value, 
            'char'
        )

    @property
    def row_h(self) -> "coord_t":
        return self._get_field(
            'row_h', 
            'coord_t'
        )

    @row_h.setter
    def row_h(self, value: "coord_t"):
        self._set_field(
            'row_h', 
            value, 
            'coord_t'
        )

    @property
    def col_w(self) -> "coord_t":
        return self._get_field(
            'col_w', 
            'coord_t'
        )

    @col_w.setter
    def col_w(self, value: "coord_t"):
        self._set_field(
            'col_w', 
            value, 
            'coord_t'
        )

    @property
    def col_act(self) -> "uint16_t":
        return self._get_field(
            'col_act', 
            'uint16_t'
        )

    @col_act.setter
    def col_act(self, value: "uint16_t"):
        self._set_field(
            'col_act', 
            value, 
            'uint16_t'
        )

    @property
    def row_act(self) -> "uint16_t":
        return self._get_field(
            'row_act', 
            'uint16_t'
        )

    @row_act.setter
    def row_act(self, value: "uint16_t"):
        self._set_field(
            'row_act', 
            value, 
            'uint16_t'
        )


class tabview_t(_StructUnion): 
    _c_type = 'lv_tabview_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        map: Optional["char"] = _DefaultArg, 
        tab_cnt: Optional["uint16_t"] = 0, 
        tab_cur: Optional["uint16_t"] = 0, 
        tab_pos: Optional["dir_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            map=map, 
            tab_cnt=tab_cnt, 
            tab_cur=tab_cur, 
            tab_pos=tab_pos
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def map(self) -> "char":
        return self._get_field(
            'map', 
            'char'
        )

    @map.setter
    def map(self, value: "char"):
        self._set_field(
            'map', 
            value, 
            'char'
        )

    @property
    def tab_cnt(self) -> "uint16_t":
        return self._get_field(
            'tab_cnt', 
            'uint16_t'
        )

    @tab_cnt.setter
    def tab_cnt(self, value: "uint16_t"):
        self._set_field(
            'tab_cnt', 
            value, 
            'uint16_t'
        )

    @property
    def tab_cur(self) -> "uint16_t":
        return self._get_field(
            'tab_cur', 
            'uint16_t'
        )

    @tab_cur.setter
    def tab_cur(self, value: "uint16_t"):
        self._set_field(
            'tab_cur', 
            value, 
            'uint16_t'
        )

    @property
    def tab_pos(self) -> "dir_t":
        return self._get_field(
            'tab_pos', 
            'dir_t'
        )

    @tab_pos.setter
    def tab_pos(self, value: "dir_t"):
        self._set_field(
            'tab_pos', 
            value, 
            'dir_t'
        )


class tileview_t(_StructUnion): 
    _c_type = 'lv_tileview_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        tile_act: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            tile_act=tile_act
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def tile_act(self) -> "obj_t":
        return self._get_field(
            'tile_act', 
            'obj_t'
        )

    @tile_act.setter
    def tile_act(self, value: "obj_t"):
        self._set_field(
            'tile_act', 
            value, 
            'obj_t'
        )


class tileview_tile_t(_StructUnion): 
    _c_type = 'lv_tileview_tile_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        dir: Optional["dir_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            dir=dir
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def dir(self) -> "dir_t":
        return self._get_field(
            'dir', 
            'dir_t'
        )

    @dir.setter
    def dir(self, value: "dir_t"):
        self._set_field(
            'dir', 
            value, 
            'dir_t'
        )


class win_t(_StructUnion): 
    _c_type = 'lv_win_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )


class msg_t(_StructUnion): 
    _c_type = 'lv_msg_t *'

    def __init__(
        self, 
        /, 
        id: Optional["msg_id_t"] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        _priv_data: Optional[Any] = _DefaultArg, 
        payload: Optional[Any] = _DefaultArg
    ):

        super().__init__(
            id=id, 
            user_data=user_data, 
            _priv_data=_priv_data, 
            payload=payload
        )

    @property
    def id(self) -> "msg_id_t":
        return self._get_field(
            'id', 
            'msg_id_t'
        )

    @id.setter
    def id(self, value: "msg_id_t"):
        self._set_field(
            'id', 
            value, 
            'msg_id_t'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def _priv_data(self) -> Any:
        return self._get_field(
            '_priv_data', 
            'void'
        )

    @_priv_data.setter
    def _priv_data(self, value: Any):
        self._set_field(
            '_priv_data', 
            value, 
            'void'
        )

    @property
    def payload(self) -> Any:
        return self._get_field(
            'payload', 
            'void'
        )

    @payload.setter
    def payload(self, value: Any):
        self._set_field(
            'payload', 
            value, 
            'void'
        )


class pinyin_dict_t(_StructUnion): 
    _c_type = 'lv_pinyin_dict_t *'

    def __init__(
        self, 
        /, 
        py: Optional["char"] = _DefaultArg, 
        py_mb: Optional["char"] = _DefaultArg
    ):

        super().__init__(
            py=py, 
            py_mb=py_mb
        )

    @property
    def py(self) -> "char":
        return self._get_field(
            'py', 
            'char'
        )

    @py.setter
    def py(self, value: "char"):
        self._set_field(
            'py', 
            value, 
            'char'
        )

    @property
    def py_mb(self) -> "char":
        return self._get_field(
            'py_mb', 
            'char'
        )

    @py_mb.setter
    def py_mb(self, value: "char"):
        self._set_field(
            'py_mb', 
            value, 
            'char'
        )


class ime_pinyin_k9_py_str_t(_StructUnion): 
    _c_type = 'ime_pinyin_k9_py_str_t *'

    def __init__(
        self, 
        /, 
        py_str: Optional[List["char"]] = _DefaultArg
    ):

        super().__init__(
            py_str=py_str
        )

    @property
    def py_str(self) -> List["char"]:
        return self._get_field(
            'py_str', 
            'List[char]'
        )

    @py_str.setter
    def py_str(self, value: List["char"]):
        self._set_field(
            'py_str', 
            value, 
            'List[char]'
        )


class ime_pinyin_t(_StructUnion): 
    _c_type = 'lv_ime_pinyin_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        kb: Optional["obj_t"] = _DefaultArg, 
        cand_panel: Optional["obj_t"] = _DefaultArg, 
        dict: Optional["pinyin_dict_t"] = _DefaultArg, 
        k9_legal_py_ll: Optional["ll_t"] = _DefaultArg, 
        cand_str: Optional["char"] = _DefaultArg, 
        input_char: Optional[List["char"]] = _DefaultArg, 
        k9_input_str: Optional[List["char"]] = _DefaultArg, 
        k9_py_ll_pos: Optional["uint16_t"] = 0, 
        k9_legal_py_count: Optional["uint16_t"] = 0, 
        k9_input_str_len: Optional["uint16_t"] = 0, 
        ta_count: Optional["uint16_t"] = 0, 
        cand_num: Optional["uint16_t"] = 0, 
        py_page: Optional["uint16_t"] = 0, 
        py_num: Optional[List["uint16_t"]] = _DefaultArg, 
        py_pos: Optional[List["uint16_t"]] = _DefaultArg, 
        mode: Optional["ime_pinyin_mode_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            kb=kb, 
            cand_panel=cand_panel, 
            dict=dict, 
            k9_legal_py_ll=k9_legal_py_ll, 
            cand_str=cand_str, 
            input_char=input_char, 
            k9_input_str=k9_input_str, 
            k9_py_ll_pos=k9_py_ll_pos, 
            k9_legal_py_count=k9_legal_py_count, 
            k9_input_str_len=k9_input_str_len, 
            ta_count=ta_count, 
            cand_num=cand_num, 
            py_page=py_page, 
            py_num=py_num, 
            py_pos=py_pos, 
            mode=mode
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def kb(self) -> "obj_t":
        return self._get_field(
            'kb', 
            'obj_t'
        )

    @kb.setter
    def kb(self, value: "obj_t"):
        self._set_field(
            'kb', 
            value, 
            'obj_t'
        )

    @property
    def cand_panel(self) -> "obj_t":
        return self._get_field(
            'cand_panel', 
            'obj_t'
        )

    @cand_panel.setter
    def cand_panel(self, value: "obj_t"):
        self._set_field(
            'cand_panel', 
            value, 
            'obj_t'
        )

    @property
    def dict(self) -> "pinyin_dict_t":
        return self._get_field(
            'dict', 
            'pinyin_dict_t'
        )

    @dict.setter
    def dict(self, value: "pinyin_dict_t"):
        self._set_field(
            'dict', 
            value, 
            'pinyin_dict_t'
        )

    @property
    def k9_legal_py_ll(self) -> "ll_t":
        return self._get_field(
            'k9_legal_py_ll', 
            'll_t'
        )

    @k9_legal_py_ll.setter
    def k9_legal_py_ll(self, value: "ll_t"):
        self._set_field(
            'k9_legal_py_ll', 
            value, 
            'll_t'
        )

    @property
    def cand_str(self) -> "char":
        return self._get_field(
            'cand_str', 
            'char'
        )

    @cand_str.setter
    def cand_str(self, value: "char"):
        self._set_field(
            'cand_str', 
            value, 
            'char'
        )

    @property
    def input_char(self) -> List["char"]:
        return self._get_field(
            'input_char', 
            'List[char]'
        )

    @input_char.setter
    def input_char(self, value: List["char"]):
        self._set_field(
            'input_char', 
            value, 
            'List[char]'
        )

    @property
    def k9_input_str(self) -> List["char"]:
        return self._get_field(
            'k9_input_str', 
            'List[char]'
        )

    @k9_input_str.setter
    def k9_input_str(self, value: List["char"]):
        self._set_field(
            'k9_input_str', 
            value, 
            'List[char]'
        )

    @property
    def k9_py_ll_pos(self) -> "uint16_t":
        return self._get_field(
            'k9_py_ll_pos', 
            'uint16_t'
        )

    @k9_py_ll_pos.setter
    def k9_py_ll_pos(self, value: "uint16_t"):
        self._set_field(
            'k9_py_ll_pos', 
            value, 
            'uint16_t'
        )

    @property
    def k9_legal_py_count(self) -> "uint16_t":
        return self._get_field(
            'k9_legal_py_count', 
            'uint16_t'
        )

    @k9_legal_py_count.setter
    def k9_legal_py_count(self, value: "uint16_t"):
        self._set_field(
            'k9_legal_py_count', 
            value, 
            'uint16_t'
        )

    @property
    def k9_input_str_len(self) -> "uint16_t":
        return self._get_field(
            'k9_input_str_len', 
            'uint16_t'
        )

    @k9_input_str_len.setter
    def k9_input_str_len(self, value: "uint16_t"):
        self._set_field(
            'k9_input_str_len', 
            value, 
            'uint16_t'
        )

    @property
    def ta_count(self) -> "uint16_t":
        return self._get_field(
            'ta_count', 
            'uint16_t'
        )

    @ta_count.setter
    def ta_count(self, value: "uint16_t"):
        self._set_field(
            'ta_count', 
            value, 
            'uint16_t'
        )

    @property
    def cand_num(self) -> "uint16_t":
        return self._get_field(
            'cand_num', 
            'uint16_t'
        )

    @cand_num.setter
    def cand_num(self, value: "uint16_t"):
        self._set_field(
            'cand_num', 
            value, 
            'uint16_t'
        )

    @property
    def py_page(self) -> "uint16_t":
        return self._get_field(
            'py_page', 
            'uint16_t'
        )

    @py_page.setter
    def py_page(self, value: "uint16_t"):
        self._set_field(
            'py_page', 
            value, 
            'uint16_t'
        )

    @property
    def py_num(self) -> List["uint16_t"]:
        return self._get_field(
            'py_num', 
            'List[uint16_t]'
        )

    @py_num.setter
    def py_num(self, value: List["uint16_t"]):
        self._set_field(
            'py_num', 
            value, 
            'List[uint16_t]'
        )

    @property
    def py_pos(self) -> List["uint16_t"]:
        return self._get_field(
            'py_pos', 
            'List[uint16_t]'
        )

    @py_pos.setter
    def py_pos(self, value: List["uint16_t"]):
        self._set_field(
            'py_pos', 
            value, 
            'List[uint16_t]'
        )

    @property
    def mode(self) -> "ime_pinyin_mode_t":
        return self._get_field(
            'mode', 
            'ime_pinyin_mode_t'
        )

    @mode.setter
    def mode(self, value: "ime_pinyin_mode_t"):
        self._set_field(
            'mode', 
            value, 
            'ime_pinyin_mode_t'
        )


class file_explorer_t(_StructUnion): 
    _c_type = 'lv_file_explorer_t *'

    def __init__(
        self, 
        /, 
        obj: Optional["obj_t"] = _DefaultArg, 
        cont: Optional["obj_t"] = _DefaultArg, 
        head_area: Optional["obj_t"] = _DefaultArg, 
        browser_area: Optional["obj_t"] = _DefaultArg, 
        file_table: Optional["obj_t"] = _DefaultArg, 
        path_label: Optional["obj_t"] = _DefaultArg, 
        quick_access_area: Optional["obj_t"] = _DefaultArg, 
        list_device: Optional["obj_t"] = _DefaultArg, 
        list_places: Optional["obj_t"] = _DefaultArg, 
        home_dir: Optional["char"] = _DefaultArg, 
        music_dir: Optional["char"] = _DefaultArg, 
        pictures_dir: Optional["char"] = _DefaultArg, 
        video_dir: Optional["char"] = _DefaultArg, 
        docs_dir: Optional["char"] = _DefaultArg, 
        fs_dir: Optional["char"] = _DefaultArg, 
        sel_fn: Optional["char"] = _DefaultArg, 
        current_path: Optional[List["char"]] = _DefaultArg, 
        sort: Optional["file_explorer_sort_t"] = _DefaultArg
    ):

        super().__init__(
            obj=obj, 
            cont=cont, 
            head_area=head_area, 
            browser_area=browser_area, 
            file_table=file_table, 
            path_label=path_label, 
            quick_access_area=quick_access_area, 
            list_device=list_device, 
            list_places=list_places, 
            home_dir=home_dir, 
            music_dir=music_dir, 
            pictures_dir=pictures_dir, 
            video_dir=video_dir, 
            docs_dir=docs_dir, 
            fs_dir=fs_dir, 
            sel_fn=sel_fn, 
            current_path=current_path, 
            sort=sort
        )

    @property
    def obj(self) -> "obj_t":
        return self._get_field(
            'obj', 
            'obj_t'
        )

    @obj.setter
    def obj(self, value: "obj_t"):
        self._set_field(
            'obj', 
            value, 
            'obj_t'
        )

    @property
    def cont(self) -> "obj_t":
        return self._get_field(
            'cont', 
            'obj_t'
        )

    @cont.setter
    def cont(self, value: "obj_t"):
        self._set_field(
            'cont', 
            value, 
            'obj_t'
        )

    @property
    def head_area(self) -> "obj_t":
        return self._get_field(
            'head_area', 
            'obj_t'
        )

    @head_area.setter
    def head_area(self, value: "obj_t"):
        self._set_field(
            'head_area', 
            value, 
            'obj_t'
        )

    @property
    def browser_area(self) -> "obj_t":
        return self._get_field(
            'browser_area', 
            'obj_t'
        )

    @browser_area.setter
    def browser_area(self, value: "obj_t"):
        self._set_field(
            'browser_area', 
            value, 
            'obj_t'
        )

    @property
    def file_table(self) -> "obj_t":
        return self._get_field(
            'file_table', 
            'obj_t'
        )

    @file_table.setter
    def file_table(self, value: "obj_t"):
        self._set_field(
            'file_table', 
            value, 
            'obj_t'
        )

    @property
    def path_label(self) -> "obj_t":
        return self._get_field(
            'path_label', 
            'obj_t'
        )

    @path_label.setter
    def path_label(self, value: "obj_t"):
        self._set_field(
            'path_label', 
            value, 
            'obj_t'
        )

    @property
    def quick_access_area(self) -> "obj_t":
        return self._get_field(
            'quick_access_area', 
            'obj_t'
        )

    @quick_access_area.setter
    def quick_access_area(self, value: "obj_t"):
        self._set_field(
            'quick_access_area', 
            value, 
            'obj_t'
        )

    @property
    def list_device(self) -> "obj_t":
        return self._get_field(
            'list_device', 
            'obj_t'
        )

    @list_device.setter
    def list_device(self, value: "obj_t"):
        self._set_field(
            'list_device', 
            value, 
            'obj_t'
        )

    @property
    def list_places(self) -> "obj_t":
        return self._get_field(
            'list_places', 
            'obj_t'
        )

    @list_places.setter
    def list_places(self, value: "obj_t"):
        self._set_field(
            'list_places', 
            value, 
            'obj_t'
        )

    @property
    def home_dir(self) -> "char":
        return self._get_field(
            'home_dir', 
            'char'
        )

    @home_dir.setter
    def home_dir(self, value: "char"):
        self._set_field(
            'home_dir', 
            value, 
            'char'
        )

    @property
    def music_dir(self) -> "char":
        return self._get_field(
            'music_dir', 
            'char'
        )

    @music_dir.setter
    def music_dir(self, value: "char"):
        self._set_field(
            'music_dir', 
            value, 
            'char'
        )

    @property
    def pictures_dir(self) -> "char":
        return self._get_field(
            'pictures_dir', 
            'char'
        )

    @pictures_dir.setter
    def pictures_dir(self, value: "char"):
        self._set_field(
            'pictures_dir', 
            value, 
            'char'
        )

    @property
    def video_dir(self) -> "char":
        return self._get_field(
            'video_dir', 
            'char'
        )

    @video_dir.setter
    def video_dir(self, value: "char"):
        self._set_field(
            'video_dir', 
            value, 
            'char'
        )

    @property
    def docs_dir(self) -> "char":
        return self._get_field(
            'docs_dir', 
            'char'
        )

    @docs_dir.setter
    def docs_dir(self, value: "char"):
        self._set_field(
            'docs_dir', 
            value, 
            'char'
        )

    @property
    def fs_dir(self) -> "char":
        return self._get_field(
            'fs_dir', 
            'char'
        )

    @fs_dir.setter
    def fs_dir(self, value: "char"):
        self._set_field(
            'fs_dir', 
            value, 
            'char'
        )

    @property
    def sel_fn(self) -> "char":
        return self._get_field(
            'sel_fn', 
            'char'
        )

    @sel_fn.setter
    def sel_fn(self, value: "char"):
        self._set_field(
            'sel_fn', 
            value, 
            'char'
        )

    @property
    def current_path(self) -> List["char"]:
        return self._get_field(
            'current_path', 
            'List[char]'
        )

    @current_path.setter
    def current_path(self, value: List["char"]):
        self._set_field(
            'current_path', 
            value, 
            'List[char]'
        )

    @property
    def sort(self) -> "file_explorer_sort_t":
        return self._get_field(
            'sort', 
            'file_explorer_sort_t'
        )

    @sort.setter
    def sort(self, value: "file_explorer_sort_t"):
        self._set_field(
            'sort', 
            value, 
            'file_explorer_sort_t'
        )


class barcode_t(_StructUnion): 
    _c_type = 'lv_barcode_t *'

    def __init__(
        self, 
        /, 
        canvas: Optional["canvas_t"] = _DefaultArg, 
        dark_color: Optional["color32_t"] = _DefaultArg, 
        light_color: Optional["color32_t"] = _DefaultArg, 
        scale: Optional["uint16_t"] = 0
    ):

        super().__init__(
            canvas=canvas, 
            dark_color=dark_color, 
            light_color=light_color, 
            scale=scale
        )

    @property
    def canvas(self) -> "canvas_t":
        return self._get_field(
            'canvas', 
            'canvas_t'
        )

    @canvas.setter
    def canvas(self, value: "canvas_t"):
        self._set_field(
            'canvas', 
            value, 
            'canvas_t'
        )

    @property
    def dark_color(self) -> "color32_t":
        return self._get_field(
            'dark_color', 
            'color32_t'
        )

    @dark_color.setter
    def dark_color(self, value: "color32_t"):
        self._set_field(
            'dark_color', 
            value, 
            'color32_t'
        )

    @property
    def light_color(self) -> "color32_t":
        return self._get_field(
            'light_color', 
            'color32_t'
        )

    @light_color.setter
    def light_color(self, value: "color32_t"):
        self._set_field(
            'light_color', 
            value, 
            'color32_t'
        )

    @property
    def scale(self) -> "uint16_t":
        return self._get_field(
            'scale', 
            'uint16_t'
        )

    @scale.setter
    def scale(self, value: "uint16_t"):
        self._set_field(
            'scale', 
            value, 
            'uint16_t'
        )


class _gd_Palette(_StructUnion): 
    _c_type = 'gd_Palette *'

    def __init__(
        self, 
        /, 
        size: Optional["int_"] = 0, 
        colors: Optional[List["uint8_t"]] = _DefaultArg
    ):

        super().__init__(
            size=size, 
            colors=colors
        )

    @property
    def size(self) -> "int_":
        return self._get_field(
            'size', 
            'int_'
        )

    @size.setter
    def size(self, value: "int_"):
        self._set_field(
            'size', 
            value, 
            'int_'
        )

    @property
    def colors(self) -> List["uint8_t"]:
        return self._get_field(
            'colors', 
            'List[uint8_t]'
        )

    @colors.setter
    def colors(self, value: List["uint8_t"]):
        self._set_field(
            'colors', 
            value, 
            'List[uint8_t]'
        )


class _gd_GCE(_StructUnion): 
    _c_type = 'gd_GCE *'

    def __init__(
        self, 
        /, 
        delay: Optional["uint16_t"] = 0, 
        tindex: Optional["uint8_t"] = 0, 
        disposal: Optional["uint8_t"] = 0, 
        input: Optional["int_"] = 0, 
        transparency: Optional["int_"] = 0
    ):

        super().__init__(
            delay=delay, 
            tindex=tindex, 
            disposal=disposal, 
            input=input, 
            transparency=transparency
        )

    @property
    def delay(self) -> "uint16_t":
        return self._get_field(
            'delay', 
            'uint16_t'
        )

    @delay.setter
    def delay(self, value: "uint16_t"):
        self._set_field(
            'delay', 
            value, 
            'uint16_t'
        )

    @property
    def tindex(self) -> "uint8_t":
        return self._get_field(
            'tindex', 
            'uint8_t'
        )

    @tindex.setter
    def tindex(self, value: "uint8_t"):
        self._set_field(
            'tindex', 
            value, 
            'uint8_t'
        )

    @property
    def disposal(self) -> "uint8_t":
        return self._get_field(
            'disposal', 
            'uint8_t'
        )

    @disposal.setter
    def disposal(self, value: "uint8_t"):
        self._set_field(
            'disposal', 
            value, 
            'uint8_t'
        )

    @property
    def input(self) -> "int_":
        return self._get_field(
            'input', 
            'int_'
        )

    @input.setter
    def input(self, value: "int_"):
        self._set_field(
            'input', 
            value, 
            'int_'
        )

    @property
    def transparency(self) -> "int_":
        return self._get_field(
            'transparency', 
            'int_'
        )

    @transparency.setter
    def transparency(self, value: "int_"):
        self._set_field(
            'transparency', 
            value, 
            'int_'
        )


class _gd_GIF(_StructUnion): 
    _c_type = 'gd_GIF *'

    def __init__(
        self, 
        /, 
        fd: Optional["fs_file_t"] = _DefaultArg, 
        data: Optional["char"] = _DefaultArg, 
        is_file: Optional["uint8_t"] = 0, 
        f_rw_p: Optional["uint32_t"] = 0, 
        anim_start: Optional["int32_t"] = 0, 
        width: Optional["uint16_t"] = 0, 
        height: Optional["uint16_t"] = 0, 
        depth: Optional["uint16_t"] = 0, 
        loop_count: Optional["int32_t"] = 0, 
        gce: Optional["gd_GCE"] = _DefaultArg, 
        palette: Optional["gd_Palette"] = _DefaultArg, 
        lct: Optional["gd_Palette"] = _DefaultArg, 
        gct: Optional["gd_Palette"] = _DefaultArg, 
        plain_text: Optional["gd_GIF_plain_text_xcb_t"] = _DefaultArg, 
        comment: Optional["gd_GIF_comment_xcb_t"] = _DefaultArg, 
        application: Optional["gd_GIF_application_xcb_t"] = _DefaultArg, 
        fx: Optional["uint16_t"] = 0, 
        fy: Optional["uint16_t"] = 0, 
        fw: Optional["uint16_t"] = 0, 
        fh: Optional["uint16_t"] = 0, 
        bgindex: Optional["uint8_t"] = 0, 
        canvas: Optional["uint8_t"] = 0, 
        frame: Optional["uint8_t"] = 0
    ):

        super().__init__(
            fd=fd, 
            data=data, 
            is_file=is_file, 
            f_rw_p=f_rw_p, 
            anim_start=anim_start, 
            width=width, 
            height=height, 
            depth=depth, 
            loop_count=loop_count, 
            gce=gce, 
            palette=palette, 
            lct=lct, 
            gct=gct, 
            plain_text=plain_text, 
            comment=comment, 
            application=application, 
            fx=fx, 
            fy=fy, 
            fw=fw, 
            fh=fh, 
            bgindex=bgindex, 
            canvas=canvas, 
            frame=frame
        )

    @property
    def fd(self) -> "fs_file_t":
        return self._get_field(
            'fd', 
            'fs_file_t'
        )

    @fd.setter
    def fd(self, value: "fs_file_t"):
        self._set_field(
            'fd', 
            value, 
            'fs_file_t'
        )

    @property
    def data(self) -> "char":
        return self._get_field(
            'data', 
            'char'
        )

    @data.setter
    def data(self, value: "char"):
        self._set_field(
            'data', 
            value, 
            'char'
        )

    @property
    def is_file(self) -> "uint8_t":
        return self._get_field(
            'is_file', 
            'uint8_t'
        )

    @is_file.setter
    def is_file(self, value: "uint8_t"):
        self._set_field(
            'is_file', 
            value, 
            'uint8_t'
        )

    @property
    def f_rw_p(self) -> "uint32_t":
        return self._get_field(
            'f_rw_p', 
            'uint32_t'
        )

    @f_rw_p.setter
    def f_rw_p(self, value: "uint32_t"):
        self._set_field(
            'f_rw_p', 
            value, 
            'uint32_t'
        )

    @property
    def anim_start(self) -> "int32_t":
        return self._get_field(
            'anim_start', 
            'int32_t'
        )

    @anim_start.setter
    def anim_start(self, value: "int32_t"):
        self._set_field(
            'anim_start', 
            value, 
            'int32_t'
        )

    @property
    def width(self) -> "uint16_t":
        return self._get_field(
            'width', 
            'uint16_t'
        )

    @width.setter
    def width(self, value: "uint16_t"):
        self._set_field(
            'width', 
            value, 
            'uint16_t'
        )

    @property
    def height(self) -> "uint16_t":
        return self._get_field(
            'height', 
            'uint16_t'
        )

    @height.setter
    def height(self, value: "uint16_t"):
        self._set_field(
            'height', 
            value, 
            'uint16_t'
        )

    @property
    def depth(self) -> "uint16_t":
        return self._get_field(
            'depth', 
            'uint16_t'
        )

    @depth.setter
    def depth(self, value: "uint16_t"):
        self._set_field(
            'depth', 
            value, 
            'uint16_t'
        )

    @property
    def loop_count(self) -> "int32_t":
        return self._get_field(
            'loop_count', 
            'int32_t'
        )

    @loop_count.setter
    def loop_count(self, value: "int32_t"):
        self._set_field(
            'loop_count', 
            value, 
            'int32_t'
        )

    @property
    def gce(self) -> "gd_GCE":
        return self._get_field(
            'gce', 
            'gd_GCE'
        )

    @gce.setter
    def gce(self, value: "gd_GCE"):
        self._set_field(
            'gce', 
            value, 
            'gd_GCE'
        )

    @property
    def palette(self) -> "gd_Palette":
        return self._get_field(
            'palette', 
            'gd_Palette'
        )

    @palette.setter
    def palette(self, value: "gd_Palette"):
        self._set_field(
            'palette', 
            value, 
            'gd_Palette'
        )

    @property
    def lct(self) -> "gd_Palette":
        return self._get_field(
            'lct', 
            'gd_Palette'
        )

    @lct.setter
    def lct(self, value: "gd_Palette"):
        self._set_field(
            'lct', 
            value, 
            'gd_Palette'
        )

    @property
    def gct(self) -> "gd_Palette":
        return self._get_field(
            'gct', 
            'gd_Palette'
        )

    @gct.setter
    def gct(self, value: "gd_Palette"):
        self._set_field(
            'gct', 
            value, 
            'gd_Palette'
        )

    @property
    def plain_text(self) -> "gd_GIF_plain_text_xcb_t":
        return self._get_field(
            'plain_text', 
            'gd_GIF_plain_text_xcb_t'
        )

    @plain_text.setter
    def plain_text(self, value: "gd_GIF_plain_text_xcb_t"):
        self._set_field(
            'plain_text', 
            value, 
            'gd_GIF_plain_text_xcb_t'
        )

    @property
    def comment(self) -> "gd_GIF_comment_xcb_t":
        return self._get_field(
            'comment', 
            'gd_GIF_comment_xcb_t'
        )

    @comment.setter
    def comment(self, value: "gd_GIF_comment_xcb_t"):
        self._set_field(
            'comment', 
            value, 
            'gd_GIF_comment_xcb_t'
        )

    @property
    def application(self) -> "gd_GIF_application_xcb_t":
        return self._get_field(
            'application', 
            'gd_GIF_application_xcb_t'
        )

    @application.setter
    def application(self, value: "gd_GIF_application_xcb_t"):
        self._set_field(
            'application', 
            value, 
            'gd_GIF_application_xcb_t'
        )

    @property
    def fx(self) -> "uint16_t":
        return self._get_field(
            'fx', 
            'uint16_t'
        )

    @fx.setter
    def fx(self, value: "uint16_t"):
        self._set_field(
            'fx', 
            value, 
            'uint16_t'
        )

    @property
    def fy(self) -> "uint16_t":
        return self._get_field(
            'fy', 
            'uint16_t'
        )

    @fy.setter
    def fy(self, value: "uint16_t"):
        self._set_field(
            'fy', 
            value, 
            'uint16_t'
        )

    @property
    def fw(self) -> "uint16_t":
        return self._get_field(
            'fw', 
            'uint16_t'
        )

    @fw.setter
    def fw(self, value: "uint16_t"):
        self._set_field(
            'fw', 
            value, 
            'uint16_t'
        )

    @property
    def fh(self) -> "uint16_t":
        return self._get_field(
            'fh', 
            'uint16_t'
        )

    @fh.setter
    def fh(self, value: "uint16_t"):
        self._set_field(
            'fh', 
            value, 
            'uint16_t'
        )

    @property
    def bgindex(self) -> "uint8_t":
        return self._get_field(
            'bgindex', 
            'uint8_t'
        )

    @bgindex.setter
    def bgindex(self, value: "uint8_t"):
        self._set_field(
            'bgindex', 
            value, 
            'uint8_t'
        )

    @property
    def canvas(self) -> "uint8_t":
        return self._get_field(
            'canvas', 
            'uint8_t'
        )

    @canvas.setter
    def canvas(self, value: "uint8_t"):
        self._set_field(
            'canvas', 
            value, 
            'uint8_t'
        )

    @property
    def frame(self) -> "uint8_t":
        return self._get_field(
            'frame', 
            'uint8_t'
        )

    @frame.setter
    def frame(self, value: "uint8_t"):
        self._set_field(
            'frame', 
            value, 
            'uint8_t'
        )


class gif_t(_StructUnion): 
    _c_type = 'lv_gif_t *'

    def __init__(
        self, 
        /, 
        img: Optional["img_t"] = _DefaultArg, 
        gif: Optional["gd_GIF"] = _DefaultArg, 
        timer: Optional["timer_t"] = _DefaultArg, 
        imgdsc: Optional["img_dsc_t"] = _DefaultArg, 
        last_call: Optional["uint32_t"] = 0
    ):

        super().__init__(
            img=img, 
            gif=gif, 
            timer=timer, 
            imgdsc=imgdsc, 
            last_call=last_call
        )

    @property
    def img(self) -> "img_t":
        return self._get_field(
            'img', 
            'img_t'
        )

    @img.setter
    def img(self, value: "img_t"):
        self._set_field(
            'img', 
            value, 
            'img_t'
        )

    @property
    def gif(self) -> "gd_GIF":
        return self._get_field(
            'gif', 
            'gd_GIF'
        )

    @gif.setter
    def gif(self, value: "gd_GIF"):
        self._set_field(
            'gif', 
            value, 
            'gd_GIF'
        )

    @property
    def timer(self) -> "timer_t":
        return self._get_field(
            'timer', 
            'timer_t'
        )

    @timer.setter
    def timer(self, value: "timer_t"):
        self._set_field(
            'timer', 
            value, 
            'timer_t'
        )

    @property
    def imgdsc(self) -> "img_dsc_t":
        return self._get_field(
            'imgdsc', 
            'img_dsc_t'
        )

    @imgdsc.setter
    def imgdsc(self, value: "img_dsc_t"):
        self._set_field(
            'imgdsc', 
            value, 
            'img_dsc_t'
        )

    @property
    def last_call(self) -> "uint32_t":
        return self._get_field(
            'last_call', 
            'uint32_t'
        )

    @last_call.setter
    def last_call(self, value: "uint32_t"):
        self._set_field(
            'last_call', 
            value, 
            'uint32_t'
        )


class qrcode_t(_StructUnion): 
    _c_type = 'lv_qrcode_t *'

    def __init__(
        self, 
        /, 
        canvas: Optional["canvas_t"] = _DefaultArg, 
        dark_color: Optional["color_t"] = _DefaultArg, 
        light_color: Optional["color_t"] = _DefaultArg
    ):

        super().__init__(
            canvas=canvas, 
            dark_color=dark_color, 
            light_color=light_color
        )

    @property
    def canvas(self) -> "canvas_t":
        return self._get_field(
            'canvas', 
            'canvas_t'
        )

    @canvas.setter
    def canvas(self, value: "canvas_t"):
        self._set_field(
            'canvas', 
            value, 
            'canvas_t'
        )

    @property
    def dark_color(self) -> "color_t":
        return self._get_field(
            'dark_color', 
            'color_t'
        )

    @dark_color.setter
    def dark_color(self, value: "color_t"):
        self._set_field(
            'dark_color', 
            value, 
            'color_t'
        )

    @property
    def light_color(self) -> "color_t":
        return self._get_field(
            'light_color', 
            'color_t'
        )

    @light_color.setter
    def light_color(self, value: "color_t"):
        self._set_field(
            'light_color', 
            value, 
            'color_t'
        )


class _disp_t(_StructUnion): 
    _c_type = 'lv_disp_t *'

    def __init__(
        self, 
        /, 
        hor_res: Optional["coord_t"] = _DefaultArg, 
        ver_res: Optional["coord_t"] = _DefaultArg, 
        physical_hor_res: Optional["coord_t"] = _DefaultArg, 
        physical_ver_res: Optional["coord_t"] = _DefaultArg, 
        offset_x: Optional["coord_t"] = _DefaultArg, 
        offset_y: Optional["coord_t"] = _DefaultArg, 
        dpi: Optional["uint32_t"] = 0, 
        draw_buf_1: Optional[Any] = _DefaultArg, 
        draw_buf_2: Optional[Any] = _DefaultArg, 
        draw_buf_act: Optional[Any] = _DefaultArg, 
        draw_buf_size: Optional["uint32_t"] = 0, 
        flush_cb: Optional["disp_flush_cb_t"] = _DefaultArg, 
        flushing: Optional["int_"] = 0, 
        flushing_last: Optional["int_"] = 0, 
        last_area: Optional["uint32_t"] = 0, 
        last_part: Optional["uint32_t"] = 0, 
        render_mode: Optional["disp_render_mode_t"] = _DefaultArg, 
        antialiasing: Optional["uint32_t"] = 0, 
        rendering_in_progress: Optional["uint32_t"] = 0, 
        color_format: Optional["color_format_t"] = _DefaultArg, 
        inv_areas: Optional[List["area_t"]] = _DefaultArg, 
        inv_area_joined: Optional[List["uint8_t"]] = _DefaultArg, 
        inv_p: Optional["uint16_t"] = 0, 
        inv_en_cnt: Optional["int32_t"] = 0, 
        draw_ctx: Optional["draw_ctx_t"] = _DefaultArg, 
        draw_ctx_init: Optional["disp_draw_ctx_init_cb_t"] = _DefaultArg, 
        draw_ctx_deinit: Optional["disp_draw_ctx_deinit_cb_t"] = _DefaultArg, 
        draw_ctx_size: Optional["size_t"] = _DefaultArg, 
        screens: Optional["_obj_t"] = _DefaultArg, 
        act_scr: Optional["_obj_t"] = _DefaultArg, 
        prev_scr: Optional["_obj_t"] = _DefaultArg, 
        scr_to_load: Optional["_obj_t"] = _DefaultArg, 
        bottom_layer: Optional["_obj_t"] = _DefaultArg, 
        top_layer: Optional["_obj_t"] = _DefaultArg, 
        sys_layer: Optional["_obj_t"] = _DefaultArg, 
        screen_cnt: Optional["uint32_t"] = 0, 
        draw_prev_over_act: Optional["uint8_t"] = 0, 
        del_prev: Optional["uint8_t"] = 0, 
        driver_data: Optional[Any] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        event_list: Optional["event_list_t"] = _DefaultArg, 
        sw_rotate: Optional["uint32_t"] = 0, 
        rotation: Optional["uint32_t"] = 0, 
        theme: Optional["_theme_t"] = _DefaultArg, 
        refr_timer: Optional["timer_t"] = _DefaultArg, 
        last_activity_time: Optional["uint32_t"] = 0, 
        last_render_start_time: Optional["uint32_t"] = 0, 
        wait_cb: Optional["disp_wait_cb_t"] = _DefaultArg, 
        color_chroma_key: Optional["color_t"] = _DefaultArg
    ):

        super().__init__(
            hor_res=hor_res, 
            ver_res=ver_res, 
            physical_hor_res=physical_hor_res, 
            physical_ver_res=physical_ver_res, 
            offset_x=offset_x, 
            offset_y=offset_y, 
            dpi=dpi, 
            draw_buf_1=draw_buf_1, 
            draw_buf_2=draw_buf_2, 
            draw_buf_act=draw_buf_act, 
            draw_buf_size=draw_buf_size, 
            flush_cb=flush_cb, 
            flushing=flushing, 
            flushing_last=flushing_last, 
            last_area=last_area, 
            last_part=last_part, 
            render_mode=render_mode, 
            antialiasing=antialiasing, 
            rendering_in_progress=rendering_in_progress, 
            color_format=color_format, 
            inv_areas=inv_areas, 
            inv_area_joined=inv_area_joined, 
            inv_p=inv_p, 
            inv_en_cnt=inv_en_cnt, 
            draw_ctx=draw_ctx, 
            draw_ctx_init=draw_ctx_init, 
            draw_ctx_deinit=draw_ctx_deinit, 
            draw_ctx_size=draw_ctx_size, 
            screens=screens, 
            act_scr=act_scr, 
            prev_scr=prev_scr, 
            scr_to_load=scr_to_load, 
            bottom_layer=bottom_layer, 
            top_layer=top_layer, 
            sys_layer=sys_layer, 
            screen_cnt=screen_cnt, 
            draw_prev_over_act=draw_prev_over_act, 
            del_prev=del_prev, 
            driver_data=driver_data, 
            user_data=user_data, 
            event_list=event_list, 
            sw_rotate=sw_rotate, 
            rotation=rotation, 
            theme=theme, 
            refr_timer=refr_timer, 
            last_activity_time=last_activity_time, 
            last_render_start_time=last_render_start_time, 
            wait_cb=wait_cb, 
            color_chroma_key=color_chroma_key
        )

    @property
    def hor_res(self) -> "coord_t":
        return self._get_field(
            'hor_res', 
            'coord_t'
        )

    @hor_res.setter
    def hor_res(self, value: "coord_t"):
        self._set_field(
            'hor_res', 
            value, 
            'coord_t'
        )

    @property
    def ver_res(self) -> "coord_t":
        return self._get_field(
            'ver_res', 
            'coord_t'
        )

    @ver_res.setter
    def ver_res(self, value: "coord_t"):
        self._set_field(
            'ver_res', 
            value, 
            'coord_t'
        )

    @property
    def physical_hor_res(self) -> "coord_t":
        return self._get_field(
            'physical_hor_res', 
            'coord_t'
        )

    @physical_hor_res.setter
    def physical_hor_res(self, value: "coord_t"):
        self._set_field(
            'physical_hor_res', 
            value, 
            'coord_t'
        )

    @property
    def physical_ver_res(self) -> "coord_t":
        return self._get_field(
            'physical_ver_res', 
            'coord_t'
        )

    @physical_ver_res.setter
    def physical_ver_res(self, value: "coord_t"):
        self._set_field(
            'physical_ver_res', 
            value, 
            'coord_t'
        )

    @property
    def offset_x(self) -> "coord_t":
        return self._get_field(
            'offset_x', 
            'coord_t'
        )

    @offset_x.setter
    def offset_x(self, value: "coord_t"):
        self._set_field(
            'offset_x', 
            value, 
            'coord_t'
        )

    @property
    def offset_y(self) -> "coord_t":
        return self._get_field(
            'offset_y', 
            'coord_t'
        )

    @offset_y.setter
    def offset_y(self, value: "coord_t"):
        self._set_field(
            'offset_y', 
            value, 
            'coord_t'
        )

    @property
    def dpi(self) -> "uint32_t":
        return self._get_field(
            'dpi', 
            'uint32_t'
        )

    @dpi.setter
    def dpi(self, value: "uint32_t"):
        self._set_field(
            'dpi', 
            value, 
            'uint32_t'
        )

    @property
    def draw_buf_1(self) -> Any:
        return self._get_field(
            'draw_buf_1', 
            'void'
        )

    @draw_buf_1.setter
    def draw_buf_1(self, value: Any):
        self._set_field(
            'draw_buf_1', 
            value, 
            'void'
        )

    @property
    def draw_buf_2(self) -> Any:
        return self._get_field(
            'draw_buf_2', 
            'void'
        )

    @draw_buf_2.setter
    def draw_buf_2(self, value: Any):
        self._set_field(
            'draw_buf_2', 
            value, 
            'void'
        )

    @property
    def draw_buf_act(self) -> Any:
        return self._get_field(
            'draw_buf_act', 
            'void'
        )

    @draw_buf_act.setter
    def draw_buf_act(self, value: Any):
        self._set_field(
            'draw_buf_act', 
            value, 
            'void'
        )

    @property
    def draw_buf_size(self) -> "uint32_t":
        return self._get_field(
            'draw_buf_size', 
            'uint32_t'
        )

    @draw_buf_size.setter
    def draw_buf_size(self, value: "uint32_t"):
        self._set_field(
            'draw_buf_size', 
            value, 
            'uint32_t'
        )

    @property
    def flush_cb(self) -> Optional["disp_flush_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"disp_flush_cb_t"', None)

    @flush_cb.setter
    def flush_cb(self, value: "disp_flush_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"disp_flush_cb_t"' not in cb_store:
            cb_store['"disp_flush_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_disp_flush_cb_t')
            cb_store['"disp_flush_cb_t".c_func'] = c_func
            self._obj.flush_cb = c_func
        else:
            cb_store['"disp_flush_cb_t"'] = value

    @property
    def flushing(self) -> "int_":
        return self._get_field(
            'flushing', 
            'int_'
        )

    @flushing.setter
    def flushing(self, value: "int_"):
        self._set_field(
            'flushing', 
            value, 
            'int_'
        )

    @property
    def flushing_last(self) -> "int_":
        return self._get_field(
            'flushing_last', 
            'int_'
        )

    @flushing_last.setter
    def flushing_last(self, value: "int_"):
        self._set_field(
            'flushing_last', 
            value, 
            'int_'
        )

    @property
    def last_area(self) -> "uint32_t":
        return self._get_field(
            'last_area', 
            'uint32_t'
        )

    @last_area.setter
    def last_area(self, value: "uint32_t"):
        self._set_field(
            'last_area', 
            value, 
            'uint32_t'
        )

    @property
    def last_part(self) -> "uint32_t":
        return self._get_field(
            'last_part', 
            'uint32_t'
        )

    @last_part.setter
    def last_part(self, value: "uint32_t"):
        self._set_field(
            'last_part', 
            value, 
            'uint32_t'
        )

    @property
    def render_mode(self) -> "disp_render_mode_t":
        return self._get_field(
            'render_mode', 
            'disp_render_mode_t'
        )

    @render_mode.setter
    def render_mode(self, value: "disp_render_mode_t"):
        self._set_field(
            'render_mode', 
            value, 
            'disp_render_mode_t'
        )

    @property
    def antialiasing(self) -> "uint32_t":
        return self._get_field(
            'antialiasing', 
            'uint32_t'
        )

    @antialiasing.setter
    def antialiasing(self, value: "uint32_t"):
        self._set_field(
            'antialiasing', 
            value, 
            'uint32_t'
        )

    @property
    def rendering_in_progress(self) -> "uint32_t":
        return self._get_field(
            'rendering_in_progress', 
            'uint32_t'
        )

    @rendering_in_progress.setter
    def rendering_in_progress(self, value: "uint32_t"):
        self._set_field(
            'rendering_in_progress', 
            value, 
            'uint32_t'
        )

    @property
    def color_format(self) -> "color_format_t":
        return self._get_field(
            'color_format', 
            'color_format_t'
        )

    @color_format.setter
    def color_format(self, value: "color_format_t"):
        self._set_field(
            'color_format', 
            value, 
            'color_format_t'
        )

    @property
    def inv_areas(self) -> List["area_t"]:
        return self._get_field(
            'inv_areas', 
            'List[area_t]'
        )

    @inv_areas.setter
    def inv_areas(self, value: List["area_t"]):
        self._set_field(
            'inv_areas', 
            value, 
            'List[area_t]'
        )

    @property
    def inv_area_joined(self) -> List["uint8_t"]:
        return self._get_field(
            'inv_area_joined', 
            'List[uint8_t]'
        )

    @inv_area_joined.setter
    def inv_area_joined(self, value: List["uint8_t"]):
        self._set_field(
            'inv_area_joined', 
            value, 
            'List[uint8_t]'
        )

    @property
    def inv_p(self) -> "uint16_t":
        return self._get_field(
            'inv_p', 
            'uint16_t'
        )

    @inv_p.setter
    def inv_p(self, value: "uint16_t"):
        self._set_field(
            'inv_p', 
            value, 
            'uint16_t'
        )

    @property
    def inv_en_cnt(self) -> "int32_t":
        return self._get_field(
            'inv_en_cnt', 
            'int32_t'
        )

    @inv_en_cnt.setter
    def inv_en_cnt(self, value: "int32_t"):
        self._set_field(
            'inv_en_cnt', 
            value, 
            'int32_t'
        )

    @property
    def draw_ctx(self) -> "draw_ctx_t":
        return self._get_field(
            'draw_ctx', 
            'draw_ctx_t'
        )

    @draw_ctx.setter
    def draw_ctx(self, value: "draw_ctx_t"):
        self._set_field(
            'draw_ctx', 
            value, 
            'draw_ctx_t'
        )

    @property
    def draw_ctx_init(self) -> Optional["disp_draw_ctx_init_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"disp_draw_ctx_init_cb_t"', None)

    @draw_ctx_init.setter
    def draw_ctx_init(self, value: "disp_draw_ctx_init_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"disp_draw_ctx_init_cb_t"' not in cb_store:
            cb_store['"disp_draw_ctx_init_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_disp_draw_ctx_init_cb_t')
            cb_store['"disp_draw_ctx_init_cb_t".c_func'] = c_func
            self._obj.draw_ctx_init = c_func
        else:
            cb_store['"disp_draw_ctx_init_cb_t"'] = value

    @property
    def draw_ctx_deinit(self) -> Optional["disp_draw_ctx_deinit_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"disp_draw_ctx_deinit_cb_t"', None)

    @draw_ctx_deinit.setter
    def draw_ctx_deinit(self, value: "disp_draw_ctx_deinit_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"disp_draw_ctx_deinit_cb_t"' not in cb_store:
            cb_store['"disp_draw_ctx_deinit_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_disp_draw_ctx_deinit_cb_t')
            cb_store['"disp_draw_ctx_deinit_cb_t".c_func'] = c_func
            self._obj.draw_ctx_deinit = c_func
        else:
            cb_store['"disp_draw_ctx_deinit_cb_t"'] = value

    @property
    def draw_ctx_size(self) -> "size_t":
        return self._get_field(
            'draw_ctx_size', 
            'size_t'
        )

    @draw_ctx_size.setter
    def draw_ctx_size(self, value: "size_t"):
        self._set_field(
            'draw_ctx_size', 
            value, 
            'size_t'
        )

    @property
    def screens(self) -> "_obj_t":
        return self._get_field(
            'screens', 
            '_obj_t'
        )

    @screens.setter
    def screens(self, value: "_obj_t"):
        self._set_field(
            'screens', 
            value, 
            '_obj_t'
        )

    @property
    def act_scr(self) -> "_obj_t":
        return self._get_field(
            'act_scr', 
            '_obj_t'
        )

    @act_scr.setter
    def act_scr(self, value: "_obj_t"):
        self._set_field(
            'act_scr', 
            value, 
            '_obj_t'
        )

    @property
    def prev_scr(self) -> "_obj_t":
        return self._get_field(
            'prev_scr', 
            '_obj_t'
        )

    @prev_scr.setter
    def prev_scr(self, value: "_obj_t"):
        self._set_field(
            'prev_scr', 
            value, 
            '_obj_t'
        )

    @property
    def scr_to_load(self) -> "_obj_t":
        return self._get_field(
            'scr_to_load', 
            '_obj_t'
        )

    @scr_to_load.setter
    def scr_to_load(self, value: "_obj_t"):
        self._set_field(
            'scr_to_load', 
            value, 
            '_obj_t'
        )

    @property
    def bottom_layer(self) -> "_obj_t":
        return self._get_field(
            'bottom_layer', 
            '_obj_t'
        )

    @bottom_layer.setter
    def bottom_layer(self, value: "_obj_t"):
        self._set_field(
            'bottom_layer', 
            value, 
            '_obj_t'
        )

    @property
    def top_layer(self) -> "_obj_t":
        return self._get_field(
            'top_layer', 
            '_obj_t'
        )

    @top_layer.setter
    def top_layer(self, value: "_obj_t"):
        self._set_field(
            'top_layer', 
            value, 
            '_obj_t'
        )

    @property
    def sys_layer(self) -> "_obj_t":
        return self._get_field(
            'sys_layer', 
            '_obj_t'
        )

    @sys_layer.setter
    def sys_layer(self, value: "_obj_t"):
        self._set_field(
            'sys_layer', 
            value, 
            '_obj_t'
        )

    @property
    def screen_cnt(self) -> "uint32_t":
        return self._get_field(
            'screen_cnt', 
            'uint32_t'
        )

    @screen_cnt.setter
    def screen_cnt(self, value: "uint32_t"):
        self._set_field(
            'screen_cnt', 
            value, 
            'uint32_t'
        )

    @property
    def draw_prev_over_act(self) -> "uint8_t":
        return self._get_field(
            'draw_prev_over_act', 
            'uint8_t'
        )

    @draw_prev_over_act.setter
    def draw_prev_over_act(self, value: "uint8_t"):
        self._set_field(
            'draw_prev_over_act', 
            value, 
            'uint8_t'
        )

    @property
    def del_prev(self) -> "uint8_t":
        return self._get_field(
            'del_prev', 
            'uint8_t'
        )

    @del_prev.setter
    def del_prev(self, value: "uint8_t"):
        self._set_field(
            'del_prev', 
            value, 
            'uint8_t'
        )

    @property
    def driver_data(self) -> Any:
        return self._get_field(
            'driver_data', 
            'void'
        )

    @driver_data.setter
    def driver_data(self, value: Any):
        self._set_field(
            'driver_data', 
            value, 
            'void'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def event_list(self) -> "event_list_t":
        return self._get_field(
            'event_list', 
            'event_list_t'
        )

    @event_list.setter
    def event_list(self, value: "event_list_t"):
        self._set_field(
            'event_list', 
            value, 
            'event_list_t'
        )

    @property
    def sw_rotate(self) -> "uint32_t":
        return self._get_field(
            'sw_rotate', 
            'uint32_t'
        )

    @sw_rotate.setter
    def sw_rotate(self, value: "uint32_t"):
        self._set_field(
            'sw_rotate', 
            value, 
            'uint32_t'
        )

    @property
    def rotation(self) -> "uint32_t":
        return self._get_field(
            'rotation', 
            'uint32_t'
        )

    @rotation.setter
    def rotation(self, value: "uint32_t"):
        self._set_field(
            'rotation', 
            value, 
            'uint32_t'
        )

    @property
    def theme(self) -> "_theme_t":
        return self._get_field(
            'theme', 
            '_theme_t'
        )

    @theme.setter
    def theme(self, value: "_theme_t"):
        self._set_field(
            'theme', 
            value, 
            '_theme_t'
        )

    @property
    def refr_timer(self) -> "timer_t":
        return self._get_field(
            'refr_timer', 
            'timer_t'
        )

    @refr_timer.setter
    def refr_timer(self, value: "timer_t"):
        self._set_field(
            'refr_timer', 
            value, 
            'timer_t'
        )

    @property
    def last_activity_time(self) -> "uint32_t":
        return self._get_field(
            'last_activity_time', 
            'uint32_t'
        )

    @last_activity_time.setter
    def last_activity_time(self, value: "uint32_t"):
        self._set_field(
            'last_activity_time', 
            value, 
            'uint32_t'
        )

    @property
    def last_render_start_time(self) -> "uint32_t":
        return self._get_field(
            'last_render_start_time', 
            'uint32_t'
        )

    @last_render_start_time.setter
    def last_render_start_time(self, value: "uint32_t"):
        self._set_field(
            'last_render_start_time', 
            value, 
            'uint32_t'
        )

    @property
    def wait_cb(self) -> Optional["disp_wait_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"disp_wait_cb_t"', None)

    @wait_cb.setter
    def wait_cb(self, value: "disp_wait_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"disp_wait_cb_t"' not in cb_store:
            cb_store['"disp_wait_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_disp_wait_cb_t')
            cb_store['"disp_wait_cb_t".c_func'] = c_func
            self._obj.wait_cb = c_func
        else:
            cb_store['"disp_wait_cb_t"'] = value

    @property
    def color_chroma_key(self) -> "color_t":
        return self._get_field(
            'color_chroma_key', 
            'color_t'
        )

    @color_chroma_key.setter
    def color_chroma_key(self, value: "color_t"):
        self._set_field(
            'color_chroma_key', 
            value, 
            'color_t'
        )


class _indev_pointer_t(_StructUnion): 
    _c_type = 'lv_indev_pointer_t *'

    def __init__(
        self, 
        /, 
        act_point: Optional["point_t"] = _DefaultArg, 
        last_point: Optional["point_t"] = _DefaultArg, 
        last_raw_point: Optional["point_t"] = _DefaultArg, 
        vect: Optional["point_t"] = _DefaultArg, 
        scroll_sum: Optional["point_t"] = _DefaultArg, 
        scroll_throw_vect: Optional["point_t"] = _DefaultArg, 
        scroll_throw_vect_ori: Optional["point_t"] = _DefaultArg, 
        act_obj: Optional["_obj_t"] = _DefaultArg, 
        last_obj: Optional["_obj_t"] = _DefaultArg, 
        scroll_obj: Optional["_obj_t"] = _DefaultArg, 
        last_pressed: Optional["_obj_t"] = _DefaultArg, 
        scroll_area: Optional["area_t"] = _DefaultArg, 
        gesture_sum: Optional["point_t"] = _DefaultArg, 
        scroll_dir: Optional["dir_t"] = _DefaultArg, 
        gesture_dir: Optional["dir_t"] = _DefaultArg, 
        gesture_sent: Optional["uint8_t"] = 0
    ):

        super().__init__(
            act_point=act_point, 
            last_point=last_point, 
            last_raw_point=last_raw_point, 
            vect=vect, 
            scroll_sum=scroll_sum, 
            scroll_throw_vect=scroll_throw_vect, 
            scroll_throw_vect_ori=scroll_throw_vect_ori, 
            act_obj=act_obj, 
            last_obj=last_obj, 
            scroll_obj=scroll_obj, 
            last_pressed=last_pressed, 
            scroll_area=scroll_area, 
            gesture_sum=gesture_sum, 
            scroll_dir=scroll_dir, 
            gesture_dir=gesture_dir, 
            gesture_sent=gesture_sent
        )

    @property
    def act_point(self) -> "point_t":
        return self._get_field(
            'act_point', 
            'point_t'
        )

    @act_point.setter
    def act_point(self, value: "point_t"):
        self._set_field(
            'act_point', 
            value, 
            'point_t'
        )

    @property
    def last_point(self) -> "point_t":
        return self._get_field(
            'last_point', 
            'point_t'
        )

    @last_point.setter
    def last_point(self, value: "point_t"):
        self._set_field(
            'last_point', 
            value, 
            'point_t'
        )

    @property
    def last_raw_point(self) -> "point_t":
        return self._get_field(
            'last_raw_point', 
            'point_t'
        )

    @last_raw_point.setter
    def last_raw_point(self, value: "point_t"):
        self._set_field(
            'last_raw_point', 
            value, 
            'point_t'
        )

    @property
    def vect(self) -> "point_t":
        return self._get_field(
            'vect', 
            'point_t'
        )

    @vect.setter
    def vect(self, value: "point_t"):
        self._set_field(
            'vect', 
            value, 
            'point_t'
        )

    @property
    def scroll_sum(self) -> "point_t":
        return self._get_field(
            'scroll_sum', 
            'point_t'
        )

    @scroll_sum.setter
    def scroll_sum(self, value: "point_t"):
        self._set_field(
            'scroll_sum', 
            value, 
            'point_t'
        )

    @property
    def scroll_throw_vect(self) -> "point_t":
        return self._get_field(
            'scroll_throw_vect', 
            'point_t'
        )

    @scroll_throw_vect.setter
    def scroll_throw_vect(self, value: "point_t"):
        self._set_field(
            'scroll_throw_vect', 
            value, 
            'point_t'
        )

    @property
    def scroll_throw_vect_ori(self) -> "point_t":
        return self._get_field(
            'scroll_throw_vect_ori', 
            'point_t'
        )

    @scroll_throw_vect_ori.setter
    def scroll_throw_vect_ori(self, value: "point_t"):
        self._set_field(
            'scroll_throw_vect_ori', 
            value, 
            'point_t'
        )

    @property
    def act_obj(self) -> "_obj_t":
        return self._get_field(
            'act_obj', 
            '_obj_t'
        )

    @act_obj.setter
    def act_obj(self, value: "_obj_t"):
        self._set_field(
            'act_obj', 
            value, 
            '_obj_t'
        )

    @property
    def last_obj(self) -> "_obj_t":
        return self._get_field(
            'last_obj', 
            '_obj_t'
        )

    @last_obj.setter
    def last_obj(self, value: "_obj_t"):
        self._set_field(
            'last_obj', 
            value, 
            '_obj_t'
        )

    @property
    def scroll_obj(self) -> "_obj_t":
        return self._get_field(
            'scroll_obj', 
            '_obj_t'
        )

    @scroll_obj.setter
    def scroll_obj(self, value: "_obj_t"):
        self._set_field(
            'scroll_obj', 
            value, 
            '_obj_t'
        )

    @property
    def last_pressed(self) -> "_obj_t":
        return self._get_field(
            'last_pressed', 
            '_obj_t'
        )

    @last_pressed.setter
    def last_pressed(self, value: "_obj_t"):
        self._set_field(
            'last_pressed', 
            value, 
            '_obj_t'
        )

    @property
    def scroll_area(self) -> "area_t":
        return self._get_field(
            'scroll_area', 
            'area_t'
        )

    @scroll_area.setter
    def scroll_area(self, value: "area_t"):
        self._set_field(
            'scroll_area', 
            value, 
            'area_t'
        )

    @property
    def gesture_sum(self) -> "point_t":
        return self._get_field(
            'gesture_sum', 
            'point_t'
        )

    @gesture_sum.setter
    def gesture_sum(self, value: "point_t"):
        self._set_field(
            'gesture_sum', 
            value, 
            'point_t'
        )

    @property
    def scroll_dir(self) -> "dir_t":
        return self._get_field(
            'scroll_dir', 
            'dir_t'
        )

    @scroll_dir.setter
    def scroll_dir(self, value: "dir_t"):
        self._set_field(
            'scroll_dir', 
            value, 
            'dir_t'
        )

    @property
    def gesture_dir(self) -> "dir_t":
        return self._get_field(
            'gesture_dir', 
            'dir_t'
        )

    @gesture_dir.setter
    def gesture_dir(self, value: "dir_t"):
        self._set_field(
            'gesture_dir', 
            value, 
            'dir_t'
        )

    @property
    def gesture_sent(self) -> "uint8_t":
        return self._get_field(
            'gesture_sent', 
            'uint8_t'
        )

    @gesture_sent.setter
    def gesture_sent(self, value: "uint8_t"):
        self._set_field(
            'gesture_sent', 
            value, 
            'uint8_t'
        )


class _indev_keypad_t(_StructUnion): 
    _c_type = 'lv_indev_keypad_t *'

    def __init__(
        self, 
        /, 
        last_state: Optional["indev_state_t"] = _DefaultArg, 
        last_key: Optional["uint32_t"] = 0
    ):

        super().__init__(
            last_state=last_state, 
            last_key=last_key
        )

    @property
    def last_state(self) -> "indev_state_t":
        return self._get_field(
            'last_state', 
            'indev_state_t'
        )

    @last_state.setter
    def last_state(self, value: "indev_state_t"):
        self._set_field(
            'last_state', 
            value, 
            'indev_state_t'
        )

    @property
    def last_key(self) -> "uint32_t":
        return self._get_field(
            'last_key', 
            'uint32_t'
        )

    @last_key.setter
    def last_key(self, value: "uint32_t"):
        self._set_field(
            'last_key', 
            value, 
            'uint32_t'
        )


class _indev_t(_StructUnion): 
    _c_type = 'lv_indev_t *'

    def __init__(
        self, 
        /, 
        type: Optional["indev_type_t"] = _DefaultArg, 
        read_cb: Optional["indev_read_cb_t"] = _DefaultArg, 
        feedback_cb: Optional["indev_feedback_cb_t"] = _DefaultArg, 
        state: Optional["indev_state_t"] = _DefaultArg, 
        long_pr_sent: Optional["uint8_t"] = 0, 
        reset_query: Optional["uint8_t"] = 0, 
        disabled: Optional["uint8_t"] = 0, 
        wait_until_release: Optional["uint8_t"] = 0, 
        pr_timestamp: Optional["uint32_t"] = 0, 
        longpr_rep_timestamp: Optional["uint32_t"] = 0, 
        driver_data: Optional[Any] = _DefaultArg, 
        user_data: Optional[Any] = _DefaultArg, 
        disp: Optional["_disp_t"] = _DefaultArg, 
        read_timer: Optional["timer_t"] = _DefaultArg, 
        scroll_limit: Optional["uint8_t"] = 0, 
        scroll_throw: Optional["uint8_t"] = 0, 
        gesture_min_velocity: Optional["uint8_t"] = 0, 
        gesture_limit: Optional["uint8_t"] = 0, 
        long_press_time: Optional["uint16_t"] = 0, 
        long_press_repeat_time: Optional["uint16_t"] = 0, 
        pointer: Optional["_indev_pointer_t"] = _DefaultArg, 
        keypad: Optional["_indev_keypad_t"] = _DefaultArg, 
        cursor: Optional["_obj_t"] = _DefaultArg, 
        group: Optional["_group_t"] = _DefaultArg, 
        btn_points: Optional["point_t"] = _DefaultArg
    ):

        super().__init__(
            type=type, 
            read_cb=read_cb, 
            feedback_cb=feedback_cb, 
            state=state, 
            long_pr_sent=long_pr_sent, 
            reset_query=reset_query, 
            disabled=disabled, 
            wait_until_release=wait_until_release, 
            pr_timestamp=pr_timestamp, 
            longpr_rep_timestamp=longpr_rep_timestamp, 
            driver_data=driver_data, 
            user_data=user_data, 
            disp=disp, 
            read_timer=read_timer, 
            scroll_limit=scroll_limit, 
            scroll_throw=scroll_throw, 
            gesture_min_velocity=gesture_min_velocity, 
            gesture_limit=gesture_limit, 
            long_press_time=long_press_time, 
            long_press_repeat_time=long_press_repeat_time, 
            pointer=pointer, 
            keypad=keypad, 
            cursor=cursor, 
            group=group, 
            btn_points=btn_points
        )

    @property
    def type(self) -> "indev_type_t":
        return self._get_field(
            'type', 
            'indev_type_t'
        )

    @type.setter
    def type(self, value: "indev_type_t"):
        self._set_field(
            'type', 
            value, 
            'indev_type_t'
        )

    @property
    def read_cb(self) -> Optional["indev_read_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"indev_read_cb_t"', None)

    @read_cb.setter
    def read_cb(self, value: "indev_read_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"indev_read_cb_t"' not in cb_store:
            cb_store['"indev_read_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_indev_read_cb_t')
            cb_store['"indev_read_cb_t".c_func'] = c_func
            self._obj.read_cb = c_func
        else:
            cb_store['"indev_read_cb_t"'] = value

    @property
    def feedback_cb(self) -> Optional["indev_feedback_cb_t"]:
        _ = self.user_data
        
        cb_store = self.__dict__['__cb_store__']
        return cb_store.get('"indev_feedback_cb_t"', None)

    @feedback_cb.setter
    def feedback_cb(self, value: "indev_feedback_cb_t"):
        _ = self.user_data
        cb_store = self.__dict__['__cb_store__']

        if '"indev_feedback_cb_t"' not in cb_store:
            cb_store['"indev_feedback_cb_t"'] = value
            c_func = getattr(_lib_lvgl.lib, 'py_lv_indev_feedback_cb_t')
            cb_store['"indev_feedback_cb_t".c_func'] = c_func
            self._obj.feedback_cb = c_func
        else:
            cb_store['"indev_feedback_cb_t"'] = value

    @property
    def state(self) -> "indev_state_t":
        return self._get_field(
            'state', 
            'indev_state_t'
        )

    @state.setter
    def state(self, value: "indev_state_t"):
        self._set_field(
            'state', 
            value, 
            'indev_state_t'
        )

    @property
    def long_pr_sent(self) -> "uint8_t":
        return self._get_field(
            'long_pr_sent', 
            'uint8_t'
        )

    @long_pr_sent.setter
    def long_pr_sent(self, value: "uint8_t"):
        self._set_field(
            'long_pr_sent', 
            value, 
            'uint8_t'
        )

    @property
    def reset_query(self) -> "uint8_t":
        return self._get_field(
            'reset_query', 
            'uint8_t'
        )

    @reset_query.setter
    def reset_query(self, value: "uint8_t"):
        self._set_field(
            'reset_query', 
            value, 
            'uint8_t'
        )

    @property
    def disabled(self) -> "uint8_t":
        return self._get_field(
            'disabled', 
            'uint8_t'
        )

    @disabled.setter
    def disabled(self, value: "uint8_t"):
        self._set_field(
            'disabled', 
            value, 
            'uint8_t'
        )

    @property
    def wait_until_release(self) -> "uint8_t":
        return self._get_field(
            'wait_until_release', 
            'uint8_t'
        )

    @wait_until_release.setter
    def wait_until_release(self, value: "uint8_t"):
        self._set_field(
            'wait_until_release', 
            value, 
            'uint8_t'
        )

    @property
    def pr_timestamp(self) -> "uint32_t":
        return self._get_field(
            'pr_timestamp', 
            'uint32_t'
        )

    @pr_timestamp.setter
    def pr_timestamp(self, value: "uint32_t"):
        self._set_field(
            'pr_timestamp', 
            value, 
            'uint32_t'
        )

    @property
    def longpr_rep_timestamp(self) -> "uint32_t":
        return self._get_field(
            'longpr_rep_timestamp', 
            'uint32_t'
        )

    @longpr_rep_timestamp.setter
    def longpr_rep_timestamp(self, value: "uint32_t"):
        self._set_field(
            'longpr_rep_timestamp', 
            value, 
            'uint32_t'
        )

    @property
    def driver_data(self) -> Any:
        return self._get_field(
            'driver_data', 
            'void'
        )

    @driver_data.setter
    def driver_data(self, value: Any):
        self._set_field(
            'driver_data', 
            value, 
            'void'
        )

    @property
    def user_data(self) -> Any:
        if '__cb_store__' not in self.__dict__:
            try:
                cb_store_handle = self._obj.user_data
                cb_store = _lib_lvgl.ffi.from_handle(cb_store_handle)
            except:  # NOQA
                cb_store = _CBStore()
                cb_store_handle = _lib_lvgl.ffi.new_handle(cb_store)
                self._obj.user_data = cb_store_handle

            self.__dict__['__cb_store__'] = cb_store
            self.__dict__['__cb_store_handle__'] = cb_store_handle

        else:
            cb_store = self.__dict__['__cb_store__']
                
        if 'user_data' not in cb_store:
            cb_store['user_data'] = None
            
        return cb_store['user_data']

    @user_data.setter
    def user_data(self, value: Any):
        if '__cb_store__' not in self.__dict__:
            _ = self.user_data

        self.__dict__['__cb_store__']['user_data'] = value

    @property
    def disp(self) -> "_disp_t":
        return self._get_field(
            'disp', 
            '_disp_t'
        )

    @disp.setter
    def disp(self, value: "_disp_t"):
        self._set_field(
            'disp', 
            value, 
            '_disp_t'
        )

    @property
    def read_timer(self) -> "timer_t":
        return self._get_field(
            'read_timer', 
            'timer_t'
        )

    @read_timer.setter
    def read_timer(self, value: "timer_t"):
        self._set_field(
            'read_timer', 
            value, 
            'timer_t'
        )

    @property
    def scroll_limit(self) -> "uint8_t":
        return self._get_field(
            'scroll_limit', 
            'uint8_t'
        )

    @scroll_limit.setter
    def scroll_limit(self, value: "uint8_t"):
        self._set_field(
            'scroll_limit', 
            value, 
            'uint8_t'
        )

    @property
    def scroll_throw(self) -> "uint8_t":
        return self._get_field(
            'scroll_throw', 
            'uint8_t'
        )

    @scroll_throw.setter
    def scroll_throw(self, value: "uint8_t"):
        self._set_field(
            'scroll_throw', 
            value, 
            'uint8_t'
        )

    @property
    def gesture_min_velocity(self) -> "uint8_t":
        return self._get_field(
            'gesture_min_velocity', 
            'uint8_t'
        )

    @gesture_min_velocity.setter
    def gesture_min_velocity(self, value: "uint8_t"):
        self._set_field(
            'gesture_min_velocity', 
            value, 
            'uint8_t'
        )

    @property
    def gesture_limit(self) -> "uint8_t":
        return self._get_field(
            'gesture_limit', 
            'uint8_t'
        )

    @gesture_limit.setter
    def gesture_limit(self, value: "uint8_t"):
        self._set_field(
            'gesture_limit', 
            value, 
            'uint8_t'
        )

    @property
    def long_press_time(self) -> "uint16_t":
        return self._get_field(
            'long_press_time', 
            'uint16_t'
        )

    @long_press_time.setter
    def long_press_time(self, value: "uint16_t"):
        self._set_field(
            'long_press_time', 
            value, 
            'uint16_t'
        )

    @property
    def long_press_repeat_time(self) -> "uint16_t":
        return self._get_field(
            'long_press_repeat_time', 
            'uint16_t'
        )

    @long_press_repeat_time.setter
    def long_press_repeat_time(self, value: "uint16_t"):
        self._set_field(
            'long_press_repeat_time', 
            value, 
            'uint16_t'
        )

    @property
    def pointer(self) -> "_indev_pointer_t":
        return self._get_field(
            'pointer', 
            '_indev_pointer_t'
        )

    @pointer.setter
    def pointer(self, value: "_indev_pointer_t"):
        self._set_field(
            'pointer', 
            value, 
            '_indev_pointer_t'
        )

    @property
    def keypad(self) -> "_indev_keypad_t":
        return self._get_field(
            'keypad', 
            '_indev_keypad_t'
        )

    @keypad.setter
    def keypad(self, value: "_indev_keypad_t"):
        self._set_field(
            'keypad', 
            value, 
            '_indev_keypad_t'
        )

    @property
    def cursor(self) -> "_obj_t":
        return self._get_field(
            'cursor', 
            '_obj_t'
        )

    @cursor.setter
    def cursor(self, value: "_obj_t"):
        self._set_field(
            'cursor', 
            value, 
            '_obj_t'
        )

    @property
    def group(self) -> "_group_t":
        return self._get_field(
            'group', 
            '_group_t'
        )

    @group.setter
    def group(self, value: "_group_t"):
        self._set_field(
            'group', 
            value, 
            '_group_t'
        )

    @property
    def btn_points(self) -> "point_t":
        return self._get_field(
            'btn_points', 
            'point_t'
        )

    @btn_points.setter
    def btn_points(self, value: "point_t"):
        self._set_field(
            'btn_points', 
            value, 
            'point_t'
        )

# ************************************************


# **************  CALLBACK TYPES  ****************
tick_cb_t = Callable[["_tick_dsc_t"], None]

timer_cb_t = Callable[["_timer_t"], None]

async_cb_t = Callable[[Any], None]

anim_path_cb_t = Callable[["_anim_t"], "int32_t"]

anim_custom_exec_cb_t = Callable[["_anim_t", "int32_t"], None]

anim_ready_cb_t = Callable[["_anim_t"], None]

anim_start_cb_t = Callable[["_anim_t"], None]

anim_get_value_cb_t = Callable[["_anim_t"], "int32_t"]

anim_deleted_cb_t = Callable[["_anim_t"], None]

font_get_glyph_dsc_cb_t = Callable[["_font_t", "font_glyph_dsc_t", "uint32_t", "uint32_t"], "bool"]  # NOQA

font_get_glyph_bitmap_cb_t = Callable[["_font_t", "uint32_t"], "uint8_t"]

color_filter_cb_t = Callable[["_color_filter_dsc_t", "color_t", "opa_t"], "color_t"]  # NOQA

event_cb_t = Callable[["event_t"], None]

disp_flush_cb_t = Callable[["_disp_t", "area_t", "color_t"], None]

disp_draw_ctx_init_cb_t = Callable[["_disp_t", "_draw_ctx_t"], None]

disp_draw_ctx_deinit_cb_t = Callable[["_disp_t", "_draw_ctx_t"], None]

disp_wait_cb_t = Callable[["_disp_t"], None]

obj_tree_walk_cb_t = Callable[["_obj_t", Any], "obj_tree_walk_res_t"]

layout_update_cb_t = Callable[["_obj_t", Any], None]

fs_drv_ready_cb_t = Callable[["_fs_drv_t"], "bool"]

fs_drv_open_cb_t = Callable[["_fs_drv_t", "char", "fs_mode_t"], Any]

fs_drv_close_cb_t = Callable[["_fs_drv_t", Any], "fs_res_t"]

fs_drv_read_cb_t = Callable[["_fs_drv_t", Any, Any, "uint32_t", "uint32_t"], "fs_res_t"]  # NOQA

fs_drv_write_cb_t = Callable[["_fs_drv_t", Any, Any, "uint32_t", "uint32_t"], "fs_res_t"]  # NOQA

fs_drv_seek_cb_t = Callable[["_fs_drv_t", Any, "uint32_t", "fs_whence_t"], "fs_res_t"]  # NOQA

fs_drv_tell_cb_t = Callable[["_fs_drv_t", Any, "uint32_t"], "fs_res_t"]

fs_drv_dir_open_cb_t = Callable[["_fs_drv_t", "char"], Any]

fs_drv_dir_read_cb_t = Callable[["_fs_drv_t", Any, "char"], "fs_res_t"]

fs_drv_dir_close_cb_t = Callable[["_fs_drv_t", Any], "fs_res_t"]

img_decoder_info_f_t = Callable[["_img_decoder_t", Any, "img_header_t"], "res_t"]  # NOQA

img_decoder_open_f_t = Callable[["_img_decoder_t", "_img_decoder_dsc_t"], "res_t"]  # NOQA

img_decoder_read_line_f_t = Callable[["_img_decoder_t", "_img_decoder_dsc_t", "coord_t", "coord_t", "coord_t", List["uint8_t"]], "res_t"]  # NOQA

img_decoder_close_f_t = Callable[["_img_decoder_t", "_img_decoder_dsc_t"], None]

draw_ctx_init_buf_cb_t = Callable[["_draw_ctx_t"], None]

draw_ctx_draw_rect_cb_t = Callable[["_draw_ctx_t", "draw_rect_dsc_t", "area_t"], None]  # NOQA

draw_ctx_draw_arc_cb_t = Callable[["_draw_ctx_t", "draw_arc_dsc_t", "point_t", "uint16_t", "uint16_t", "uint16_t"], None]  # NOQA

draw_ctx_draw_img_decoded_cb_t = Callable[["_draw_ctx_t", "draw_img_dsc_t", "area_t", "uint8_t", "draw_img_sup_t", "color_format_t"], None]  # NOQA

draw_ctx_draw_img_cb_t = Callable[["_draw_ctx_t", "draw_img_dsc_t", "area_t", Any], "res_t"]  # NOQA

draw_ctx_draw_letter_cb_t = Callable[["_draw_ctx_t", "draw_label_dsc_t", "point_t", "uint32_t"], None]  # NOQA

draw_ctx_draw_line_cb_t = Callable[["_draw_ctx_t", "draw_line_dsc_t", "point_t", "point_t"], None]  # NOQA

draw_ctx_draw_polygon_cb_t = Callable[["_draw_ctx_t", "draw_rect_dsc_t", List["point_t"], "uint16_t"], None]  # NOQA

draw_ctx_draw_transform_cb_t = Callable[["_draw_ctx_t", "area_t", Any, "coord_t", "coord_t", "coord_t", "draw_img_dsc_t", "draw_img_sup_t", "color_format_t", "color_t", "opa_t"], None]  # NOQA

draw_ctx_wait_for_finish_cb_t = Callable[["_draw_ctx_t"], None]

draw_ctx_buffer_copy_cb_t = Callable[["_draw_ctx_t", Any, "coord_t", "area_t", Any, "coord_t", "area_t"], None]  # NOQA

draw_ctx_buffer_convert_cb_t = Callable[["_draw_ctx_t"], None]

draw_ctx_buffer_clear_cb_t = Callable[["_draw_ctx_t"], None]

draw_ctx_layer_init_cb_t = Callable[["_draw_ctx_t", "_draw_layer_ctx_t", "draw_layer_flags_t"], "_draw_layer_ctx_t"]  # NOQA

draw_ctx_layer_adjust_cb_t = Callable[["_draw_ctx_t", "_draw_layer_ctx_t", "draw_layer_flags_t"], None]  # NOQA

draw_ctx_layer_blend_cb_t = Callable[["_draw_ctx_t", "_draw_layer_ctx_t", "draw_img_dsc_t"], None]  # NOQA

draw_ctx_layer_destroy_cb_t = Callable[["_draw_ctx_t", "draw_layer_ctx_t"], None]  # NOQA

obj_class_constructor_cb_t = Callable[["_obj_class_t", "_obj_t"], None]

obj_class_destructor_cb_t = Callable[["_obj_class_t", "_obj_t"], None]

obj_class_event_cb_t = Callable[["_obj_class_t", "_event_t"], None]

group_focus_cb_t = Callable[["_group_t"], None]

group_edge_cb_t = Callable[["_group_t", "bool"], None]

indev_read_cb_t = Callable[["_indev_t", "indev_data_t"], None]

theme_apply_cb_t = Callable[["_theme_t", "obj_t"], None]

btnmatrix_btn_draw_cb_t = Callable[["obj_t", "uint32_t", "area_t", "area_t"], "bool"]  # NOQA

imgfont_get_path_cb_t = Callable[["font_t", Any, "uint16_t", "uint32_t", "uint32_t", "coord_t", Any], "bool"]  # NOQA

msg_subscribe_cb_t = Callable[["msg_t"], None]

indev_feedback_cb_t = Callable[["_indev_t", "uint8_t"], None]
# ************************************************


# *****************  CALLBACKS  ******************
@_lib_lvgl.ffi.def_extern(
    name='py_lv_tick_cb_t'
)
def __tick_cb_t_callback_func(tick_dsc: "_tick_dsc_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(tick_dsc.user_data)
    except:  # NOQA
        print('No "user_data" field available (tick_cb_t)')
        return

    if 'tick_cb_t' in cb_store:
        func = cb_store['tick_cb_t']
        tick_dsc = _get_py_obj(
            tick_dsc,
            '_tick_dsc_t'
        )

        try:
            res = func(tick_dsc)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"tick_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_timer_cb_t'
)
def __timer_cb_t_callback_func(timer: "_timer_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(timer.user_data)
    except:  # NOQA
        print('No "user_data" field available (timer_cb_t)')
        return

    if 'timer_cb_t' in cb_store:
        func = cb_store['timer_cb_t']
        timer = _get_py_obj(
            timer,
            '_timer_t'
        )

        try:
            res = func(timer)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"timer_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_async_cb_t'
)
def __async_cb_t_callback_func(user_data: Any):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(user_data)
    except:  # NOQA
        print('No "user_data" field available (async_cb_t)')
        return

    if 'async_cb_t' in cb_store:
        func = cb_store['async_cb_t']
        try:
            res = func(None, user_data)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"async_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_path_cb_t'
)
def __anim_path_cb_t_callback_func(anim: "_anim_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_path_cb_t)')
        return

    if 'anim_path_cb_t' in cb_store:
        func = cb_store['anim_path_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )

        try:
            res = func(anim)

            if res is None:
                return None

            return _get_c_obj(res, 'int32_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_path_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_custom_exec_cb_t'
)
def __anim_custom_exec_cb_t_callback_func(anim: "_anim_t", value: "int32_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_custom_exec_cb_t)')
        return

    if 'anim_custom_exec_cb_t' in cb_store:
        func = cb_store['anim_custom_exec_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )
        value = _get_py_obj(
            value,
            'int32_t'
        )

        try:
            res = func(anim, value)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_custom_exec_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_ready_cb_t'
)
def __anim_ready_cb_t_callback_func(anim: "_anim_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_ready_cb_t)')
        return

    if 'anim_ready_cb_t' in cb_store:
        func = cb_store['anim_ready_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )

        try:
            res = func(anim)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_ready_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_start_cb_t'
)
def __anim_start_cb_t_callback_func(anim: "_anim_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_start_cb_t)')
        return

    if 'anim_start_cb_t' in cb_store:
        func = cb_store['anim_start_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )

        try:
            res = func(anim)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_start_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_get_value_cb_t'
)
def __anim_get_value_cb_t_callback_func(anim: "_anim_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_get_value_cb_t)')
        return

    if 'anim_get_value_cb_t' in cb_store:
        func = cb_store['anim_get_value_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )

        try:
            res = func(anim)

            if res is None:
                return None

            return _get_c_obj(res, 'int32_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_get_value_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_anim_deleted_cb_t'
)
def __anim_deleted_cb_t_callback_func(anim: "_anim_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(anim.user_data)
    except:  # NOQA
        print('No "user_data" field available (anim_deleted_cb_t)')
        return

    if 'anim_deleted_cb_t' in cb_store:
        func = cb_store['anim_deleted_cb_t']
        anim = _get_py_obj(
            anim,
            '_anim_t'
        )

        try:
            res = func(anim)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"anim_deleted_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_font_get_glyph_dsc_cb_t'
)
def __font_get_glyph_dsc_cb_t_callback_func(
    font: "_font_t",
    dsc: "font_glyph_dsc_t",
    letter: "uint32_t",
    letter_next: "uint32_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(font.user_data)
    except:  # NOQA
        print('No "user_data" field available (font_get_glyph_dsc_cb_t)')
        return

    if 'font_get_glyph_dsc_cb_t' in cb_store:
        func = cb_store['font_get_glyph_dsc_cb_t']
        font = _get_py_obj(
            font,
            '_font_t'
        )
        dsc = _get_py_obj(
            dsc,
            'font_glyph_dsc_t'
        )
        letter = _get_py_obj(
            letter,
            'uint32_t'
        )
        letter_next = _get_py_obj(
            letter_next,
            'uint32_t'
        )

        try:
            res = func(font, dsc, letter, letter_next)

            if res is None:
                return None

            return _get_c_obj(res, 'bool')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"font_get_glyph_dsc_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_font_get_glyph_bitmap_cb_t'
)
def __font_get_glyph_bitmap_cb_t_callback_func(font: "_font_t", letter: "uint32_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(font.user_data)
    except:  # NOQA
        print('No "user_data" field available (font_get_glyph_bitmap_cb_t)')
        return

    if 'font_get_glyph_bitmap_cb_t' in cb_store:
        func = cb_store['font_get_glyph_bitmap_cb_t']
        font = _get_py_obj(
            font,
            '_font_t'
        )
        letter = _get_py_obj(
            letter,
            'uint32_t'
        )

        try:
            res = func(font, letter)

            if res is None:
                return None

            return _get_c_obj(res, 'uint8_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"font_get_glyph_bitmap_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_color_filter_cb_t'
)
def __color_filter_cb_t_callback_func(
    dsc: "_color_filter_dsc_t",
    color: "color_t",
    opa: "opa_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(dsc.user_data)
    except:  # NOQA
        print('No "user_data" field available (color_filter_cb_t)')
        return

    if 'color_filter_cb_t' in cb_store:
        func = cb_store['color_filter_cb_t']
        dsc = _get_py_obj(
            dsc,
            '_color_filter_dsc_t'
        )
        color = _get_py_obj(
            color,
            'color_t'
        )
        opa = _get_py_obj(
            opa,
            'opa_t'
        )

        try:
            res = func(dsc, color, opa)

            if res is None:
                return None

            return _get_c_obj(res, 'color_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"color_filter_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_event_cb_t'
)
def __event_cb_t_callback_func(e: "event_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(e.user_data)
    except:  # NOQA
        print('No "user_data" field available (event_cb_t)')
        return

    if 'event_cb_t' in cb_store:
        func = cb_store['event_cb_t']
        e = _get_py_obj(
            e,
            'event_t'
        )

        try:
            res = func(e)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"event_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_disp_flush_cb_t'
)
def __disp_flush_cb_t_callback_func(
    disp: "_disp_t",
    area: "area_t",
    px_map: "color_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(disp.user_data)
    except:  # NOQA
        print('No "user_data" field available (disp_flush_cb_t)')
        return

    if 'disp_flush_cb_t' in cb_store:
        func = cb_store['disp_flush_cb_t']
        disp = _get_py_obj(
            disp,
            '_disp_t'
        )
        area = _get_py_obj(
            area,
            'area_t'
        )
        px_map = _get_py_obj(
            px_map,
            'color_t'
        )

        try:
            res = func(disp, area, px_map)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"disp_flush_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_disp_draw_ctx_init_cb_t'
)
def __disp_draw_ctx_init_cb_t_callback_func(disp: "_disp_t", draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(disp.user_data)
    except:  # NOQA
        print('No "user_data" field available (disp_draw_ctx_init_cb_t)')
        return

    if 'disp_draw_ctx_init_cb_t' in cb_store:
        func = cb_store['disp_draw_ctx_init_cb_t']
        disp = _get_py_obj(
            disp,
            '_disp_t'
        )
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(disp, draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"disp_draw_ctx_init_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_disp_draw_ctx_deinit_cb_t'
)
def __disp_draw_ctx_deinit_cb_t_callback_func(disp: "_disp_t", draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(disp.user_data)
    except:  # NOQA
        print('No "user_data" field available (disp_draw_ctx_deinit_cb_t)')
        return

    if 'disp_draw_ctx_deinit_cb_t' in cb_store:
        func = cb_store['disp_draw_ctx_deinit_cb_t']
        disp = _get_py_obj(
            disp,
            '_disp_t'
        )
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(disp, draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"disp_draw_ctx_deinit_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_disp_wait_cb_t'
)
def __disp_wait_cb_t_callback_func(disp_drv: "_disp_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(disp_drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (disp_wait_cb_t)')
        return

    if 'disp_wait_cb_t' in cb_store:
        func = cb_store['disp_wait_cb_t']
        disp_drv = _get_py_obj(
            disp_drv,
            '_disp_t'
        )

        try:
            res = func(disp_drv)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"disp_wait_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_obj_tree_walk_cb_t'
)
def __obj_tree_walk_cb_t_callback_func(obj: "_obj_t", user_data: Any):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(user_data)
    except:  # NOQA
        print('No "user_data" field available (obj_tree_walk_cb_t)')
        return

    if 'obj_tree_walk_cb_t' in cb_store:
        func = cb_store['obj_tree_walk_cb_t']
        obj = _get_py_obj(
            obj,
            '_obj_t'
        )

        try:
            res = func(None, obj, user_data)

            if res is None:
                return None

            return _get_c_obj(res, 'obj_tree_walk_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"obj_tree_walk_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_layout_update_cb_t'
)
def __layout_update_cb_t_callback_func(obj: "_obj_t", user_data: Any):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(user_data)
    except:  # NOQA
        print('No "user_data" field available (layout_update_cb_t)')
        return

    if 'layout_update_cb_t' in cb_store:
        func = cb_store['layout_update_cb_t']
        obj = _get_py_obj(
            obj,
            '_obj_t'
        )

        try:
            res = func(None, obj, user_data)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"layout_update_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_ready_cb_t'
)
def __fs_drv_ready_cb_t_callback_func(drv: "_fs_drv_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_ready_cb_t)')
        return

    if 'fs_drv_ready_cb_t' in cb_store:
        func = cb_store['fs_drv_ready_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )

        try:
            res = func(drv)

            if res is None:
                return None

            return _get_c_obj(res, 'bool')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_ready_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_open_cb_t'
)
def __fs_drv_open_cb_t_callback_func(
    drv: "_fs_drv_t",
    path: "char",
    mode: "fs_mode_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_open_cb_t)')
        return

    if 'fs_drv_open_cb_t' in cb_store:
        func = cb_store['fs_drv_open_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        path = _get_py_obj(
            path,
            'char'
        )
        mode = _get_py_obj(
            mode,
            'fs_mode_t'
        )

        try:
            res = func(drv, path, mode)

            if res is None:
                return None

            return _get_c_obj(res, 'Any')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_open_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_close_cb_t'
)
def __fs_drv_close_cb_t_callback_func(drv: "_fs_drv_t", file_p: Any):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_close_cb_t)')
        return

    if 'fs_drv_close_cb_t' in cb_store:
        func = cb_store['fs_drv_close_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        file_p = _get_py_obj(
            file_p,
            'void'
        )

        try:
            res = func(drv, file_p)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_close_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_read_cb_t'
)
def __fs_drv_read_cb_t_callback_func(
    drv: "_fs_drv_t",
    file_p: Any,
    buf: Any,
    btr: "uint32_t",
    br: "uint32_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_read_cb_t)')
        return

    if 'fs_drv_read_cb_t' in cb_store:
        func = cb_store['fs_drv_read_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        file_p = _get_py_obj(
            file_p,
            'void'
        )
        buf = _get_py_obj(
            buf,
            'void'
        )
        btr = _get_py_obj(
            btr,
            'uint32_t'
        )
        br = _get_py_obj(
            br,
            'uint32_t'
        )

        try:
            res = func(drv, file_p, buf, btr, br)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_read_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_write_cb_t'
)
def __fs_drv_write_cb_t_callback_func(
    drv: "_fs_drv_t",
    file_p: Any,
    buf: Any,
    btw: "uint32_t",
    bw: "uint32_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_write_cb_t)')
        return

    if 'fs_drv_write_cb_t' in cb_store:
        func = cb_store['fs_drv_write_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        file_p = _get_py_obj(
            file_p,
            'void'
        )
        buf = _get_py_obj(
            buf,
            'void'
        )
        btw = _get_py_obj(
            btw,
            'uint32_t'
        )
        bw = _get_py_obj(
            bw,
            'uint32_t'
        )

        try:
            res = func(drv, file_p, buf, btw, bw)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_write_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_seek_cb_t'
)
def __fs_drv_seek_cb_t_callback_func(
    drv: "_fs_drv_t",
    file_p: Any,
    pos: "uint32_t",
    whence: "fs_whence_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_seek_cb_t)')
        return

    if 'fs_drv_seek_cb_t' in cb_store:
        func = cb_store['fs_drv_seek_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        file_p = _get_py_obj(
            file_p,
            'void'
        )
        pos = _get_py_obj(
            pos,
            'uint32_t'
        )
        whence = _get_py_obj(
            whence,
            'fs_whence_t'
        )

        try:
            res = func(drv, file_p, pos, whence)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_seek_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_tell_cb_t'
)
def __fs_drv_tell_cb_t_callback_func(
    drv: "_fs_drv_t",
    file_p: Any,
    pos_p: "uint32_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_tell_cb_t)')
        return

    if 'fs_drv_tell_cb_t' in cb_store:
        func = cb_store['fs_drv_tell_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        file_p = _get_py_obj(
            file_p,
            'void'
        )
        pos_p = _get_py_obj(
            pos_p,
            'uint32_t'
        )

        try:
            res = func(drv, file_p, pos_p)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_tell_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_dir_open_cb_t'
)
def __fs_drv_dir_open_cb_t_callback_func(drv: "_fs_drv_t", path: "char"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_dir_open_cb_t)')
        return

    if 'fs_drv_dir_open_cb_t' in cb_store:
        func = cb_store['fs_drv_dir_open_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        path = _get_py_obj(
            path,
            'char'
        )

        try:
            res = func(drv, path)

            if res is None:
                return None

            return _get_c_obj(res, 'Any')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_dir_open_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_dir_read_cb_t'
)
def __fs_drv_dir_read_cb_t_callback_func(drv: "_fs_drv_t", rddir_p: Any, fn: "char"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_dir_read_cb_t)')
        return

    if 'fs_drv_dir_read_cb_t' in cb_store:
        func = cb_store['fs_drv_dir_read_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        rddir_p = _get_py_obj(
            rddir_p,
            'void'
        )
        fn = _get_py_obj(
            fn,
            'char'
        )

        try:
            res = func(drv, rddir_p, fn)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_dir_read_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_fs_drv_dir_close_cb_t'
)
def __fs_drv_dir_close_cb_t_callback_func(drv: "_fs_drv_t", rddir_p: Any):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(drv.user_data)
    except:  # NOQA
        print('No "user_data" field available (fs_drv_dir_close_cb_t)')
        return

    if 'fs_drv_dir_close_cb_t' in cb_store:
        func = cb_store['fs_drv_dir_close_cb_t']
        drv = _get_py_obj(
            drv,
            '_fs_drv_t'
        )
        rddir_p = _get_py_obj(
            rddir_p,
            'void'
        )

        try:
            res = func(drv, rddir_p)

            if res is None:
                return None

            return _get_c_obj(res, 'fs_res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"fs_drv_dir_close_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_img_decoder_info_f_t'
)
def __img_decoder_info_f_t_callback_func(
    decoder: "_img_decoder_t",
    src: Any,
    header: "img_header_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(decoder.user_data)
    except:  # NOQA
        print('No "user_data" field available (img_decoder_info_f_t)')
        return

    if 'img_decoder_info_f_t' in cb_store:
        func = cb_store['img_decoder_info_f_t']
        decoder = _get_py_obj(
            decoder,
            '_img_decoder_t'
        )
        src = _get_py_obj(
            src,
            'void'
        )
        header = _get_py_obj(
            header,
            'img_header_t'
        )

        try:
            res = func(decoder, src, header)

            if res is None:
                return None

            return _get_c_obj(res, 'res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"img_decoder_info_f_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_img_decoder_open_f_t'
)
def __img_decoder_open_f_t_callback_func(
    decoder: "_img_decoder_t",
    dsc: "_img_decoder_dsc_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(decoder.user_data)
    except:  # NOQA
        print('No "user_data" field available (img_decoder_open_f_t)')
        return

    if 'img_decoder_open_f_t' in cb_store:
        func = cb_store['img_decoder_open_f_t']
        decoder = _get_py_obj(
            decoder,
            '_img_decoder_t'
        )
        dsc = _get_py_obj(
            dsc,
            '_img_decoder_dsc_t'
        )

        try:
            res = func(decoder, dsc)

            if res is None:
                return None

            return _get_c_obj(res, 'res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"img_decoder_open_f_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_img_decoder_read_line_f_t'
)
def __img_decoder_read_line_f_t_callback_func(
    decoder: "_img_decoder_t",
    dsc: "_img_decoder_dsc_t",
    x: "coord_t",
    y: "coord_t",
    len: "coord_t",
    buf: List["uint8_t"]
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(decoder.user_data)
    except:  # NOQA
        print('No "user_data" field available (img_decoder_read_line_f_t)')
        return

    if 'img_decoder_read_line_f_t' in cb_store:
        func = cb_store['img_decoder_read_line_f_t']
        decoder = _get_py_obj(
            decoder,
            '_img_decoder_t'
        )
        dsc = _get_py_obj(
            dsc,
            '_img_decoder_dsc_t'
        )
        x = _get_py_obj(
            x,
            'coord_t'
        )
        y = _get_py_obj(
            y,
            'coord_t'
        )
        len = _get_py_obj(
            len,
            'coord_t'
        )
        buf = _get_py_obj(
            buf,
            'List[uint8_t]'
        )

        try:
            res = func(decoder, dsc, x, y, len, buf)

            if res is None:
                return None

            return _get_c_obj(res, 'res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"img_decoder_read_line_f_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_img_decoder_close_f_t'
)
def __img_decoder_close_f_t_callback_func(
    decoder: "_img_decoder_t",
    dsc: "_img_decoder_dsc_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(decoder.user_data)
    except:  # NOQA
        print('No "user_data" field available (img_decoder_close_f_t)')
        return

    if 'img_decoder_close_f_t' in cb_store:
        func = cb_store['img_decoder_close_f_t']
        decoder = _get_py_obj(
            decoder,
            '_img_decoder_t'
        )
        dsc = _get_py_obj(
            dsc,
            '_img_decoder_dsc_t'
        )

        try:
            res = func(decoder, dsc)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"img_decoder_close_f_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_init_buf_cb_t'
)
def __draw_ctx_init_buf_cb_t_callback_func(draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_init_buf_cb_t)')
        return

    if 'draw_ctx_init_buf_cb_t' in cb_store:
        func = cb_store['draw_ctx_init_buf_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_init_buf_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_rect_cb_t'
)
def __draw_ctx_draw_rect_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dsc: "draw_rect_dsc_t",
    coords: "area_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_rect_cb_t)')
        return

    if 'draw_ctx_draw_rect_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_rect_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dsc = _get_py_obj(
            dsc,
            'draw_rect_dsc_t'
        )
        coords = _get_py_obj(
            coords,
            'area_t'
        )

        try:
            res = func(draw_ctx, dsc, coords)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_rect_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_arc_cb_t'
)
def __draw_ctx_draw_arc_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dsc: "draw_arc_dsc_t",
    center: "point_t",
    radius: "uint16_t",
    start_angle: "uint16_t",
    end_angle: "uint16_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_arc_cb_t)')
        return

    if 'draw_ctx_draw_arc_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_arc_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dsc = _get_py_obj(
            dsc,
            'draw_arc_dsc_t'
        )
        center = _get_py_obj(
            center,
            'point_t'
        )
        radius = _get_py_obj(
            radius,
            'uint16_t'
        )
        start_angle = _get_py_obj(
            start_angle,
            'uint16_t'
        )
        end_angle = _get_py_obj(
            end_angle,
            'uint16_t'
        )

        try:
            res = func(
                draw_ctx,
                dsc,
                center,
                radius,
                start_angle,
                end_angle
            )

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_arc_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_img_decoded_cb_t'
)
def __draw_ctx_draw_img_decoded_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dsc: "draw_img_dsc_t",
    coords: "area_t",
    map_p: "uint8_t",
    sup: "draw_img_sup_t",
    color_format: "color_format_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_img_decoded_cb_t)')
        return

    if 'draw_ctx_draw_img_decoded_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_img_decoded_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dsc = _get_py_obj(
            dsc,
            'draw_img_dsc_t'
        )
        coords = _get_py_obj(
            coords,
            'area_t'
        )
        map_p = _get_py_obj(
            map_p,
            'uint8_t'
        )
        sup = _get_py_obj(
            sup,
            'draw_img_sup_t'
        )
        color_format = _get_py_obj(
            color_format,
            'color_format_t'
        )

        try:
            res = func(
                draw_ctx,
                dsc,
                coords,
                map_p,
                sup,
                color_format
            )

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_img_decoded_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_img_cb_t'
)
def __draw_ctx_draw_img_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    draw_dsc: "draw_img_dsc_t",
    coords: "area_t",
    src: Any
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_img_cb_t)')
        return

    if 'draw_ctx_draw_img_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_img_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        draw_dsc = _get_py_obj(
            draw_dsc,
            'draw_img_dsc_t'
        )
        coords = _get_py_obj(
            coords,
            'area_t'
        )
        src = _get_py_obj(
            src,
            'void'
        )

        try:
            res = func(draw_ctx, draw_dsc, coords, src)

            if res is None:
                return None

            return _get_c_obj(res, 'res_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_img_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_letter_cb_t'
)
def __draw_ctx_draw_letter_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dsc: "draw_label_dsc_t",
    pos_p: "point_t",
    letter: "uint32_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_letter_cb_t)')
        return

    if 'draw_ctx_draw_letter_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_letter_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dsc = _get_py_obj(
            dsc,
            'draw_label_dsc_t'
        )
        pos_p = _get_py_obj(
            pos_p,
            'point_t'
        )
        letter = _get_py_obj(
            letter,
            'uint32_t'
        )

        try:
            res = func(draw_ctx, dsc, pos_p, letter)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_letter_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_line_cb_t'
)
def __draw_ctx_draw_line_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dsc: "draw_line_dsc_t",
    point1: "point_t",
    point2: "point_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_line_cb_t)')
        return

    if 'draw_ctx_draw_line_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_line_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dsc = _get_py_obj(
            dsc,
            'draw_line_dsc_t'
        )
        point1 = _get_py_obj(
            point1,
            'point_t'
        )
        point2 = _get_py_obj(
            point2,
            'point_t'
        )

        try:
            res = func(draw_ctx, dsc, point1, point2)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_line_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_polygon_cb_t'
)
def __draw_ctx_draw_polygon_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    draw_dsc: "draw_rect_dsc_t",
    points: List["point_t"],
    point_cnt: "uint16_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_polygon_cb_t)')
        return

    if 'draw_ctx_draw_polygon_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_polygon_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        draw_dsc = _get_py_obj(
            draw_dsc,
            'draw_rect_dsc_t'
        )
        points = _get_py_obj(
            points,
            'List[point_t]'
        )
        point_cnt = _get_py_obj(
            point_cnt,
            'uint16_t'
        )

        try:
            res = func(draw_ctx, draw_dsc, points, point_cnt)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_polygon_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_draw_transform_cb_t'
)
def __draw_ctx_draw_transform_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dest_area: "area_t",
    src_buf: Any,
    src_w: "coord_t",
    src_h: "coord_t",
    src_stride: "coord_t",
    draw_dsc: "draw_img_dsc_t",
    sup: "draw_img_sup_t",
    cf: "color_format_t",
    cbuf: "color_t",
    abuf: "opa_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_draw_transform_cb_t)')
        return

    if 'draw_ctx_draw_transform_cb_t' in cb_store:
        func = cb_store['draw_ctx_draw_transform_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dest_area = _get_py_obj(
            dest_area,
            'area_t'
        )
        src_buf = _get_py_obj(
            src_buf,
            'void'
        )
        src_w = _get_py_obj(
            src_w,
            'coord_t'
        )
        src_h = _get_py_obj(
            src_h,
            'coord_t'
        )
        src_stride = _get_py_obj(
            src_stride,
            'coord_t'
        )
        draw_dsc = _get_py_obj(
            draw_dsc,
            'draw_img_dsc_t'
        )
        sup = _get_py_obj(
            sup,
            'draw_img_sup_t'
        )
        cf = _get_py_obj(
            cf,
            'color_format_t'
        )
        cbuf = _get_py_obj(
            cbuf,
            'color_t'
        )
        abuf = _get_py_obj(
            abuf,
            'opa_t'
        )

        try:
            res = func(
                draw_ctx,
                dest_area,
                src_buf,
                src_w,
                src_h,
                src_stride,
                draw_dsc,
                sup,
                cf,
                cbuf,
                abuf
            )

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_draw_transform_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_wait_for_finish_cb_t'
)
def __draw_ctx_wait_for_finish_cb_t_callback_func(draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_wait_for_finish_cb_t)')
        return

    if 'draw_ctx_wait_for_finish_cb_t' in cb_store:
        func = cb_store['draw_ctx_wait_for_finish_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_wait_for_finish_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_buffer_copy_cb_t'
)
def __draw_ctx_buffer_copy_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    dest_buf: Any,
    dest_stride: "coord_t",
    dest_area: "area_t",
    src_buf: Any,
    src_stride: "coord_t",
    src_area: "area_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_buffer_copy_cb_t)')
        return

    if 'draw_ctx_buffer_copy_cb_t' in cb_store:
        func = cb_store['draw_ctx_buffer_copy_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        dest_buf = _get_py_obj(
            dest_buf,
            'void'
        )
        dest_stride = _get_py_obj(
            dest_stride,
            'coord_t'
        )
        dest_area = _get_py_obj(
            dest_area,
            'area_t'
        )
        src_buf = _get_py_obj(
            src_buf,
            'void'
        )
        src_stride = _get_py_obj(
            src_stride,
            'coord_t'
        )
        src_area = _get_py_obj(
            src_area,
            'area_t'
        )

        try:
            res = func(
                draw_ctx,
                dest_buf,
                dest_stride,
                dest_area,
                src_buf,
                src_stride,
                src_area
            )

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_buffer_copy_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_buffer_convert_cb_t'
)
def __draw_ctx_buffer_convert_cb_t_callback_func(draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_buffer_convert_cb_t)')
        return

    if 'draw_ctx_buffer_convert_cb_t' in cb_store:
        func = cb_store['draw_ctx_buffer_convert_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_buffer_convert_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_buffer_clear_cb_t'
)
def __draw_ctx_buffer_clear_cb_t_callback_func(draw_ctx: "_draw_ctx_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_buffer_clear_cb_t)')
        return

    if 'draw_ctx_buffer_clear_cb_t' in cb_store:
        func = cb_store['draw_ctx_buffer_clear_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )

        try:
            res = func(draw_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_buffer_clear_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_layer_init_cb_t'
)
def __draw_ctx_layer_init_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    layer_ctx: "_draw_layer_ctx_t",
    flags: "draw_layer_flags_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_layer_init_cb_t)')
        return

    if 'draw_ctx_layer_init_cb_t' in cb_store:
        func = cb_store['draw_ctx_layer_init_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        layer_ctx = _get_py_obj(
            layer_ctx,
            '_draw_layer_ctx_t'
        )
        flags = _get_py_obj(
            flags,
            'draw_layer_flags_t'
        )

        try:
            res = func(draw_ctx, layer_ctx, flags)

            if res is None:
                return None

            return _get_c_obj(res, '_draw_layer_ctx_t')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_layer_init_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_layer_adjust_cb_t'
)
def __draw_ctx_layer_adjust_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    layer_ctx: "_draw_layer_ctx_t",
    flags: "draw_layer_flags_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_layer_adjust_cb_t)')
        return

    if 'draw_ctx_layer_adjust_cb_t' in cb_store:
        func = cb_store['draw_ctx_layer_adjust_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        layer_ctx = _get_py_obj(
            layer_ctx,
            '_draw_layer_ctx_t'
        )
        flags = _get_py_obj(
            flags,
            'draw_layer_flags_t'
        )

        try:
            res = func(draw_ctx, layer_ctx, flags)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_layer_adjust_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_layer_blend_cb_t'
)
def __draw_ctx_layer_blend_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    layer_ctx: "_draw_layer_ctx_t",
    draw_dsc: "draw_img_dsc_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_layer_blend_cb_t)')
        return

    if 'draw_ctx_layer_blend_cb_t' in cb_store:
        func = cb_store['draw_ctx_layer_blend_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        layer_ctx = _get_py_obj(
            layer_ctx,
            '_draw_layer_ctx_t'
        )
        draw_dsc = _get_py_obj(
            draw_dsc,
            'draw_img_dsc_t'
        )

        try:
            res = func(draw_ctx, layer_ctx, draw_dsc)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_layer_blend_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_draw_ctx_layer_destroy_cb_t'
)
def __draw_ctx_layer_destroy_cb_t_callback_func(
    draw_ctx: "_draw_ctx_t",
    layer_ctx: "draw_layer_ctx_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(draw_ctx.user_data)
    except:  # NOQA
        print('No "user_data" field available (draw_ctx_layer_destroy_cb_t)')
        return

    if 'draw_ctx_layer_destroy_cb_t' in cb_store:
        func = cb_store['draw_ctx_layer_destroy_cb_t']
        draw_ctx = _get_py_obj(
            draw_ctx,
            '_draw_ctx_t'
        )
        layer_ctx = _get_py_obj(
            layer_ctx,
            'draw_layer_ctx_t'
        )

        try:
            res = func(draw_ctx, layer_ctx)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"draw_ctx_layer_destroy_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_obj_class_constructor_cb_t'
)
def __obj_class_constructor_cb_t_callback_func(class_p: "_obj_class_t", obj: "_obj_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(class_p.user_data)
    except:  # NOQA
        print('No "user_data" field available (obj_class_constructor_cb_t)')
        return

    if 'obj_class_constructor_cb_t' in cb_store:
        func = cb_store['obj_class_constructor_cb_t']
        class_p = _get_py_obj(
            class_p,
            '_obj_class_t'
        )
        obj = _get_py_obj(
            obj,
            '_obj_t'
        )

        try:
            res = func(class_p, obj)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"obj_class_constructor_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_obj_class_destructor_cb_t'
)
def __obj_class_destructor_cb_t_callback_func(class_p: "_obj_class_t", obj: "_obj_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(class_p.user_data)
    except:  # NOQA
        print('No "user_data" field available (obj_class_destructor_cb_t)')
        return

    if 'obj_class_destructor_cb_t' in cb_store:
        func = cb_store['obj_class_destructor_cb_t']
        class_p = _get_py_obj(
            class_p,
            '_obj_class_t'
        )
        obj = _get_py_obj(
            obj,
            '_obj_t'
        )

        try:
            res = func(class_p, obj)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"obj_class_destructor_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_obj_class_event_cb_t'
)
def __obj_class_event_cb_t_callback_func(class_p: "_obj_class_t", e: "_event_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(class_p.user_data)
    except:  # NOQA
        print('No "user_data" field available (obj_class_event_cb_t)')
        return

    if 'obj_class_event_cb_t' in cb_store:
        func = cb_store['obj_class_event_cb_t']
        class_p = _get_py_obj(
            class_p,
            '_obj_class_t'
        )
        e = _get_py_obj(
            e,
            '_event_t'
        )

        try:
            res = func(class_p, e)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"obj_class_event_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_group_focus_cb_t'
)
def __group_focus_cb_t_callback_func(group: "_group_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(group.user_data)
    except:  # NOQA
        print('No "user_data" field available (group_focus_cb_t)')
        return

    if 'group_focus_cb_t' in cb_store:
        func = cb_store['group_focus_cb_t']
        group = _get_py_obj(
            group,
            '_group_t'
        )

        try:
            res = func(group)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"group_focus_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_group_edge_cb_t'
)
def __group_edge_cb_t_callback_func(group: "_group_t", focus: "bool"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(group.user_data)
    except:  # NOQA
        print('No "user_data" field available (group_edge_cb_t)')
        return

    if 'group_edge_cb_t' in cb_store:
        func = cb_store['group_edge_cb_t']
        group = _get_py_obj(
            group,
            '_group_t'
        )
        focus = _get_py_obj(
            focus,
            'bool'
        )

        try:
            res = func(group, focus)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"group_edge_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_indev_read_cb_t'
)
def __indev_read_cb_t_callback_func(indev: "_indev_t", data: "indev_data_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(indev.user_data)
    except:  # NOQA
        print('No "user_data" field available (indev_read_cb_t)')
        return

    if 'indev_read_cb_t' in cb_store:
        func = cb_store['indev_read_cb_t']
        indev = _get_py_obj(
            indev,
            '_indev_t'
        )
        data = _get_py_obj(
            data,
            'indev_data_t'
        )

        try:
            res = func(indev, data)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"indev_read_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_theme_apply_cb_t'
)
def __theme_apply_cb_t_callback_func(theme: "_theme_t", obj: "obj_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(theme.user_data)
    except:  # NOQA
        print('No "user_data" field available (theme_apply_cb_t)')
        return

    if 'theme_apply_cb_t' in cb_store:
        func = cb_store['theme_apply_cb_t']
        theme = _get_py_obj(
            theme,
            '_theme_t'
        )
        obj = _get_py_obj(
            obj,
            'obj_t'
        )

        try:
            res = func(theme, obj)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"theme_apply_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_btnmatrix_btn_draw_cb_t'
)
def __btnmatrix_btn_draw_cb_t_callback_func(
    btnm: "obj_t",
    btn_id: "uint32_t",
    draw_area: "area_t",
    clip_area: "area_t"
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(btnm.user_data)
    except:  # NOQA
        print('No "user_data" field available (btnmatrix_btn_draw_cb_t)')
        return

    if 'btnmatrix_btn_draw_cb_t' in cb_store:
        func = cb_store['btnmatrix_btn_draw_cb_t']
        btnm = _get_py_obj(
            btnm,
            'obj_t'
        )
        btn_id = _get_py_obj(
            btn_id,
            'uint32_t'
        )
        draw_area = _get_py_obj(
            draw_area,
            'area_t'
        )
        clip_area = _get_py_obj(
            clip_area,
            'area_t'
        )

        try:
            res = func(btnm, btn_id, draw_area, clip_area)

            if res is None:
                return None

            return _get_c_obj(res, 'bool')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"btnmatrix_btn_draw_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_imgfont_get_path_cb_t'
)
def __imgfont_get_path_cb_t_callback_func(
    font: "font_t",
    img_src: Any,
    len: "uint16_t",
    unicode: "uint32_t",
    unicode_next: "uint32_t",
    offset_y: "coord_t",
    user_data: Any
):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(user_data)
    except:  # NOQA
        print('No "user_data" field available (imgfont_get_path_cb_t)')
        return

    if 'imgfont_get_path_cb_t' in cb_store:
        func = cb_store['imgfont_get_path_cb_t']
        font = _get_py_obj(
            font,
            'font_t'
        )
        img_src = _get_py_obj(
            img_src,
            'void'
        )
        len = _get_py_obj(
            len,
            'uint16_t'
        )
        unicode = _get_py_obj(
            unicode,
            'uint32_t'
        )
        unicode_next = _get_py_obj(
            unicode_next,
            'uint32_t'
        )
        offset_y = _get_py_obj(
            offset_y,
            'coord_t'
        )

        try:
            res = func(
                font,
                img_src,
                len,
                unicode,
                unicode_next,
                None,
                offset_y,
                user_data
            )

            if res is None:
                return None

            return _get_c_obj(res, 'bool')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"imgfont_get_path_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_msg_subscribe_cb_t'
)
def __msg_subscribe_cb_t_callback_func(msg: "msg_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(msg.user_data)
    except:  # NOQA
        print('No "user_data" field available (msg_subscribe_cb_t)')
        return

    if 'msg_subscribe_cb_t' in cb_store:
        func = cb_store['msg_subscribe_cb_t']
        msg = _get_py_obj(
            msg,
            'msg_t'
        )

        try:
            res = func(msg)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"msg_subscribe_cb_t" is not registered')


@_lib_lvgl.ffi.def_extern(
    name='py_lv_indev_feedback_cb_t'
)
def __indev_feedback_cb_t_callback_func(indev: "_indev_t", event_code: "uint8_t"):
    try:
        cb_store = _lib_lvgl.ffi.from_handle(indev.user_data)
    except:  # NOQA
        print('No "user_data" field available (indev_feedback_cb_t)')
        return

    if 'indev_feedback_cb_t' in cb_store:
        func = cb_store['indev_feedback_cb_t']
        indev = _get_py_obj(
            indev,
            '_indev_t'
        )
        event_code = _get_py_obj(
            event_code,
            'uint8_t'
        )

        try:
            res = func(indev, event_code)

            if res is None:
                return None

            return _get_c_obj(res, 'None')

        except:  # NOQA
            import traceback

            traceback.print_exc()
    else:
        print('"indev_feedback_cb_t" is not registered')

# ************************************************


# ******************  TYPEDEFS  ******************
class tick_dsc_t(_tick_dsc_t):
    pass


class timer_t(_timer_t):
    pass


def anim_exec_xcb_t(
    value: "int32_t"
) -> None:

    value = _get_c_obj(value, 'int32_t')
    res = _lib_lvgl.lib.lv_anim_exec_xcb_t(  # NOQA
        value
    )
    return _get_py_obj(res, 'None')


class anim_t(_anim_t):
    pass


class anim_timeline_t(_anim_timeline_t):
    pass


class font_t(_font_t):
    pass


class color_t(color32_t):
    pass


class color_filter_dsc_t(_color_filter_dsc_t):
    pass


class event_t(_event_t):
    pass


class event_dsc_t(_event_dsc_t):
    pass


class disp_t(_disp_t):
    pass


class fs_drv_t(_fs_drv_t):
    pass


class img_decoder_t(_img_decoder_t):
    pass


class img_decoder_dsc_t(_img_decoder_dsc_t):
    pass


def img_cache_manager_open_xcb_t(
    src: None,
    color: "color_t",
    frame_id: "int32_t"
) -> "_img_cache_entry_t":

    src = _get_c_obj(src, 'None')
    color = _get_c_obj(color, 'color_t')
    frame_id = _get_c_obj(frame_id, 'int32_t')
    res = _lib_lvgl.lib.lv_img_cache_manager_open_xcb_t(  # NOQA
        src,
        color,
        frame_id
    )
    return _get_py_obj(res, '_img_cache_entry_t')


class grad_color_t(color_t):
    pass


class grad_t(_gradient_cache_t):
    pass


class draw_label_hint_t(_draw_label_hint_t):
    pass


def draw_mask_xcb_t(
    mask_buf: "opa_t",
    abs_x: "coord_t",
    abs_y: "coord_t",
    len: "coord_t",
    p: None
) -> "draw_mask_res_t":

    mask_buf = _get_c_obj(mask_buf, 'opa_t')
    abs_x = _get_c_obj(abs_x, 'coord_t')
    abs_y = _get_c_obj(abs_y, 'coord_t')
    len = _get_c_obj(len, 'coord_t')
    p = _get_c_obj(p, 'None')
    res = _lib_lvgl.lib.lv_draw_mask_xcb_t(  # NOQA
        mask_buf,
        abs_x,
        abs_y,
        len,
        p
    )
    return _get_py_obj(res, 'draw_mask_res_t')


class draw_mask_map_param_t(_draw_mask_map_param_t):
    pass


class draw_layer_ctx_t(_draw_layer_ctx_t):
    pass


class draw_ctx_t(_draw_ctx_t):
    pass


class obj_class_t(_obj_class_t):
    pass


class group_t(_group_t):
    pass


class indev_t(_indev_t):
    pass


class obj_t(_obj_t):
    pass


class theme_t(_theme_t):
    pass


class gd_Palette(_gd_Palette):
    pass


class gd_GCE(_gd_GCE):
    pass


def gd_GIF_plain_text_xcb_t(
    gif: _gd_GIF,
    tx: "uint16_t",
    ty: "uint16_t",
    tw: "uint16_t",
    th: "uint16_t",
    cw: "uint8_t",
    ch: "uint8_t",
    fg: "uint8_t",
    bg: "uint8_t"
) -> None:

    gif = _get_c_obj(gif, '_gd_GIF')
    tx = _get_c_obj(tx, 'uint16_t')
    ty = _get_c_obj(ty, 'uint16_t')
    tw = _get_c_obj(tw, 'uint16_t')
    th = _get_c_obj(th, 'uint16_t')
    cw = _get_c_obj(cw, 'uint8_t')
    ch = _get_c_obj(ch, 'uint8_t')
    fg = _get_c_obj(fg, 'uint8_t')
    bg = _get_c_obj(bg, 'uint8_t')
    res = _lib_lvgl.lib.gd_GIF_plain_text_xcb_t(  # NOQA
        gif,
        tx,
        ty,
        tw,
        th,
        cw,
        ch,
        fg,
        bg
    )
    return _get_py_obj(res, 'None')


def gd_GIF_comment_xcb_t(
    gif: _gd_GIF
) -> None:

    gif = _get_c_obj(gif, '_gd_GIF')
    res = _lib_lvgl.lib.gd_GIF_comment_xcb_t(  # NOQA
        gif
    )
    return _get_py_obj(res, 'None')


def gd_GIF_application_xcb_t(
    gif: _gd_GIF,
    id: List["char"],
    auth: List["char"]
) -> None:

    gif = _get_c_obj(gif, '_gd_GIF')
    id = _get_c_obj(id, 'List[char]')
    auth = _get_c_obj(auth, 'List[char]')
    res = _lib_lvgl.lib.gd_GIF_application_xcb_t(  # NOQA
        gif,
        id,
        auth
    )
    return _get_py_obj(res, 'None')


class gd_GIF(_gd_GIF):
    pass

# ************************************************


# *****************  FUNCTIONS  ******************
def tick_inc(
    tick_period: "uint32_t"
) -> None:

    tick_period = _get_c_obj(tick_period, 'uint32_t')
    res = _lib_lvgl.lib.lv_tick_inc(  # NOQA
        tick_period
    )
    return _get_py_obj(res, 'None')


def tick_set_cb(
    tick_dsc: "tick_dsc_t",
    tick_cb: "tick_cb_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'tick_cb_t.lv_tick_set_cb' in cb_store:
        store = cb_store['tick_cb_t.lv_tick_set_cb']
        if tick_cb in store:
            del store[tick_cb]
    else:
        store = _CBStore()
        cb_store['tick_cb_t.lv_tick_set_cb'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_tick_cb_t')
    store[tick_cb] = cb_store_handle
    store['tick_cb_t'] = tick_cb
    store['tick_cb_t.c_func'] = c_func

    cb_store['tick_cb_t.lv_tick_set_cb'] = store
    tick_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    tick_dsc = _get_c_obj(tick_dsc, 'tick_dsc_t')
    res = _lib_lvgl.lib.lv_tick_set_cb(  # NOQA
        tick_dsc,
        tick_cb,
        user_data
    )
    return _get_py_obj(res, 'None')


def tick_get() -> "uint32_t":

    res = _lib_lvgl.lib.lv_tick_get()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def tick_elaps(
    prev_tick: "uint32_t"
) -> "uint32_t":

    prev_tick = _get_c_obj(prev_tick, 'uint32_t')
    res = _lib_lvgl.lib.lv_tick_elaps(  # NOQA
        prev_tick
    )
    return _get_py_obj(res, 'uint32_t')


def _timer_core_init() -> None:

    res = _lib_lvgl.lib._lv_timer_core_init()  # NOQA
    return _get_py_obj(res, 'None')


def timer_handler() -> "uint32_t":

    res = _lib_lvgl.lib.lv_timer_handler()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def timer_handler_run_in_period(
    ms: "uint32_t"
) -> "uint32_t":

    ms = _get_c_obj(ms, 'uint32_t')
    res = _lib_lvgl.lib.lv_timer_handler_run_in_period(  # NOQA
        ms
    )
    return _get_py_obj(res, 'uint32_t')


def timer_create_basic() -> "timer_t":

    res = _lib_lvgl.lib.lv_timer_create_basic()  # NOQA
    return _get_py_obj(res, 'timer_t')


def timer_create(
    timer_xcb: "timer_cb_t",
    period: "uint32_t",
    user_data: Any
) -> "timer_t":
    cb_store = _global_cb_store
    if 'timer_cb_t.lv_timer_create' in cb_store:
        store = cb_store['timer_cb_t.lv_timer_create']
        if timer_xcb in store:
            del store[timer_xcb]
    else:
        store = _CBStore()
        cb_store['timer_cb_t.lv_timer_create'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_timer_cb_t')
    store[timer_xcb] = cb_store_handle
    store['timer_cb_t'] = timer_xcb
    store['timer_cb_t.c_func'] = c_func

    cb_store['timer_cb_t.lv_timer_create'] = store
    timer_xcb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    period = _get_c_obj(period, 'uint32_t')
    res = _lib_lvgl.lib.lv_timer_create(  # NOQA
        timer_xcb,
        period,
        user_data
    )
    return _get_py_obj(res, 'timer_t')


def timer_del(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_del(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def timer_pause(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_pause(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def timer_resume(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_resume(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def timer_set_cb(
    timer: "timer_t",
    timer_cb: "timer_cb_t"
) -> None:
    try:
        _ = timer.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = timer.__dict__['__cb_store__']    
    cb_store['timer_cb_t'] = timer_cb

    timer_cb = getattr(_lib_lvgl.lib, 'py_lv_timer_cb_t')
    cb_store['timer_cb_t.c_func'] = timer_cb


    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_set_cb(  # NOQA
        timer,
        timer_cb
    )
    return _get_py_obj(res, 'None')


def timer_set_period(
    timer: "timer_t",
    period: "uint32_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    period = _get_c_obj(period, 'uint32_t')
    res = _lib_lvgl.lib.lv_timer_set_period(  # NOQA
        timer,
        period
    )
    return _get_py_obj(res, 'None')


def timer_ready(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_ready(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def timer_set_repeat_count(
    timer: "timer_t",
    repeat_count: "int32_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    repeat_count = _get_c_obj(repeat_count, 'int32_t')
    res = _lib_lvgl.lib.lv_timer_set_repeat_count(  # NOQA
        timer,
        repeat_count
    )
    return _get_py_obj(res, 'None')


def timer_reset(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_reset(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def timer_enable(
    en: "bool"
) -> None:

    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_timer_enable(  # NOQA
        en
    )
    return _get_py_obj(res, 'None')


def timer_get_idle() -> "uint8_t":

    res = _lib_lvgl.lib.lv_timer_get_idle()  # NOQA
    return _get_py_obj(res, 'uint8_t')


def timer_get_next(
    timer: "timer_t"
) -> "timer_t":

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_get_next(  # NOQA
        timer
    )
    return _get_py_obj(res, 'timer_t')


def timer_get_user_data(
    timer: "timer_t"
) -> Any:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_timer_get_user_data(  # NOQA
        timer
    )
    return _get_py_obj(res, 'void')


def trigo_sin(
    angle: "int16_t"
) -> "int16_t":

    angle = _get_c_obj(angle, 'int16_t')
    res = _lib_lvgl.lib.lv_trigo_sin(  # NOQA
        angle
    )
    return _get_py_obj(res, 'int16_t')


def trigo_cos(
    angle: "int16_t"
) -> "int16_t":

    angle = _get_c_obj(angle, 'int16_t')
    res = _lib_lvgl.lib.lv_trigo_cos(  # NOQA
        angle
    )
    return _get_py_obj(res, 'int16_t')


def bezier3(
    t: "uint32_t",
    u0: "uint32_t",
    u1: "uint32_t",
    u2: "uint32_t",
    u3: "uint32_t"
) -> "uint32_t":

    t = _get_c_obj(t, 'uint32_t')
    u0 = _get_c_obj(u0, 'uint32_t')
    u1 = _get_c_obj(u1, 'uint32_t')
    u2 = _get_c_obj(u2, 'uint32_t')
    u3 = _get_c_obj(u3, 'uint32_t')
    res = _lib_lvgl.lib.lv_bezier3(  # NOQA
        t,
        u0,
        u1,
        u2,
        u3
    )
    return _get_py_obj(res, 'uint32_t')


def atan2(
    x: int_,
    y: int_
) -> "uint16_t":

    x = _get_c_obj(x, 'int_')
    y = _get_c_obj(y, 'int_')
    res = _lib_lvgl.lib.lv_atan2(  # NOQA
        x,
        y
    )
    return _get_py_obj(res, 'uint16_t')


def sqrt(
    x: "uint32_t",
    q: "sqrt_res_t",
    mask: "uint32_t"
) -> None:

    x = _get_c_obj(x, 'uint32_t')
    q = _get_c_obj(q, 'sqrt_res_t')
    mask = _get_c_obj(mask, 'uint32_t')
    res = _lib_lvgl.lib.lv_sqrt(  # NOQA
        x,
        q,
        mask
    )
    return _get_py_obj(res, 'None')


def pow(
    base: "int64_t",
    exp: "int8_t"
) -> "int64_t":

    base = _get_c_obj(base, 'int64_t')
    exp = _get_c_obj(exp, 'int8_t')
    res = _lib_lvgl.lib.lv_pow(  # NOQA
        base,
        exp
    )
    return _get_py_obj(res, 'int64_t')


def map(
    x: "int32_t",
    min_in: "int32_t",
    max_in: "int32_t",
    min_out: "int32_t",
    max_out: "int32_t"
) -> "int32_t":

    x = _get_c_obj(x, 'int32_t')
    min_in = _get_c_obj(min_in, 'int32_t')
    max_in = _get_c_obj(max_in, 'int32_t')
    min_out = _get_c_obj(min_out, 'int32_t')
    max_out = _get_c_obj(max_out, 'int32_t')
    res = _lib_lvgl.lib.lv_map(  # NOQA
        x,
        min_in,
        max_in,
        min_out,
        max_out
    )
    return _get_py_obj(res, 'int32_t')


def rand(
    min: "uint32_t",
    max: "uint32_t"
) -> "uint32_t":

    min = _get_c_obj(min, 'uint32_t')
    max = _get_c_obj(max, 'uint32_t')
    res = _lib_lvgl.lib.lv_rand(  # NOQA
        min,
        max
    )
    return _get_py_obj(res, 'uint32_t')


def malloc(
    size: "size_t"
) -> Any:

    size = _get_c_obj(size, 'size_t')
    res = _lib_lvgl.lib.lv_malloc(  # NOQA
        size
    )
    return _get_py_obj(res, 'void')


def free(
    data: None
) -> None:

    data = _get_c_obj(data, 'None')
    res = _lib_lvgl.lib.lv_free(  # NOQA
        data
    )
    return _get_py_obj(res, 'None')


def realloc(
    data_p: None,
    new_size: "size_t"
) -> Any:

    data_p = _get_c_obj(data_p, 'None')
    new_size = _get_c_obj(new_size, 'size_t')
    res = _lib_lvgl.lib.lv_realloc(  # NOQA
        data_p,
        new_size
    )
    return _get_py_obj(res, 'void')


def memcpy(
    dst: None,
    src: None,
    len: "size_t"
) -> Any:

    dst = _get_c_obj(dst, 'None')
    src = _get_c_obj(src, 'None')
    len = _get_c_obj(len, 'size_t')
    res = _lib_lvgl.lib.lv_memcpy(  # NOQA
        dst,
        src,
        len
    )
    return _get_py_obj(res, 'void')


def memset(
    dst: None,
    v: "uint8_t",
    len: "size_t"
) -> None:

    dst = _get_c_obj(dst, 'None')
    v = _get_c_obj(v, 'uint8_t')
    len = _get_c_obj(len, 'size_t')
    res = _lib_lvgl.lib.lv_memset(  # NOQA
        dst,
        v,
        len
    )
    return _get_py_obj(res, 'None')


def memzero(
    dst: None,
    len: "size_t"
) -> None:

    dst = _get_c_obj(dst, 'None')
    len = _get_c_obj(len, 'size_t')
    res = _lib_lvgl.lib.lv_memzero(  # NOQA
        dst,
        len
    )
    return _get_py_obj(res, 'None')


def strlen(
    str: "char"
) -> "size_t":

    str = _get_c_obj(str, 'char')
    res = _lib_lvgl.lib.lv_strlen(  # NOQA
        str
    )
    return _get_py_obj(res, 'size_t')


def strncpy(
    dst: "char",
    src: "char",
    dest_size: "size_t"
) -> "char":

    dst = _get_c_obj(dst, 'char')
    src = _get_c_obj(src, 'char')
    dest_size = _get_c_obj(dest_size, 'size_t')
    res = _lib_lvgl.lib.lv_strncpy(  # NOQA
        dst,
        src,
        dest_size
    )
    return _get_py_obj(res, 'char')


def strcpy(
    dst: "char",
    src: "char"
) -> "char":

    dst = _get_c_obj(dst, 'char')
    src = _get_c_obj(src, 'char')
    res = _lib_lvgl.lib.lv_strcpy(  # NOQA
        dst,
        src
    )
    return _get_py_obj(res, 'char')


def mem_test() -> "res_t":

    res = _lib_lvgl.lib.lv_mem_test()  # NOQA
    return _get_py_obj(res, 'res_t')


def mem_monitor(
    mon_p: "mem_monitor_t"
) -> None:

    mon_p = _get_c_obj(mon_p, 'mem_monitor_t')
    res = _lib_lvgl.lib.lv_mem_monitor(  # NOQA
        mon_p
    )
    return _get_py_obj(res, 'None')


def async_call(
    async_xcb: "async_cb_t",
    user_data: Any
) -> "res_t":
    cb_store = _global_cb_store
    if 'async_cb_t.lv_async_call' in cb_store:
        store = cb_store['async_cb_t.lv_async_call']
        if async_xcb in store:
            del store[async_xcb]
    else:
        store = _CBStore()
        cb_store['async_cb_t.lv_async_call'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_async_cb_t')
    store[async_xcb] = cb_store_handle
    store['async_cb_t'] = async_xcb
    store['async_cb_t.c_func'] = c_func

    cb_store['async_cb_t.lv_async_call'] = store
    async_xcb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    res = _lib_lvgl.lib.lv_async_call(  # NOQA
        async_xcb,
        user_data
    )
    return _get_py_obj(res, 'res_t')


def async_call_cancel(
    async_xcb: "async_cb_t",
    user_data: Any
) -> "res_t":
    cb_store = _global_cb_store
    if 'async_cb_t.lv_async_call_cancel' in cb_store:
        store = cb_store['async_cb_t.lv_async_call_cancel']
        if async_xcb in store:
            del store[async_xcb]
    else:
        store = _CBStore()
        cb_store['async_cb_t.lv_async_call_cancel'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_async_cb_t')
    store[async_xcb] = cb_store_handle
    store['async_cb_t'] = async_xcb
    store['async_cb_t.c_func'] = c_func

    cb_store['async_cb_t.lv_async_call_cancel'] = store
    async_xcb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    res = _lib_lvgl.lib.lv_async_call_cancel(  # NOQA
        async_xcb,
        user_data
    )
    return _get_py_obj(res, 'res_t')


def _anim_core_init() -> None:

    res = _lib_lvgl.lib._lv_anim_core_init()  # NOQA
    return _get_py_obj(res, 'None')


def anim_init(
    a: "anim_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_init(  # NOQA
        a
    )
    return _get_py_obj(res, 'None')


def anim_set_var(
    a: "anim_t",
    var: None
) -> None:

    a = _get_c_obj(a, 'anim_t')
    var = _get_c_obj(var, 'None')
    res = _lib_lvgl.lib.lv_anim_set_var(  # NOQA
        a,
        var
    )
    return _get_py_obj(res, 'None')


def anim_set_exec_cb(
    a: "anim_t",
    exec_cb: "anim_exec_xcb_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    exec_cb = _get_c_obj(exec_cb, 'anim_exec_xcb_t')
    res = _lib_lvgl.lib.lv_anim_set_exec_cb(  # NOQA
        a,
        exec_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_time(
    a: "anim_t",
    duration: "uint32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    duration = _get_c_obj(duration, 'uint32_t')
    res = _lib_lvgl.lib.lv_anim_set_time(  # NOQA
        a,
        duration
    )
    return _get_py_obj(res, 'None')


def anim_set_delay(
    a: "anim_t",
    delay: "uint32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_anim_set_delay(  # NOQA
        a,
        delay
    )
    return _get_py_obj(res, 'None')


def anim_set_values(
    a: "anim_t",
    start: "int32_t",
    end: "int32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    start = _get_c_obj(start, 'int32_t')
    end = _get_c_obj(end, 'int32_t')
    res = _lib_lvgl.lib.lv_anim_set_values(  # NOQA
        a,
        start,
        end
    )
    return _get_py_obj(res, 'None')


def anim_set_custom_exec_cb(
    a: "anim_t",
    exec_cb: "anim_custom_exec_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_custom_exec_cb_t'] = exec_cb

    exec_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_custom_exec_cb_t')
    cb_store['anim_custom_exec_cb_t.c_func'] = exec_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_custom_exec_cb(  # NOQA
        a,
        exec_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_path_cb(
    a: "anim_t",
    path_cb: "anim_path_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_path_cb_t'] = path_cb

    path_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_path_cb_t')
    cb_store['anim_path_cb_t.c_func'] = path_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_path_cb(  # NOQA
        a,
        path_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_start_cb(
    a: "anim_t",
    start_cb: "anim_start_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_start_cb_t'] = start_cb

    start_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_start_cb_t')
    cb_store['anim_start_cb_t.c_func'] = start_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_start_cb(  # NOQA
        a,
        start_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_get_value_cb(
    a: "anim_t",
    get_value_cb: "anim_get_value_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_get_value_cb_t'] = get_value_cb

    get_value_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_get_value_cb_t')
    cb_store['anim_get_value_cb_t.c_func'] = get_value_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_get_value_cb(  # NOQA
        a,
        get_value_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_ready_cb(
    a: "anim_t",
    ready_cb: "anim_ready_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_ready_cb_t'] = ready_cb

    ready_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_ready_cb_t')
    cb_store['anim_ready_cb_t.c_func'] = ready_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_ready_cb(  # NOQA
        a,
        ready_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_deleted_cb(
    a: "anim_t",
    deleted_cb: "anim_deleted_cb_t"
) -> None:
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_deleted_cb_t'] = deleted_cb

    deleted_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_deleted_cb_t')
    cb_store['anim_deleted_cb_t.c_func'] = deleted_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_deleted_cb(  # NOQA
        a,
        deleted_cb
    )
    return _get_py_obj(res, 'None')


def anim_set_playback_time(
    a: "anim_t",
    time: "uint32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    time = _get_c_obj(time, 'uint32_t')
    res = _lib_lvgl.lib.lv_anim_set_playback_time(  # NOQA
        a,
        time
    )
    return _get_py_obj(res, 'None')


def anim_set_playback_delay(
    a: "anim_t",
    delay: "uint32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_anim_set_playback_delay(  # NOQA
        a,
        delay
    )
    return _get_py_obj(res, 'None')


def anim_set_repeat_count(
    a: "anim_t",
    cnt: "uint16_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    cnt = _get_c_obj(cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_anim_set_repeat_count(  # NOQA
        a,
        cnt
    )
    return _get_py_obj(res, 'None')


def anim_set_repeat_delay(
    a: "anim_t",
    delay: "uint32_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_anim_set_repeat_delay(  # NOQA
        a,
        delay
    )
    return _get_py_obj(res, 'None')


def anim_set_early_apply(
    a: "anim_t",
    en: "bool"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_anim_set_early_apply(  # NOQA
        a,
        en
    )
    return _get_py_obj(res, 'None')


def anim_set_user_data(
    a: "anim_t",
    user_data: Any
) -> None:

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_set_user_data(  # NOQA
        a,
        user_data
    )
    return _get_py_obj(res, 'None')


def anim_start(
    a: "anim_t"
) -> "anim_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_start(  # NOQA
        a
    )
    return _get_py_obj(res, 'anim_t')


def anim_get_delay(
    a: "anim_t"
) -> "uint32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_get_delay(  # NOQA
        a
    )
    return _get_py_obj(res, 'uint32_t')


def anim_get_playtime(
    a: "anim_t"
) -> "uint32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_get_playtime(  # NOQA
        a
    )
    return _get_py_obj(res, 'uint32_t')


def anim_get_time(
    a: "anim_t"
) -> "uint32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_get_time(  # NOQA
        a
    )
    return _get_py_obj(res, 'uint32_t')


def anim_get_repeat_count(
    a: "anim_t"
) -> "uint16_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_get_repeat_count(  # NOQA
        a
    )
    return _get_py_obj(res, 'uint16_t')


def anim_get_user_data(
    a: "anim_t"
) -> Any:

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_get_user_data(  # NOQA
        a
    )
    return _get_py_obj(res, 'void')


def anim_del(
    var: None,
    exec_cb: "anim_exec_xcb_t"
) -> "bool":

    var = _get_c_obj(var, 'None')
    exec_cb = _get_c_obj(exec_cb, 'anim_exec_xcb_t')
    res = _lib_lvgl.lib.lv_anim_del(  # NOQA
        var,
        exec_cb
    )
    return _get_py_obj(res, 'bool')


def anim_del_all() -> None:

    res = _lib_lvgl.lib.lv_anim_del_all()  # NOQA
    return _get_py_obj(res, 'None')


def anim_get(
    var: None,
    exec_cb: "anim_exec_xcb_t"
) -> "anim_t":

    var = _get_c_obj(var, 'None')
    exec_cb = _get_c_obj(exec_cb, 'anim_exec_xcb_t')
    res = _lib_lvgl.lib.lv_anim_get(  # NOQA
        var,
        exec_cb
    )
    return _get_py_obj(res, 'anim_t')


def anim_get_timer() -> _timer_t:

    res = _lib_lvgl.lib.lv_anim_get_timer()  # NOQA
    return _get_py_obj(res, '_timer_t')


def anim_custom_del(
    a: "anim_t",
    exec_cb: "anim_custom_exec_cb_t"
) -> "bool":
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_custom_exec_cb_t'] = exec_cb

    exec_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_custom_exec_cb_t')
    cb_store['anim_custom_exec_cb_t.c_func'] = exec_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_custom_del(  # NOQA
        a,
        exec_cb
    )
    return _get_py_obj(res, 'bool')


def anim_custom_get(
    a: "anim_t",
    exec_cb: "anim_custom_exec_cb_t"
) -> "anim_t":
    try:
        _ = a.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = a.__dict__['__cb_store__']    
    cb_store['anim_custom_exec_cb_t'] = exec_cb

    exec_cb = getattr(_lib_lvgl.lib, 'py_lv_anim_custom_exec_cb_t')
    cb_store['anim_custom_exec_cb_t.c_func'] = exec_cb


    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_custom_get(  # NOQA
        a,
        exec_cb
    )
    return _get_py_obj(res, 'anim_t')


def anim_count_running() -> "uint16_t":

    res = _lib_lvgl.lib.lv_anim_count_running()  # NOQA
    return _get_py_obj(res, 'uint16_t')


def anim_speed_to_time(
    speed: "uint32_t",
    start: "int32_t",
    end: "int32_t"
) -> "uint32_t":

    speed = _get_c_obj(speed, 'uint32_t')
    start = _get_c_obj(start, 'int32_t')
    end = _get_c_obj(end, 'int32_t')
    res = _lib_lvgl.lib.lv_anim_speed_to_time(  # NOQA
        speed,
        start,
        end
    )
    return _get_py_obj(res, 'uint32_t')


def anim_refr_now() -> None:

    res = _lib_lvgl.lib.lv_anim_refr_now()  # NOQA
    return _get_py_obj(res, 'None')


def anim_path_linear(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_linear(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_ease_in(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_ease_in(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_ease_out(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_ease_out(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_ease_in_out(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_ease_in_out(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_overshoot(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_overshoot(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_bounce(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_bounce(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_path_step(
    a: "anim_t"
) -> "int32_t":

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_path_step(  # NOQA
        a
    )
    return _get_py_obj(res, 'int32_t')


def anim_timeline_create() -> "anim_timeline_t":

    res = _lib_lvgl.lib.lv_anim_timeline_create()  # NOQA
    return _get_py_obj(res, 'anim_timeline_t')


def anim_timeline_del(
    at: "anim_timeline_t"
) -> None:

    at = _get_c_obj(at, 'anim_timeline_t')
    res = _lib_lvgl.lib.lv_anim_timeline_del(  # NOQA
        at
    )
    return _get_py_obj(res, 'None')


def anim_timeline_add(
    at: "anim_timeline_t",
    start_time: "uint32_t",
    a: "anim_t"
) -> None:

    at = _get_c_obj(at, 'anim_timeline_t')
    start_time = _get_c_obj(start_time, 'uint32_t')
    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_anim_timeline_add(  # NOQA
        at,
        start_time,
        a
    )
    return _get_py_obj(res, 'None')


def anim_timeline_start(
    at: "anim_timeline_t"
) -> "uint32_t":

    at = _get_c_obj(at, 'anim_timeline_t')
    res = _lib_lvgl.lib.lv_anim_timeline_start(  # NOQA
        at
    )
    return _get_py_obj(res, 'uint32_t')


def anim_timeline_stop(
    at: "anim_timeline_t"
) -> None:

    at = _get_c_obj(at, 'anim_timeline_t')
    res = _lib_lvgl.lib.lv_anim_timeline_stop(  # NOQA
        at
    )
    return _get_py_obj(res, 'None')


def anim_timeline_set_reverse(
    at: "anim_timeline_t",
    reverse: "bool"
) -> None:

    at = _get_c_obj(at, 'anim_timeline_t')
    reverse = _get_c_obj(reverse, 'bool')
    res = _lib_lvgl.lib.lv_anim_timeline_set_reverse(  # NOQA
        at,
        reverse
    )
    return _get_py_obj(res, 'None')


def anim_timeline_set_progress(
    at: "anim_timeline_t",
    progress: "uint16_t"
) -> None:

    at = _get_c_obj(at, 'anim_timeline_t')
    progress = _get_c_obj(progress, 'uint16_t')
    res = _lib_lvgl.lib.lv_anim_timeline_set_progress(  # NOQA
        at,
        progress
    )
    return _get_py_obj(res, 'None')


def anim_timeline_get_playtime(
    at: "anim_timeline_t"
) -> "uint32_t":

    at = _get_c_obj(at, 'anim_timeline_t')
    res = _lib_lvgl.lib.lv_anim_timeline_get_playtime(  # NOQA
        at
    )
    return _get_py_obj(res, 'uint32_t')


def anim_timeline_get_reverse(
    at: "anim_timeline_t"
) -> "bool":

    at = _get_c_obj(at, 'anim_timeline_t')
    res = _lib_lvgl.lib.lv_anim_timeline_get_reverse(  # NOQA
        at
    )
    return _get_py_obj(res, 'bool')


def snprintf_builtin(
    buffer: "char",
    count: "size_t",
    format: "char",
    *args
) -> int_:

    buffer = _get_c_obj(buffer, 'char')
    count = _get_c_obj(count, 'size_t')
    format = _get_c_obj(format, 'char')

    args = list(args)
    for i, arg in enumerate(args):
        args[i] = _get_c_obj(arg, None)
    
    res = _lib_lvgl.lib.lv_snprintf_builtin(  # NOQA
        buffer,
        count,
        format,
        *args
    )
    return _get_py_obj(res, 'int_')


def vsnprintf_builtin(
    buffer: "char",
    count: "size_t",
    format: "char",
    va: "va_list"
) -> int_:

    buffer = _get_c_obj(buffer, 'char')
    count = _get_c_obj(count, 'size_t')
    format = _get_c_obj(format, 'char')
    va = _get_c_obj(va, 'va_list')
    res = _lib_lvgl.lib.lv_vsnprintf_builtin(  # NOQA
        buffer,
        count,
        format,
        va
    )
    return _get_py_obj(res, 'int_')


def area_set(
    area_p: "area_t",
    x1: "coord_t",
    y1: "coord_t",
    x2: "coord_t",
    y2: "coord_t"
) -> None:

    area_p = _get_c_obj(area_p, 'area_t')
    x1 = _get_c_obj(x1, 'coord_t')
    y1 = _get_c_obj(y1, 'coord_t')
    x2 = _get_c_obj(x2, 'coord_t')
    y2 = _get_c_obj(y2, 'coord_t')
    res = _lib_lvgl.lib.lv_area_set(  # NOQA
        area_p,
        x1,
        y1,
        x2,
        y2
    )
    return _get_py_obj(res, 'None')


def area_copy(
    dest: "area_t",
    src: "area_t"
) -> None:

    dest = _get_c_obj(dest, 'area_t')
    src = _get_c_obj(src, 'area_t')
    res = _lib_lvgl.lib.lv_area_copy(  # NOQA
        dest,
        src
    )
    return _get_py_obj(res, 'None')


def area_get_width(
    area_p: "area_t"
) -> "coord_t":

    area_p = _get_c_obj(area_p, 'area_t')
    res = _lib_lvgl.lib.lv_area_get_width(  # NOQA
        area_p
    )
    return _get_py_obj(res, 'coord_t')


def area_get_height(
    area_p: "area_t"
) -> "coord_t":

    area_p = _get_c_obj(area_p, 'area_t')
    res = _lib_lvgl.lib.lv_area_get_height(  # NOQA
        area_p
    )
    return _get_py_obj(res, 'coord_t')


def area_set_width(
    area_p: "area_t",
    w: "coord_t"
) -> None:

    area_p = _get_c_obj(area_p, 'area_t')
    w = _get_c_obj(w, 'coord_t')
    res = _lib_lvgl.lib.lv_area_set_width(  # NOQA
        area_p,
        w
    )
    return _get_py_obj(res, 'None')


def area_set_height(
    area_p: "area_t",
    h: "coord_t"
) -> None:

    area_p = _get_c_obj(area_p, 'area_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_area_set_height(  # NOQA
        area_p,
        h
    )
    return _get_py_obj(res, 'None')


def _area_set_pos(
    area_p: "area_t",
    x: "coord_t",
    y: "coord_t"
) -> None:

    area_p = _get_c_obj(area_p, 'area_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib._lv_area_set_pos(  # NOQA
        area_p,
        x,
        y
    )
    return _get_py_obj(res, 'None')


def area_get_size(
    area_p: "area_t"
) -> "uint32_t":

    area_p = _get_c_obj(area_p, 'area_t')
    res = _lib_lvgl.lib.lv_area_get_size(  # NOQA
        area_p
    )
    return _get_py_obj(res, 'uint32_t')


def area_increase(
    area: "area_t",
    w_extra: "coord_t",
    h_extra: "coord_t"
) -> None:

    area = _get_c_obj(area, 'area_t')
    w_extra = _get_c_obj(w_extra, 'coord_t')
    h_extra = _get_c_obj(h_extra, 'coord_t')
    res = _lib_lvgl.lib.lv_area_increase(  # NOQA
        area,
        w_extra,
        h_extra
    )
    return _get_py_obj(res, 'None')


def area_move(
    area: "area_t",
    x_ofs: "coord_t",
    y_ofs: "coord_t"
) -> None:

    area = _get_c_obj(area, 'area_t')
    x_ofs = _get_c_obj(x_ofs, 'coord_t')
    y_ofs = _get_c_obj(y_ofs, 'coord_t')
    res = _lib_lvgl.lib.lv_area_move(  # NOQA
        area,
        x_ofs,
        y_ofs
    )
    return _get_py_obj(res, 'None')


def _area_intersect(
    res_p: "area_t",
    a1_p: "area_t",
    a2_p: "area_t"
) -> "bool":

    res_p = _get_c_obj(res_p, 'area_t')
    a1_p = _get_c_obj(a1_p, 'area_t')
    a2_p = _get_c_obj(a2_p, 'area_t')
    res = _lib_lvgl.lib._lv_area_intersect(  # NOQA
        res_p,
        a1_p,
        a2_p
    )
    return _get_py_obj(res, 'bool')


def _area_join(
    a_res_p: "area_t",
    a1_p: "area_t",
    a2_p: "area_t"
) -> None:

    a_res_p = _get_c_obj(a_res_p, 'area_t')
    a1_p = _get_c_obj(a1_p, 'area_t')
    a2_p = _get_c_obj(a2_p, 'area_t')
    res = _lib_lvgl.lib._lv_area_join(  # NOQA
        a_res_p,
        a1_p,
        a2_p
    )
    return _get_py_obj(res, 'None')


def _area_is_point_on(
    a_p: "area_t",
    p_p: "point_t",
    radius: "coord_t"
) -> "bool":

    a_p = _get_c_obj(a_p, 'area_t')
    p_p = _get_c_obj(p_p, 'point_t')
    radius = _get_c_obj(radius, 'coord_t')
    res = _lib_lvgl.lib._lv_area_is_point_on(  # NOQA
        a_p,
        p_p,
        radius
    )
    return _get_py_obj(res, 'bool')


def _area_is_on(
    a1_p: "area_t",
    a2_p: "area_t"
) -> "bool":

    a1_p = _get_c_obj(a1_p, 'area_t')
    a2_p = _get_c_obj(a2_p, 'area_t')
    res = _lib_lvgl.lib._lv_area_is_on(  # NOQA
        a1_p,
        a2_p
    )
    return _get_py_obj(res, 'bool')


def _area_is_in(
    ain_p: "area_t",
    aholder_p: "area_t",
    radius: "coord_t"
) -> "bool":

    ain_p = _get_c_obj(ain_p, 'area_t')
    aholder_p = _get_c_obj(aholder_p, 'area_t')
    radius = _get_c_obj(radius, 'coord_t')
    res = _lib_lvgl.lib._lv_area_is_in(  # NOQA
        ain_p,
        aholder_p,
        radius
    )
    return _get_py_obj(res, 'bool')


def _area_is_out(
    aout_p: "area_t",
    aholder_p: "area_t",
    radius: "coord_t"
) -> "bool":

    aout_p = _get_c_obj(aout_p, 'area_t')
    aholder_p = _get_c_obj(aholder_p, 'area_t')
    radius = _get_c_obj(radius, 'coord_t')
    res = _lib_lvgl.lib._lv_area_is_out(  # NOQA
        aout_p,
        aholder_p,
        radius
    )
    return _get_py_obj(res, 'bool')


def _area_is_equal(
    a: "area_t",
    b: "area_t"
) -> "bool":

    a = _get_c_obj(a, 'area_t')
    b = _get_c_obj(b, 'area_t')
    res = _lib_lvgl.lib._lv_area_is_equal(  # NOQA
        a,
        b
    )
    return _get_py_obj(res, 'bool')


def area_align(
    base: "area_t",
    to_align: "area_t",
    align: "align_t",
    ofs_x: "coord_t",
    ofs_y: "coord_t"
) -> None:

    base = _get_c_obj(base, 'area_t')
    to_align = _get_c_obj(to_align, 'area_t')
    align = _get_c_obj(align, 'align_t')
    ofs_x = _get_c_obj(ofs_x, 'coord_t')
    ofs_y = _get_c_obj(ofs_y, 'coord_t')
    res = _lib_lvgl.lib.lv_area_align(  # NOQA
        base,
        to_align,
        align,
        ofs_x,
        ofs_y
    )
    return _get_py_obj(res, 'None')


def point_transform(
    p: "point_t",
    angle: "int32_t",
    zoom: "int32_t",
    pivot: "point_t"
) -> None:

    p = _get_c_obj(p, 'point_t')
    angle = _get_c_obj(angle, 'int32_t')
    zoom = _get_c_obj(zoom, 'int32_t')
    pivot = _get_c_obj(pivot, 'point_t')
    res = _lib_lvgl.lib.lv_point_transform(  # NOQA
        p,
        angle,
        zoom,
        pivot
    )
    return _get_py_obj(res, 'None')


def pct(
    x: "coord_t"
) -> "coord_t":

    x = _get_c_obj(x, 'coord_t')
    res = _lib_lvgl.lib.lv_pct(  # NOQA
        x
    )
    return _get_py_obj(res, 'coord_t')


def font_get_glyph_bitmap(
    font_p: "font_t",
    letter: "uint32_t"
) -> "uint8_t":

    font_p = _get_c_obj(font_p, 'font_t')
    letter = _get_c_obj(letter, 'uint32_t')
    res = _lib_lvgl.lib.lv_font_get_glyph_bitmap(  # NOQA
        font_p,
        letter
    )
    return _get_py_obj(res, 'uint8_t')


def font_get_glyph_dsc(
    font_p: "font_t",
    dsc_out: "font_glyph_dsc_t",
    letter: "uint32_t",
    letter_next: "uint32_t"
) -> "bool":

    font_p = _get_c_obj(font_p, 'font_t')
    dsc_out = _get_c_obj(dsc_out, 'font_glyph_dsc_t')
    letter = _get_c_obj(letter, 'uint32_t')
    letter_next = _get_c_obj(letter_next, 'uint32_t')
    res = _lib_lvgl.lib.lv_font_get_glyph_dsc(  # NOQA
        font_p,
        dsc_out,
        letter,
        letter_next
    )
    return _get_py_obj(res, 'bool')


def font_get_glyph_width(
    font: "font_t",
    letter: "uint32_t",
    letter_next: "uint32_t"
) -> "uint16_t":

    font = _get_c_obj(font, 'font_t')
    letter = _get_c_obj(letter, 'uint32_t')
    letter_next = _get_c_obj(letter_next, 'uint32_t')
    res = _lib_lvgl.lib.lv_font_get_glyph_width(  # NOQA
        font,
        letter,
        letter_next
    )
    return _get_py_obj(res, 'uint16_t')


def font_get_line_height(
    font_p: "font_t"
) -> "coord_t":

    font_p = _get_c_obj(font_p, 'font_t')
    res = _lib_lvgl.lib.lv_font_get_line_height(  # NOQA
        font_p
    )
    return _get_py_obj(res, 'coord_t')


def font_default() -> "font_t":

    res = _lib_lvgl.lib.lv_font_default()  # NOQA
    return _get_py_obj(res, 'font_t')


def color_to_native(
    src_buf: "uint8_t",
    src_cf: "color_format_t",
    c_out: "color_t",
    a_out: "opa_t",
    alpha_color: "color_t",
    px_cnt: "uint32_t"
) -> None:

    src_buf = _get_c_obj(src_buf, 'uint8_t')
    src_cf = _get_c_obj(src_cf, 'color_format_t')
    c_out = _get_c_obj(c_out, 'color_t')
    a_out = _get_c_obj(a_out, 'opa_t')
    alpha_color = _get_c_obj(alpha_color, 'color_t')
    px_cnt = _get_c_obj(px_cnt, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_to_native(  # NOQA
        src_buf,
        src_cf,
        c_out,
        a_out,
        alpha_color,
        px_cnt
    )
    return _get_py_obj(res, 'None')


def color_from_native(
    src_buf: "color_t",
    dest_buf: "uint8_t",
    dest_cf: "color_format_t",
    px_cnt: "uint32_t"
) -> None:

    src_buf = _get_c_obj(src_buf, 'color_t')
    dest_buf = _get_c_obj(dest_buf, 'uint8_t')
    dest_cf = _get_c_obj(dest_cf, 'color_format_t')
    px_cnt = _get_c_obj(px_cnt, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_from_native(  # NOQA
        src_buf,
        dest_buf,
        dest_cf,
        px_cnt
    )
    return _get_py_obj(res, 'None')


def color_from_native_alpha(
    src_buf: "uint8_t",
    dest_buf: "uint8_t",
    dest_cf: "color_format_t",
    px_cnt: "uint32_t"
) -> None:

    src_buf = _get_c_obj(src_buf, 'uint8_t')
    dest_buf = _get_c_obj(dest_buf, 'uint8_t')
    dest_cf = _get_c_obj(dest_cf, 'color_format_t')
    px_cnt = _get_c_obj(px_cnt, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_from_native_alpha(  # NOQA
        src_buf,
        dest_buf,
        dest_cf,
        px_cnt
    )
    return _get_py_obj(res, 'None')


def color_format_get_size(
    src_cf: "color_format_t"
) -> "uint8_t":

    src_cf = _get_c_obj(src_cf, 'color_format_t')
    res = _lib_lvgl.lib.lv_color_format_get_size(  # NOQA
        src_cf
    )
    return _get_py_obj(res, 'uint8_t')


def color_format_has_alpha(
    src_cf: "color_format_t"
) -> "bool":

    src_cf = _get_c_obj(src_cf, 'color_format_t')
    res = _lib_lvgl.lib.lv_color_format_has_alpha(  # NOQA
        src_cf
    )
    return _get_py_obj(res, 'bool')


def color8_set_int(
    c: "color8_t",
    v: "uint8_t"
) -> None:

    c = _get_c_obj(c, 'color8_t')
    v = _get_c_obj(v, 'uint8_t')
    res = _lib_lvgl.lib.lv_color8_set_int(  # NOQA
        c,
        v
    )
    return _get_py_obj(res, 'None')


def color16_set_int(
    c: "color16_t",
    v: "uint16_t"
) -> None:

    c = _get_c_obj(c, 'color16_t')
    v = _get_c_obj(v, 'uint16_t')
    res = _lib_lvgl.lib.lv_color16_set_int(  # NOQA
        c,
        v
    )
    return _get_py_obj(res, 'None')


def color24_set_int(
    c: "color24_t",
    v: "uint32_t"
) -> None:

    c = _get_c_obj(c, 'color24_t')
    v = _get_c_obj(v, 'uint32_t')
    res = _lib_lvgl.lib.lv_color24_set_int(  # NOQA
        c,
        v
    )
    return _get_py_obj(res, 'None')


def color32_set_int(
    c: "color32_t",
    v: "uint32_t"
) -> None:

    c = _get_c_obj(c, 'color32_t')
    v = _get_c_obj(v, 'uint32_t')
    res = _lib_lvgl.lib.lv_color32_set_int(  # NOQA
        c,
        v
    )
    return _get_py_obj(res, 'None')


def color_set_int(
    c: "color_t",
    v: "uint32_t"
) -> None:

    c = _get_c_obj(c, 'color_t')
    v = _get_c_obj(v, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_set_int(  # NOQA
        c,
        v
    )
    return _get_py_obj(res, 'None')


def color8_to_int(
    c: "color8_t"
) -> "uint8_t":

    c = _get_c_obj(c, 'color8_t')
    res = _lib_lvgl.lib.lv_color8_to_int(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint8_t')


def color16_to_int(
    c: "color16_t"
) -> "uint16_t":

    c = _get_c_obj(c, 'color16_t')
    res = _lib_lvgl.lib.lv_color16_to_int(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint16_t')


def color24_to_int(
    c: "color24_t"
) -> "uint32_t":

    c = _get_c_obj(c, 'color24_t')
    res = _lib_lvgl.lib.lv_color24_to_int(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint32_t')


def color32_to_int(
    c: "color32_t"
) -> "uint32_t":

    c = _get_c_obj(c, 'color32_t')
    res = _lib_lvgl.lib.lv_color32_to_int(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint32_t')


def color_to_int(
    c: "color_t"
) -> "uint32_t":

    c = _get_c_obj(c, 'color_t')
    res = _lib_lvgl.lib.lv_color_to_int(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint32_t')


def color8_from_buf(
    buf: "uint8_t"
) -> "color8_t":

    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_color8_from_buf(  # NOQA
        buf
    )
    return _get_py_obj(res, 'color8_t')


def color16_from_buf(
    buf: "uint8_t"
) -> "color16_t":

    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_color16_from_buf(  # NOQA
        buf
    )
    return _get_py_obj(res, 'color16_t')


def color24_from_buf(
    buf: "uint8_t"
) -> "color24_t":

    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_color24_from_buf(  # NOQA
        buf
    )
    return _get_py_obj(res, 'color24_t')


def color32_from_buf(
    buf: "uint8_t"
) -> "color32_t":

    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_color32_from_buf(  # NOQA
        buf
    )
    return _get_py_obj(res, 'color32_t')


def color_from_buf(
    buf: "uint8_t"
) -> "color_t":

    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_from_buf(  # NOQA
        buf
    )
    return _get_py_obj(res, 'color_t')


def color_eq(
    c1: "color_t",
    c2: "color_t"
) -> "bool":

    c1 = _get_c_obj(c1, 'color_t')
    c2 = _get_c_obj(c2, 'color_t')
    res = _lib_lvgl.lib.lv_color_eq(  # NOQA
        c1,
        c2
    )
    return _get_py_obj(res, 'bool')


def color_to8(
    color: "color_t"
) -> "color8_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_to8(  # NOQA
        color
    )
    return _get_py_obj(res, 'color8_t')


def color_to16(
    color: "color_t"
) -> "color16_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_to16(  # NOQA
        color
    )
    return _get_py_obj(res, 'color16_t')


def color_to24(
    color: "color_t"
) -> "color24_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_to24(  # NOQA
        color
    )
    return _get_py_obj(res, 'color24_t')


def color_to32(
    color: "color_t"
) -> "color32_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_to32(  # NOQA
        color
    )
    return _get_py_obj(res, 'color32_t')


def color_mix(
    c1: "color_t",
    c2: "color_t",
    mix: "uint8_t"
) -> "color_t":

    c1 = _get_c_obj(c1, 'color_t')
    c2 = _get_c_obj(c2, 'color_t')
    mix = _get_c_obj(mix, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_mix(  # NOQA
        c1,
        c2,
        mix
    )
    return _get_py_obj(res, 'color_t')


def color_premult(
    c: "color_t",
    mix: "uint8_t",
    out: "uint16_t"
) -> None:

    c = _get_c_obj(c, 'color_t')
    mix = _get_c_obj(mix, 'uint8_t')
    out = _get_c_obj(out, 'uint16_t')
    res = _lib_lvgl.lib.lv_color_premult(  # NOQA
        c,
        mix,
        out
    )
    return _get_py_obj(res, 'None')


def color_mix_premult(
    premult_c1: "uint16_t",
    c2: "color_t",
    mix: "uint8_t"
) -> "color_t":

    premult_c1 = _get_c_obj(premult_c1, 'uint16_t')
    c2 = _get_c_obj(c2, 'color_t')
    mix = _get_c_obj(mix, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_mix_premult(  # NOQA
        premult_c1,
        c2,
        mix
    )
    return _get_py_obj(res, 'color_t')


def color_mix_with_alpha(
    bg_color: "color_t",
    bg_opa: "opa_t",
    fg_color: "color_t",
    fg_opa: "opa_t",
    res_color: "color_t",
    res_opa: "opa_t"
) -> None:

    bg_color = _get_c_obj(bg_color, 'color_t')
    bg_opa = _get_c_obj(bg_opa, 'opa_t')
    fg_color = _get_c_obj(fg_color, 'color_t')
    fg_opa = _get_c_obj(fg_opa, 'opa_t')
    res_color = _get_c_obj(res_color, 'color_t')
    res_opa = _get_c_obj(res_opa, 'opa_t')
    res = _lib_lvgl.lib.lv_color_mix_with_alpha(  # NOQA
        bg_color,
        bg_opa,
        fg_color,
        fg_opa,
        res_color,
        res_opa
    )
    return _get_py_obj(res, 'None')


def color_brightness(
    color: "color_t"
) -> "uint8_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_brightness(  # NOQA
        color
    )
    return _get_py_obj(res, 'uint8_t')


def color_make(
    r: "uint8_t",
    g: "uint8_t",
    b: "uint8_t"
) -> "color_t":

    r = _get_c_obj(r, 'uint8_t')
    g = _get_c_obj(g, 'uint8_t')
    b = _get_c_obj(b, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_make(  # NOQA
        r,
        g,
        b
    )
    return _get_py_obj(res, 'color_t')


def color_hex(
    c: "uint32_t"
) -> "color_t":

    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_hex(  # NOQA
        c
    )
    return _get_py_obj(res, 'color_t')


def color_hex3(
    c: "uint32_t"
) -> "color_t":

    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_hex3(  # NOQA
        c
    )
    return _get_py_obj(res, 'color_t')


def color_filter_dsc_init(
    dsc: "color_filter_dsc_t",
    cb: "color_filter_cb_t"
) -> None:
    try:
        _ = dsc.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = dsc.__dict__['__cb_store__']    
    cb_store['color_filter_cb_t'] = cb

    cb = getattr(_lib_lvgl.lib, 'py_lv_color_filter_cb_t')
    cb_store['color_filter_cb_t.c_func'] = cb


    dsc = _get_c_obj(dsc, 'color_filter_dsc_t')
    res = _lib_lvgl.lib.lv_color_filter_dsc_init(  # NOQA
        dsc,
        cb
    )
    return _get_py_obj(res, 'None')


def color_fill(
    buf: "color_t",
    color: "color_t",
    px_num: "uint32_t"
) -> None:

    buf = _get_c_obj(buf, 'color_t')
    color = _get_c_obj(color, 'color_t')
    px_num = _get_c_obj(px_num, 'uint32_t')
    res = _lib_lvgl.lib.lv_color_fill(  # NOQA
        buf,
        color,
        px_num
    )
    return _get_py_obj(res, 'None')


def color_lighten(
    c: "color_t",
    lvl: "opa_t"
) -> "color_t":

    c = _get_c_obj(c, 'color_t')
    lvl = _get_c_obj(lvl, 'opa_t')
    res = _lib_lvgl.lib.lv_color_lighten(  # NOQA
        c,
        lvl
    )
    return _get_py_obj(res, 'color_t')


def color_darken(
    c: "color_t",
    lvl: "opa_t"
) -> "color_t":

    c = _get_c_obj(c, 'color_t')
    lvl = _get_c_obj(lvl, 'opa_t')
    res = _lib_lvgl.lib.lv_color_darken(  # NOQA
        c,
        lvl
    )
    return _get_py_obj(res, 'color_t')


def color_change_lightness(
    c: "color_t",
    lvl: "opa_t"
) -> "color_t":

    c = _get_c_obj(c, 'color_t')
    lvl = _get_c_obj(lvl, 'opa_t')
    res = _lib_lvgl.lib.lv_color_change_lightness(  # NOQA
        c,
        lvl
    )
    return _get_py_obj(res, 'color_t')


def color_hsv_to_rgb(
    h: "uint16_t",
    s: "uint8_t",
    v: "uint8_t"
) -> "color_t":

    h = _get_c_obj(h, 'uint16_t')
    s = _get_c_obj(s, 'uint8_t')
    v = _get_c_obj(v, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_hsv_to_rgb(  # NOQA
        h,
        s,
        v
    )
    return _get_py_obj(res, 'color_t')


def color_rgb_to_hsv(
    r8: "uint8_t",
    g8: "uint8_t",
    b8: "uint8_t"
) -> "color_hsv_t":

    r8 = _get_c_obj(r8, 'uint8_t')
    g8 = _get_c_obj(g8, 'uint8_t')
    b8 = _get_c_obj(b8, 'uint8_t')
    res = _lib_lvgl.lib.lv_color_rgb_to_hsv(  # NOQA
        r8,
        g8,
        b8
    )
    return _get_py_obj(res, 'color_hsv_t')


def color_to_hsv(
    color: "color_t"
) -> "color_hsv_t":

    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_color_to_hsv(  # NOQA
        color
    )
    return _get_py_obj(res, 'color_hsv_t')


def color_chroma_key() -> "color_t":

    res = _lib_lvgl.lib.lv_color_chroma_key()  # NOQA
    return _get_py_obj(res, 'color_t')


def palette_main(
    p: "palette_t"
) -> "color_t":

    p = _get_c_obj(p, 'palette_t')
    res = _lib_lvgl.lib.lv_palette_main(  # NOQA
        p
    )
    return _get_py_obj(res, 'color_t')


def color_white() -> "color_t":

    res = _lib_lvgl.lib.lv_color_white()  # NOQA
    return _get_py_obj(res, 'color_t')


def color_black() -> "color_t":

    res = _lib_lvgl.lib.lv_color_black()  # NOQA
    return _get_py_obj(res, 'color_t')


def palette_lighten(
    p: "palette_t",
    lvl: "uint8_t"
) -> "color_t":

    p = _get_c_obj(p, 'palette_t')
    lvl = _get_c_obj(lvl, 'uint8_t')
    res = _lib_lvgl.lib.lv_palette_lighten(  # NOQA
        p,
        lvl
    )
    return _get_py_obj(res, 'color_t')


def palette_darken(
    p: "palette_t",
    lvl: "uint8_t"
) -> "color_t":

    p = _get_c_obj(p, 'palette_t')
    lvl = _get_c_obj(lvl, 'uint8_t')
    res = _lib_lvgl.lib.lv_palette_darken(  # NOQA
        p,
        lvl
    )
    return _get_py_obj(res, 'color_t')


def txt_get_size(
    size_res: "point_t",
    text: "char",
    font: "font_t",
    letter_space: "coord_t",
    line_space: "coord_t",
    max_width: "coord_t",
    flag: "text_flag_t"
) -> None:

    size_res = _get_c_obj(size_res, 'point_t')
    text = _get_c_obj(text, 'char')
    font = _get_c_obj(font, 'font_t')
    letter_space = _get_c_obj(letter_space, 'coord_t')
    line_space = _get_c_obj(line_space, 'coord_t')
    max_width = _get_c_obj(max_width, 'coord_t')
    flag = _get_c_obj(flag, 'text_flag_t')
    res = _lib_lvgl.lib.lv_txt_get_size(  # NOQA
        size_res,
        text,
        font,
        letter_space,
        line_space,
        max_width,
        flag
    )
    return _get_py_obj(res, 'None')


def _txt_get_next_line(
    txt: "char",
    font: "font_t",
    letter_space: "coord_t",
    max_width: "coord_t",
    used_width: "coord_t",
    flag: "text_flag_t"
) -> "uint32_t":

    txt = _get_c_obj(txt, 'char')
    font = _get_c_obj(font, 'font_t')
    letter_space = _get_c_obj(letter_space, 'coord_t')
    max_width = _get_c_obj(max_width, 'coord_t')
    used_width = _get_c_obj(used_width, 'coord_t')
    flag = _get_c_obj(flag, 'text_flag_t')
    res = _lib_lvgl.lib._lv_txt_get_next_line(  # NOQA
        txt,
        font,
        letter_space,
        max_width,
        used_width,
        flag
    )
    return _get_py_obj(res, 'uint32_t')


def txt_get_width(
    txt: "char",
    length: "uint32_t",
    font: "font_t",
    letter_space: "coord_t",
    flag: "text_flag_t"
) -> "coord_t":

    txt = _get_c_obj(txt, 'char')
    length = _get_c_obj(length, 'uint32_t')
    font = _get_c_obj(font, 'font_t')
    letter_space = _get_c_obj(letter_space, 'coord_t')
    flag = _get_c_obj(flag, 'text_flag_t')
    res = _lib_lvgl.lib.lv_txt_get_width(  # NOQA
        txt,
        length,
        font,
        letter_space,
        flag
    )
    return _get_py_obj(res, 'coord_t')


def _txt_is_cmd(
    state: "text_cmd_state_t",
    c: "uint32_t"
) -> "bool":

    state = _get_c_obj(state, 'text_cmd_state_t')
    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_is_cmd(  # NOQA
        state,
        c
    )
    return _get_py_obj(res, 'bool')


def _txt_ins(
    txt_buf: "char",
    pos: "uint32_t",
    ins_txt: "char"
) -> None:

    txt_buf = _get_c_obj(txt_buf, 'char')
    pos = _get_c_obj(pos, 'uint32_t')
    ins_txt = _get_c_obj(ins_txt, 'char')
    res = _lib_lvgl.lib._lv_txt_ins(  # NOQA
        txt_buf,
        pos,
        ins_txt
    )
    return _get_py_obj(res, 'None')


def _txt_cut(
    txt: "char",
    pos: "uint32_t",
    len: "uint32_t"
) -> None:

    txt = _get_c_obj(txt, 'char')
    pos = _get_c_obj(pos, 'uint32_t')
    len = _get_c_obj(len, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_cut(  # NOQA
        txt,
        pos,
        len
    )
    return _get_py_obj(res, 'None')


def _txt_set_text_vfmt(
    fmt: "char",
    ap: "va_list"
) -> "char":

    fmt = _get_c_obj(fmt, 'char')
    ap = _get_c_obj(ap, 'va_list')
    res = _lib_lvgl.lib._lv_txt_set_text_vfmt(  # NOQA
        fmt,
        ap
    )
    return _get_py_obj(res, 'char')


def _txt_encoded_letter_next_2(
    txt: "char",
    letter: "uint32_t",
    letter_next: "uint32_t",
    ofs: "uint32_t"
) -> None:

    txt = _get_c_obj(txt, 'char')
    letter = _get_c_obj(letter, 'uint32_t')
    letter_next = _get_c_obj(letter_next, 'uint32_t')
    ofs = _get_c_obj(ofs, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_encoded_letter_next_2(  # NOQA
        txt,
        letter,
        letter_next,
        ofs
    )
    return _get_py_obj(res, 'None')


def _txt_is_break_char(
    letter: "uint32_t"
) -> "bool":

    letter = _get_c_obj(letter, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_is_break_char(  # NOQA
        letter
    )
    return _get_py_obj(res, 'bool')


def _txt_is_a_word(
    letter: "uint32_t"
) -> "bool":

    letter = _get_c_obj(letter, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_is_a_word(  # NOQA
        letter
    )
    return _get_py_obj(res, 'bool')


def _txt_encoded_size() -> "uint8_t":

    res = _lib_lvgl.lib._lv_txt_encoded_size()  # NOQA
    return _get_py_obj(res, 'uint8_t')


def _txt_unicode_to_encoded() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_unicode_to_encoded()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _txt_encoded_conv_wc(
    c: "uint32_t"
) -> "uint32_t":

    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib._lv_txt_encoded_conv_wc(  # NOQA
        c
    )
    return _get_py_obj(res, 'uint32_t')


def _txt_encoded_next() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_encoded_next()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _txt_encoded_prev() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_encoded_prev()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _txt_encoded_get_byte_id() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_encoded_get_byte_id()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _txt_encoded_get_char_id() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_encoded_get_char_id()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _txt_get_encoded_length() -> "uint32_t":

    res = _lib_lvgl.lib._lv_txt_get_encoded_length()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _bidi_process(
    str_in: "char",
    str_out: "char",
    base_dir: "base_dir_t"
) -> None:

    str_in = _get_c_obj(str_in, 'char')
    str_out = _get_c_obj(str_out, 'char')
    base_dir = _get_c_obj(base_dir, 'base_dir_t')
    res = _lib_lvgl.lib._lv_bidi_process(  # NOQA
        str_in,
        str_out,
        base_dir
    )
    return _get_py_obj(res, 'None')


def _bidi_detect_base_dir(
    txt: "char"
) -> "base_dir_t":

    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib._lv_bidi_detect_base_dir(  # NOQA
        txt
    )
    return _get_py_obj(res, 'base_dir_t')


def _bidi_get_logical_pos(
    str_in: "char",
    bidi_txt: "char",
    len: "uint32_t",
    base_dir: "base_dir_t",
    visual_pos: "uint32_t",
    is_rtl: "bool"
) -> "uint16_t":

    str_in = _get_c_obj(str_in, 'char')
    bidi_txt = _get_c_obj(bidi_txt, 'char')
    len = _get_c_obj(len, 'uint32_t')
    base_dir = _get_c_obj(base_dir, 'base_dir_t')
    visual_pos = _get_c_obj(visual_pos, 'uint32_t')
    is_rtl = _get_c_obj(is_rtl, 'bool')
    res = _lib_lvgl.lib._lv_bidi_get_logical_pos(  # NOQA
        str_in,
        bidi_txt,
        len,
        base_dir,
        visual_pos,
        is_rtl
    )
    return _get_py_obj(res, 'uint16_t')


def _bidi_get_visual_pos(
    str_in: "char",
    bidi_txt: "char",
    len: "uint16_t",
    base_dir: "base_dir_t",
    logical_pos: "uint32_t",
    is_rtl: "bool"
) -> "uint16_t":

    str_in = _get_c_obj(str_in, 'char')
    bidi_txt = _get_c_obj(bidi_txt, 'char')
    len = _get_c_obj(len, 'uint16_t')
    base_dir = _get_c_obj(base_dir, 'base_dir_t')
    logical_pos = _get_c_obj(logical_pos, 'uint32_t')
    is_rtl = _get_c_obj(is_rtl, 'bool')
    res = _lib_lvgl.lib._lv_bidi_get_visual_pos(  # NOQA
        str_in,
        bidi_txt,
        len,
        base_dir,
        logical_pos,
        is_rtl
    )
    return _get_py_obj(res, 'uint16_t')


def _bidi_process_paragraph(
    str_in: "char",
    str_out: "char",
    len: "uint32_t",
    base_dir: "base_dir_t",
    pos_conv_out: "uint16_t",
    pos_conv_len: "uint16_t"
) -> None:

    str_in = _get_c_obj(str_in, 'char')
    str_out = _get_c_obj(str_out, 'char')
    len = _get_c_obj(len, 'uint32_t')
    base_dir = _get_c_obj(base_dir, 'base_dir_t')
    pos_conv_out = _get_c_obj(pos_conv_out, 'uint16_t')
    pos_conv_len = _get_c_obj(pos_conv_len, 'uint16_t')
    res = _lib_lvgl.lib._lv_bidi_process_paragraph(  # NOQA
        str_in,
        str_out,
        len,
        base_dir,
        pos_conv_out,
        pos_conv_len
    )
    return _get_py_obj(res, 'None')


def bidi_calculate_align(
    align: "text_align_t",
    base_dir: "base_dir_t",
    txt: "char"
) -> None:

    align = _get_c_obj(align, 'text_align_t')
    base_dir = _get_c_obj(base_dir, 'base_dir_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_bidi_calculate_align(  # NOQA
        align,
        base_dir,
        txt
    )
    return _get_py_obj(res, 'None')


def style_init(
    style: "style_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    res = _lib_lvgl.lib.lv_style_init(  # NOQA
        style
    )
    return _get_py_obj(res, 'None')


def style_reset(
    style: "style_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    res = _lib_lvgl.lib.lv_style_reset(  # NOQA
        style
    )
    return _get_py_obj(res, 'None')


def style_register_prop(
    flag: "uint8_t"
) -> "style_prop_t":

    flag = _get_c_obj(flag, 'uint8_t')
    res = _lib_lvgl.lib.lv_style_register_prop(  # NOQA
        flag
    )
    return _get_py_obj(res, 'style_prop_t')


def style_get_num_custom_props() -> "style_prop_t":

    res = _lib_lvgl.lib.lv_style_get_num_custom_props()  # NOQA
    return _get_py_obj(res, 'style_prop_t')


def style_remove_prop(
    style: "style_t",
    prop: "style_prop_t"
) -> "bool":

    style = _get_c_obj(style, 'style_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib.lv_style_remove_prop(  # NOQA
        style,
        prop
    )
    return _get_py_obj(res, 'bool')


def style_set_prop(
    style: "style_t",
    prop: "style_prop_t",
    value: "style_value_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    value = _get_c_obj(value, 'style_value_t')
    res = _lib_lvgl.lib.lv_style_set_prop(  # NOQA
        style,
        prop,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_prop_meta(
    style: "style_t",
    prop: "style_prop_t",
    meta: "uint16_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    meta = _get_c_obj(meta, 'uint16_t')
    res = _lib_lvgl.lib.lv_style_set_prop_meta(  # NOQA
        style,
        prop,
        meta
    )
    return _get_py_obj(res, 'None')


def style_get_prop(
    style: "style_t",
    prop: "style_prop_t",
    value: "style_value_t"
) -> "style_res_t":

    style = _get_c_obj(style, 'style_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    value = _get_c_obj(value, 'style_value_t')
    res = _lib_lvgl.lib.lv_style_get_prop(  # NOQA
        style,
        prop,
        value
    )
    return _get_py_obj(res, 'style_res_t')


def style_transition_dsc_init(
    tr: "style_transition_dsc_t",
    props: List["style_prop_t"],
    path_cb: "anim_path_cb_t",
    time: "uint32_t",
    delay: "uint32_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'anim_path_cb_t.lv_style_transition_dsc_init' in cb_store:
        store = cb_store['anim_path_cb_t.lv_style_transition_dsc_init']
        if path_cb in store:
            del store[path_cb]
    else:
        store = _CBStore()
        cb_store['anim_path_cb_t.lv_style_transition_dsc_init'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_anim_path_cb_t')
    store[path_cb] = cb_store_handle
    store['anim_path_cb_t'] = path_cb
    store['anim_path_cb_t.c_func'] = c_func

    cb_store['anim_path_cb_t.lv_style_transition_dsc_init'] = store
    path_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    tr = _get_c_obj(tr, 'style_transition_dsc_t')
    props = _get_c_obj(props, 'List[style_prop_t]')
    time = _get_c_obj(time, 'uint32_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_style_transition_dsc_init(  # NOQA
        tr,
        props,
        path_cb,
        time,
        delay,
        user_data
    )
    return _get_py_obj(res, 'None')


def style_prop_get_default(
    prop: "style_prop_t"
) -> "style_value_t":

    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib.lv_style_prop_get_default(  # NOQA
        prop
    )
    return _get_py_obj(res, 'style_value_t')


def style_get_prop_inlined(
    style: "style_t",
    prop: "style_prop_t",
    value: "style_value_t"
) -> "style_res_t":

    style = _get_c_obj(style, 'style_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    value = _get_c_obj(value, 'style_value_t')
    res = _lib_lvgl.lib.lv_style_get_prop_inlined(  # NOQA
        style,
        prop,
        value
    )
    return _get_py_obj(res, 'style_res_t')


def style_is_empty(
    style: "style_t"
) -> "bool":

    style = _get_c_obj(style, 'style_t')
    res = _lib_lvgl.lib.lv_style_is_empty(  # NOQA
        style
    )
    return _get_py_obj(res, 'bool')


def _style_get_prop_group(
    prop: "style_prop_t"
) -> "uint8_t":

    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib._lv_style_get_prop_group(  # NOQA
        prop
    )
    return _get_py_obj(res, 'uint8_t')


def _style_prop_lookup_flags(
    prop: "style_prop_t"
) -> "uint8_t":

    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib._lv_style_prop_lookup_flags(  # NOQA
        prop
    )
    return _get_py_obj(res, 'uint8_t')


def style_set_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_min_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_min_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_max_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_max_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_height(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_height(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_min_height(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_min_height(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_max_height(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_max_height(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_x(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_x(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_y(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_y(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_align(
    style: "style_t",
    value: "align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'align_t')
    res = _lib_lvgl.lib.lv_style_set_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_height(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_height(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_translate_x(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_translate_x(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_translate_y(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_translate_y(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_zoom(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_zoom(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_angle(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_angle(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_pivot_x(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_pivot_x(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transform_pivot_y(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_transform_pivot_y(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_top(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_top(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_bottom(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_bottom(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_left(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_left(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_right(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_right(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_row(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_row(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_column(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_column(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_margin_top(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_margin_top(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_margin_bottom(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_margin_bottom(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_margin_left(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_margin_left(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_margin_right(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_margin_right(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_bg_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_bg_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_grad_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_bg_grad_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_grad_dir(
    style: "style_t",
    value: "grad_dir_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grad_dir_t')
    res = _lib_lvgl.lib.lv_style_set_bg_grad_dir(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_main_stop(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_bg_main_stop(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_grad_stop(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_bg_grad_stop(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_grad(
    style: "style_t",
    value: "grad_dsc_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grad_dsc_t')
    res = _lib_lvgl.lib.lv_style_set_bg_grad(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_dither_mode(
    style: "style_t",
    value: "dither_mode_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'dither_mode_t')
    res = _lib_lvgl.lib.lv_style_set_bg_dither_mode(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_img_src(
    style: "style_t",
    value: None
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'None')
    res = _lib_lvgl.lib.lv_style_set_bg_img_src(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_img_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_bg_img_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_img_recolor(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_bg_img_recolor(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_img_recolor_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_bg_img_recolor_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_bg_img_tiled(
    style: "style_t",
    value: "bool"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'bool')
    res = _lib_lvgl.lib.lv_style_set_bg_img_tiled(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_border_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_border_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_border_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_border_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_border_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_border_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_border_side(
    style: "style_t",
    value: "border_side_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'border_side_t')
    res = _lib_lvgl.lib.lv_style_set_border_side(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_border_post(
    style: "style_t",
    value: "bool"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'bool')
    res = _lib_lvgl.lib.lv_style_set_border_post(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_outline_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_outline_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_outline_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_outline_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_outline_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_outline_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_outline_pad(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_outline_pad(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_ofs_x(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_ofs_x(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_ofs_y(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_ofs_y(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_spread(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_spread(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_shadow_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_shadow_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_img_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_img_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_img_recolor(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_img_recolor(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_img_recolor_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_img_recolor_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_line_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_dash_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_line_dash_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_dash_gap(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_line_dash_gap(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_rounded(
    style: "style_t",
    value: "bool"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'bool')
    res = _lib_lvgl.lib.lv_style_set_line_rounded(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_line_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_line_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_line_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_arc_width(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_arc_width(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_arc_rounded(
    style: "style_t",
    value: "bool"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'bool')
    res = _lib_lvgl.lib.lv_style_set_arc_rounded(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_arc_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_arc_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_arc_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_arc_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_arc_img_src(
    style: "style_t",
    value: None
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'None')
    res = _lib_lvgl.lib.lv_style_set_arc_img_src(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_color(
    style: "style_t",
    value: "color_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_t')
    res = _lib_lvgl.lib.lv_style_set_text_color(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_text_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_font(
    style: "style_t",
    value: "font_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'font_t')
    res = _lib_lvgl.lib.lv_style_set_text_font(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_letter_space(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_text_letter_space(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_line_space(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_text_line_space(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_decor(
    style: "style_t",
    value: "text_decor_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'text_decor_t')
    res = _lib_lvgl.lib.lv_style_set_text_decor(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_text_align(
    style: "style_t",
    value: "text_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'text_align_t')
    res = _lib_lvgl.lib.lv_style_set_text_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_radius(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_radius(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_clip_corner(
    style: "style_t",
    value: "bool"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'bool')
    res = _lib_lvgl.lib.lv_style_set_clip_corner(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_color_filter_dsc(
    style: "style_t",
    value: "color_filter_dsc_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'color_filter_dsc_t')
    res = _lib_lvgl.lib.lv_style_set_color_filter_dsc(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_color_filter_opa(
    style: "style_t",
    value: "opa_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'opa_t')
    res = _lib_lvgl.lib.lv_style_set_color_filter_opa(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_anim(
    style: "style_t",
    value: "anim_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'anim_t')
    res = _lib_lvgl.lib.lv_style_set_anim(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_anim_time(
    style: "style_t",
    value: "uint32_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'uint32_t')
    res = _lib_lvgl.lib.lv_style_set_anim_time(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_anim_speed(
    style: "style_t",
    value: "uint32_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'uint32_t')
    res = _lib_lvgl.lib.lv_style_set_anim_speed(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_transition(
    style: "style_t",
    value: "style_transition_dsc_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'style_transition_dsc_t')
    res = _lib_lvgl.lib.lv_style_set_transition(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_blend_mode(
    style: "style_t",
    value: "blend_mode_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'blend_mode_t')
    res = _lib_lvgl.lib.lv_style_set_blend_mode(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_layout(
    style: "style_t",
    value: "uint16_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'uint16_t')
    res = _lib_lvgl.lib.lv_style_set_layout(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_base_dir(
    style: "style_t",
    value: "base_dir_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'base_dir_t')
    res = _lib_lvgl.lib.lv_style_set_base_dir(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_size(
    style: "style_t",
    width: "coord_t",
    height: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    width = _get_c_obj(width, 'coord_t')
    height = _get_c_obj(height, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_size(  # NOQA
        style,
        width,
        height
    )
    return _get_py_obj(res, 'None')


def style_set_pad_all(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_all(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_hor(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_hor(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_ver(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_ver(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_pad_gap(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_pad_gap(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_prop_has_flag(
    prop: "style_prop_t",
    flag: "uint8_t"
) -> "bool":

    prop = _get_c_obj(prop, 'style_prop_t')
    flag = _get_c_obj(flag, 'uint8_t')
    res = _lib_lvgl.lib.lv_style_prop_has_flag(  # NOQA
        prop,
        flag
    )
    return _get_py_obj(res, 'bool')


def _event_push(
    e: "event_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib._lv_event_push(  # NOQA
        e
    )
    return _get_py_obj(res, 'None')


def _event_pop(
    e: "event_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib._lv_event_pop(  # NOQA
        e
    )
    return _get_py_obj(res, 'None')


def event_send(
    list: "event_list_t",
    e: "event_t",
    preprocess: "bool"
) -> "res_t":

    list = _get_c_obj(list, 'event_list_t')
    e = _get_c_obj(e, 'event_t')
    preprocess = _get_c_obj(preprocess, 'bool')
    res = _lib_lvgl.lib.lv_event_send(  # NOQA
        list,
        e,
        preprocess
    )
    return _get_py_obj(res, 'res_t')


def event_add(
    list: "event_list_t",
    cb: "event_cb_t",
    filter: "event_code_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'event_cb_t.lv_event_add' in cb_store:
        store = cb_store['event_cb_t.lv_event_add']
        if cb in store:
            del store[cb]
    else:
        store = _CBStore()
        cb_store['event_cb_t.lv_event_add'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_event_cb_t')
    store[cb] = cb_store_handle
    store['event_cb_t'] = cb
    store['event_cb_t.c_func'] = c_func

    cb_store['event_cb_t.lv_event_add'] = store
    cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    list = _get_c_obj(list, 'event_list_t')
    filter = _get_c_obj(filter, 'event_code_t')
    res = _lib_lvgl.lib.lv_event_add(  # NOQA
        list,
        cb,
        filter,
        user_data
    )
    return _get_py_obj(res, 'None')


def event_get_count(
    list: "event_list_t"
) -> "uint32_t":

    list = _get_c_obj(list, 'event_list_t')
    res = _lib_lvgl.lib.lv_event_get_count(  # NOQA
        list
    )
    return _get_py_obj(res, 'uint32_t')


def event_get_dsc(
    list: "event_list_t",
    index: "uint32_t"
) -> "event_dsc_t":

    list = _get_c_obj(list, 'event_list_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_event_get_dsc(  # NOQA
        list,
        index
    )
    return _get_py_obj(res, 'event_dsc_t')


def event_dsc_get_cb(
    dsc: "event_dsc_t"
) -> "event_cb_t":

    dsc = _get_c_obj(dsc, 'event_dsc_t')
    res = _lib_lvgl.lib.lv_event_dsc_get_cb(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'event_cb_t')


def event_dsc_get_user_data(
    dsc: "event_dsc_t"
) -> Any:

    dsc = _get_c_obj(dsc, 'event_dsc_t')
    res = _lib_lvgl.lib.lv_event_dsc_get_user_data(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'void')


def event_remove(
    list: "event_list_t",
    index: "uint32_t"
) -> "bool":

    list = _get_c_obj(list, 'event_list_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_event_remove(  # NOQA
        list,
        index
    )
    return _get_py_obj(res, 'bool')


def event_get_target(
    e: "event_t"
) -> Any:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_target(  # NOQA
        e
    )
    return _get_py_obj(res, 'void')


def event_get_current_target(
    e: "event_t"
) -> Any:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_current_target(  # NOQA
        e
    )
    return _get_py_obj(res, 'void')


def event_get_code(
    e: "event_t"
) -> "event_code_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_code(  # NOQA
        e
    )
    return _get_py_obj(res, 'event_code_t')


def event_get_param(
    e: "event_t"
) -> Any:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_param(  # NOQA
        e
    )
    return _get_py_obj(res, 'void')


def event_get_user_data(
    e: "event_t"
) -> Any:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_user_data(  # NOQA
        e
    )
    return _get_py_obj(res, 'void')


def event_stop_bubbling(
    e: "event_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_stop_bubbling(  # NOQA
        e
    )
    return _get_py_obj(res, 'None')


def event_stop_processing(
    e: "event_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_stop_processing(  # NOQA
        e
    )
    return _get_py_obj(res, 'None')


def event_register_id() -> "uint32_t":

    res = _lib_lvgl.lib.lv_event_register_id()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def _event_mark_deleted(
    target: None
) -> None:

    target = _get_c_obj(target, 'None')
    res = _lib_lvgl.lib._lv_event_mark_deleted(  # NOQA
        target
    )
    return _get_py_obj(res, 'None')


def disp_create(
    hor_res: "coord_t",
    ver_res: "coord_t"
) -> "disp_t":

    hor_res = _get_c_obj(hor_res, 'coord_t')
    ver_res = _get_c_obj(ver_res, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_create(  # NOQA
        hor_res,
        ver_res
    )
    return _get_py_obj(res, 'disp_t')


def disp_remove(
    disp: "disp_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_remove(  # NOQA
        disp
    )
    return _get_py_obj(res, 'None')


def disp_set_default(
    disp: "disp_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_set_default(  # NOQA
        disp
    )
    return _get_py_obj(res, 'None')


def disp_get_default() -> "disp_t":

    res = _lib_lvgl.lib.lv_disp_get_default()  # NOQA
    return _get_py_obj(res, 'disp_t')


def disp_get_next(
    disp: "disp_t"
) -> "disp_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_next(  # NOQA
        disp
    )
    return _get_py_obj(res, 'disp_t')


def disp_set_res(
    disp: "disp_t",
    hor_res: "coord_t",
    ver_res: "coord_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    hor_res = _get_c_obj(hor_res, 'coord_t')
    ver_res = _get_c_obj(ver_res, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_set_res(  # NOQA
        disp,
        hor_res,
        ver_res
    )
    return _get_py_obj(res, 'None')


def disp_set_physical_res(
    disp: "disp_t",
    hor_res: "coord_t",
    ver_res: "coord_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    hor_res = _get_c_obj(hor_res, 'coord_t')
    ver_res = _get_c_obj(ver_res, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_set_physical_res(  # NOQA
        disp,
        hor_res,
        ver_res
    )
    return _get_py_obj(res, 'None')


def disp_set_offset(
    disp: "disp_t",
    x: "coord_t",
    y: "coord_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_set_offset(  # NOQA
        disp,
        x,
        y
    )
    return _get_py_obj(res, 'None')


def disp_set_rotation(
    disp: "disp_t",
    rotation: "disp_rotation_t",
    sw_rotate: "bool"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    rotation = _get_c_obj(rotation, 'disp_rotation_t')
    sw_rotate = _get_c_obj(sw_rotate, 'bool')
    res = _lib_lvgl.lib.lv_disp_set_rotation(  # NOQA
        disp,
        rotation,
        sw_rotate
    )
    return _get_py_obj(res, 'None')


def disp_set_dpi(
    disp: "disp_t",
    dpi: "coord_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    dpi = _get_c_obj(dpi, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_set_dpi(  # NOQA
        disp,
        dpi
    )
    return _get_py_obj(res, 'None')


def disp_get_hor_res(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_hor_res(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_ver_res(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_ver_res(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_physical_hor_res(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_physical_hor_res(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_physical_ver_res(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_physical_ver_res(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_offset_x(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_offset_x(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_offset_y(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_offset_y(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_get_rotation(
    disp: "disp_t"
) -> "disp_rotation_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_rotation(  # NOQA
        disp
    )
    return _get_py_obj(res, 'disp_rotation_t')


def disp_get_dpi(
    disp: "disp_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_dpi(  # NOQA
        disp
    )
    return _get_py_obj(res, 'coord_t')


def disp_set_draw_buffers(
    disp: "disp_t",
    buf1: None,
    buf2: None,
    buf_size_byte: "uint32_t",
    render_mode: "disp_render_mode_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    buf1 = _get_c_obj(buf1, 'None')
    buf2 = _get_c_obj(buf2, 'None')
    buf_size_byte = _get_c_obj(buf_size_byte, 'uint32_t')
    render_mode = _get_c_obj(render_mode, 'disp_render_mode_t')
    res = _lib_lvgl.lib.lv_disp_set_draw_buffers(  # NOQA
        disp,
        buf1,
        buf2,
        buf_size_byte,
        render_mode
    )
    return _get_py_obj(res, 'None')


def disp_set_flush_cb(
    disp: "disp_t",
    flush_cb: "disp_flush_cb_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'disp_flush_cb_t.lv_disp_set_flush_cb' in cb_store:
        store = cb_store['disp_flush_cb_t.lv_disp_set_flush_cb']
        if flush_cb in store:
            del store[flush_cb]
    else:
        store = _CBStore()
        cb_store['disp_flush_cb_t.lv_disp_set_flush_cb'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_disp_flush_cb_t')
    store[flush_cb] = cb_store_handle
    store['disp_flush_cb_t'] = flush_cb
    store['disp_flush_cb_t.c_func'] = c_func

    cb_store['disp_flush_cb_t.lv_disp_set_flush_cb'] = store
    flush_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_set_flush_cb(  # NOQA
        disp,
        flush_cb,
        user_data
    )
    return _get_py_obj(res, 'None')


def disp_set_color_format(
    disp: "disp_t",
    color_format: "color_format_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    color_format = _get_c_obj(color_format, 'color_format_t')
    res = _lib_lvgl.lib.lv_disp_set_color_format(  # NOQA
        disp,
        color_format
    )
    return _get_py_obj(res, 'None')


def disp_get_color_format(
    disp: "disp_t"
) -> "color_format_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_color_format(  # NOQA
        disp
    )
    return _get_py_obj(res, 'color_format_t')


def disp_set_antialaising(
    disp: "disp_t",
    en: "bool"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_disp_set_antialaising(  # NOQA
        disp,
        en
    )
    return _get_py_obj(res, 'None')


def disp_get_antialiasing(
    disp: "disp_t"
) -> "bool":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_antialiasing(  # NOQA
        disp
    )
    return _get_py_obj(res, 'bool')


def disp_flush_ready(
    disp: "disp_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_flush_ready(  # NOQA
        disp
    )
    return _get_py_obj(res, 'None')


def disp_flush_is_last(
    disp: "disp_t"
) -> "bool":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_flush_is_last(  # NOQA
        disp
    )
    return _get_py_obj(res, 'bool')


def disp_is_double_buffered(
    disp: "disp_t"
) -> "bool":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_is_double_buffered(  # NOQA
        disp
    )
    return _get_py_obj(res, 'bool')


def disp_set_draw_ctx(
    disp: "disp_t",
    draw_ctx_init: "disp_draw_ctx_init_cb_t",
    draw_ctx_deinit: "disp_draw_ctx_deinit_cb_t",
    draw_ctx_size: "size_t"
) -> None:
    try:
        _ = disp.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = disp.__dict__['__cb_store__']    
    cb_store['disp_draw_ctx_deinit_cb_t'] = draw_ctx_deinit

    draw_ctx_deinit = getattr(_lib_lvgl.lib, 'py_lv_disp_draw_ctx_deinit_cb_t')
    cb_store['disp_draw_ctx_deinit_cb_t.c_func'] = draw_ctx_deinit


    disp = _get_c_obj(disp, 'disp_t')
    draw_ctx_size = _get_c_obj(draw_ctx_size, 'size_t')
    res = _lib_lvgl.lib.lv_disp_set_draw_ctx(  # NOQA
        disp,
        draw_ctx_init,
        draw_ctx_deinit,
        draw_ctx_size
    )
    return _get_py_obj(res, 'None')


def disp_get_scr_act(
    disp: "disp_t"
) -> _obj_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_scr_act(  # NOQA
        disp
    )
    return _get_py_obj(res, '_obj_t')


def disp_get_scr_prev(
    disp: "disp_t"
) -> _obj_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_scr_prev(  # NOQA
        disp
    )
    return _get_py_obj(res, '_obj_t')


def disp_load_scr(
    scr: _obj_t
) -> None:

    scr = _get_c_obj(scr, '_obj_t')
    res = _lib_lvgl.lib.lv_disp_load_scr(  # NOQA
        scr
    )
    return _get_py_obj(res, 'None')


def disp_get_layer_top(
    disp: "disp_t"
) -> _obj_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_layer_top(  # NOQA
        disp
    )
    return _get_py_obj(res, '_obj_t')


def disp_get_layer_sys(
    disp: "disp_t"
) -> _obj_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_layer_sys(  # NOQA
        disp
    )
    return _get_py_obj(res, '_obj_t')


def disp_get_layer_bottom(
    disp: "disp_t"
) -> _obj_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_layer_bottom(  # NOQA
        disp
    )
    return _get_py_obj(res, '_obj_t')


def scr_load_anim(
    scr: _obj_t,
    anim_type: "scr_load_anim_t",
    time: "uint32_t",
    delay: "uint32_t",
    auto_del: "bool"
) -> None:

    scr = _get_c_obj(scr, '_obj_t')
    anim_type = _get_c_obj(anim_type, 'scr_load_anim_t')
    time = _get_c_obj(time, 'uint32_t')
    delay = _get_c_obj(delay, 'uint32_t')
    auto_del = _get_c_obj(auto_del, 'bool')
    res = _lib_lvgl.lib.lv_scr_load_anim(  # NOQA
        scr,
        anim_type,
        time,
        delay,
        auto_del
    )
    return _get_py_obj(res, 'None')


def scr_act() -> _obj_t:

    res = _lib_lvgl.lib.lv_scr_act()  # NOQA
    return _get_py_obj(res, '_obj_t')


def layer_top() -> _obj_t:

    res = _lib_lvgl.lib.lv_layer_top()  # NOQA
    return _get_py_obj(res, '_obj_t')


def layer_sys() -> _obj_t:

    res = _lib_lvgl.lib.lv_layer_sys()  # NOQA
    return _get_py_obj(res, '_obj_t')


def layer_bottom() -> _obj_t:

    res = _lib_lvgl.lib.lv_layer_bottom()  # NOQA
    return _get_py_obj(res, '_obj_t')


def scr_load(
    scr: _obj_t
) -> None:

    scr = _get_c_obj(scr, '_obj_t')
    res = _lib_lvgl.lib.lv_scr_load(  # NOQA
        scr
    )
    return _get_py_obj(res, 'None')


def disp_add_event(
    disp: "disp_t",
    event_cb: "event_cb_t",
    filter: "event_code_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'event_cb_t.lv_disp_add_event' in cb_store:
        store = cb_store['event_cb_t.lv_disp_add_event']
        if event_cb in store:
            del store[event_cb]
    else:
        store = _CBStore()
        cb_store['event_cb_t.lv_disp_add_event'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_event_cb_t')
    store[event_cb] = cb_store_handle
    store['event_cb_t'] = event_cb
    store['event_cb_t.c_func'] = c_func

    cb_store['event_cb_t.lv_disp_add_event'] = store
    event_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    disp = _get_c_obj(disp, 'disp_t')
    filter = _get_c_obj(filter, 'event_code_t')
    res = _lib_lvgl.lib.lv_disp_add_event(  # NOQA
        disp,
        event_cb,
        filter,
        user_data
    )
    return _get_py_obj(res, 'None')


def disp_get_event_count(
    disp: "disp_t"
) -> "uint32_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_event_count(  # NOQA
        disp
    )
    return _get_py_obj(res, 'uint32_t')


def disp_get_event_dsc(
    disp: "disp_t",
    index: "uint32_t"
) -> "event_dsc_t":

    disp = _get_c_obj(disp, 'disp_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_disp_get_event_dsc(  # NOQA
        disp,
        index
    )
    return _get_py_obj(res, 'event_dsc_t')


def disp_remove_event(
    disp: "disp_t",
    index: "uint32_t"
) -> "bool":

    disp = _get_c_obj(disp, 'disp_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_disp_remove_event(  # NOQA
        disp,
        index
    )
    return _get_py_obj(res, 'bool')


def disp_send_event(
    disp: "disp_t",
    code: "event_code_t",
    user_data: Any
) -> "res_t":

    disp = _get_c_obj(disp, 'disp_t')
    code = _get_c_obj(code, 'event_code_t')
    res = _lib_lvgl.lib.lv_disp_send_event(  # NOQA
        disp,
        code,
        user_data
    )
    return _get_py_obj(res, 'res_t')


def disp_set_theme(
    disp: "disp_t",
    th: _theme_t
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    th = _get_c_obj(th, '_theme_t')
    res = _lib_lvgl.lib.lv_disp_set_theme(  # NOQA
        disp,
        th
    )
    return _get_py_obj(res, 'None')


def disp_get_theme(
    disp: "disp_t"
) -> _theme_t:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_theme(  # NOQA
        disp
    )
    return _get_py_obj(res, '_theme_t')


def disp_get_inactive_time(
    disp: "disp_t"
) -> "uint32_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_inactive_time(  # NOQA
        disp
    )
    return _get_py_obj(res, 'uint32_t')


def disp_trig_activity(
    disp: "disp_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_trig_activity(  # NOQA
        disp
    )
    return _get_py_obj(res, 'None')


def disp_enable_invalidation(
    disp: "disp_t",
    en: "bool"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_disp_enable_invalidation(  # NOQA
        disp,
        en
    )
    return _get_py_obj(res, 'None')


def disp_is_invalidation_enabled(
    disp: "disp_t"
) -> "bool":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_is_invalidation_enabled(  # NOQA
        disp
    )
    return _get_py_obj(res, 'bool')


def _disp_get_refr_timer(
    disp: "disp_t"
) -> "timer_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib._lv_disp_get_refr_timer(  # NOQA
        disp
    )
    return _get_py_obj(res, 'timer_t')


def disp_get_chroma_key_color(
    disp: "disp_t"
) -> "color_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_chroma_key_color(  # NOQA
        disp
    )
    return _get_py_obj(res, 'color_t')


def disp_set_user_data(
    disp: "disp_t",
    user_data: Any
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_set_user_data(  # NOQA
        disp,
        user_data
    )
    return _get_py_obj(res, 'None')


def disp_set_driver_data(
    disp: "disp_t",
    driver_data: None
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    driver_data = _get_c_obj(driver_data, 'None')
    res = _lib_lvgl.lib.lv_disp_set_driver_data(  # NOQA
        disp,
        driver_data
    )
    return _get_py_obj(res, 'None')


def disp_get_user_data(
    disp: "disp_t"
) -> Any:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_user_data(  # NOQA
        disp
    )
    return _get_py_obj(res, 'void')


def disp_get_driver_data(
    disp: "disp_t"
) -> Any:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_disp_get_driver_data(  # NOQA
        disp
    )
    return _get_py_obj(res, 'void')


def dpx(
    n: "coord_t"
) -> "coord_t":

    n = _get_c_obj(n, 'coord_t')
    res = _lib_lvgl.lib.lv_dpx(  # NOQA
        n
    )
    return _get_py_obj(res, 'coord_t')


def disp_dpx(
    disp: "disp_t",
    n: "coord_t"
) -> "coord_t":

    disp = _get_c_obj(disp, 'disp_t')
    n = _get_c_obj(n, 'coord_t')
    res = _lib_lvgl.lib.lv_disp_dpx(  # NOQA
        disp,
        n
    )
    return _get_py_obj(res, 'coord_t')


def obj_del(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_del(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_clean(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_clean(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_del_delayed(
    obj: _obj_t,
    delay_ms: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    delay_ms = _get_c_obj(delay_ms, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_del_delayed(  # NOQA
        obj,
        delay_ms
    )
    return _get_py_obj(res, 'None')


def obj_del_anim_ready_cb(
    a: "anim_t"
) -> None:

    a = _get_c_obj(a, 'anim_t')
    res = _lib_lvgl.lib.lv_obj_del_anim_ready_cb(  # NOQA
        a
    )
    return _get_py_obj(res, 'None')


def obj_del_async(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_del_async(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_set_parent(
    obj: _obj_t,
    parent: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    parent = _get_c_obj(parent, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_set_parent(  # NOQA
        obj,
        parent
    )
    return _get_py_obj(res, 'None')


def obj_swap(
    obj1: _obj_t,
    obj2: _obj_t
) -> None:

    obj1 = _get_c_obj(obj1, '_obj_t')
    obj2 = _get_c_obj(obj2, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_swap(  # NOQA
        obj1,
        obj2
    )
    return _get_py_obj(res, 'None')


def obj_move_to_index(
    obj: _obj_t,
    index: "int32_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    index = _get_c_obj(index, 'int32_t')
    res = _lib_lvgl.lib.lv_obj_move_to_index(  # NOQA
        obj,
        index
    )
    return _get_py_obj(res, 'None')


def obj_get_screen(
    obj: _obj_t
) -> _obj_t:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_screen(  # NOQA
        obj
    )
    return _get_py_obj(res, '_obj_t')


def obj_get_disp(
    obj: _obj_t
) -> _disp_t:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_disp(  # NOQA
        obj
    )
    return _get_py_obj(res, '_disp_t')


def obj_get_parent(
    obj: _obj_t
) -> _obj_t:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_parent(  # NOQA
        obj
    )
    return _get_py_obj(res, '_obj_t')


def obj_get_child(
    obj: _obj_t,
    id: "int32_t"
) -> _obj_t:

    obj = _get_c_obj(obj, '_obj_t')
    id = _get_c_obj(id, 'int32_t')
    res = _lib_lvgl.lib.lv_obj_get_child(  # NOQA
        obj,
        id
    )
    return _get_py_obj(res, '_obj_t')


def obj_get_child_cnt(
    obj: _obj_t
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_child_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def obj_get_index(
    obj: _obj_t
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_index(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def obj_tree_walk(
    start_obj: _obj_t,
    cb: "obj_tree_walk_cb_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'obj_tree_walk_cb_t.lv_obj_tree_walk' in cb_store:
        store = cb_store['obj_tree_walk_cb_t.lv_obj_tree_walk']
        if cb in store:
            del store[cb]
    else:
        store = _CBStore()
        cb_store['obj_tree_walk_cb_t.lv_obj_tree_walk'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_obj_tree_walk_cb_t')
    store[cb] = cb_store_handle
    store['obj_tree_walk_cb_t'] = cb
    store['obj_tree_walk_cb_t.c_func'] = c_func

    cb_store['obj_tree_walk_cb_t.lv_obj_tree_walk'] = store
    cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    start_obj = _get_c_obj(start_obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_tree_walk(  # NOQA
        start_obj,
        cb,
        user_data
    )
    return _get_py_obj(res, 'None')


def obj_set_pos(
    obj: _obj_t,
    x: "coord_t",
    y: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_pos(  # NOQA
        obj,
        x,
        y
    )
    return _get_py_obj(res, 'None')


def obj_set_x(
    obj: _obj_t,
    x: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_x(  # NOQA
        obj,
        x
    )
    return _get_py_obj(res, 'None')


def obj_set_y(
    obj: _obj_t,
    y: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_y(  # NOQA
        obj,
        y
    )
    return _get_py_obj(res, 'None')


def obj_set_size(
    obj: _obj_t,
    w: "coord_t",
    h: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_size(  # NOQA
        obj,
        w,
        h
    )
    return _get_py_obj(res, 'None')


def obj_refr_size(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_refr_size(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_set_width(
    obj: _obj_t,
    w: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    w = _get_c_obj(w, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_width(  # NOQA
        obj,
        w
    )
    return _get_py_obj(res, 'None')


def obj_set_height(
    obj: _obj_t,
    h: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_height(  # NOQA
        obj,
        h
    )
    return _get_py_obj(res, 'None')


def obj_set_content_width(
    obj: _obj_t,
    w: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    w = _get_c_obj(w, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_content_width(  # NOQA
        obj,
        w
    )
    return _get_py_obj(res, 'None')


def obj_set_content_height(
    obj: _obj_t,
    h: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_content_height(  # NOQA
        obj,
        h
    )
    return _get_py_obj(res, 'None')


def obj_set_layout(
    obj: _obj_t,
    layout: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    layout = _get_c_obj(layout, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_set_layout(  # NOQA
        obj,
        layout
    )
    return _get_py_obj(res, 'None')


def obj_is_layout_positioned(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_is_layout_positioned(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_mark_layout_as_dirty(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_mark_layout_as_dirty(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_update_layout(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_update_layout(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def layout_register(
    cb: "layout_update_cb_t",
    user_data: Any
) -> "uint32_t":
    cb_store = _global_cb_store
    if 'layout_update_cb_t.lv_layout_register' in cb_store:
        store = cb_store['layout_update_cb_t.lv_layout_register']
        if cb in store:
            del store[cb]
    else:
        store = _CBStore()
        cb_store['layout_update_cb_t.lv_layout_register'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_layout_update_cb_t')
    store[cb] = cb_store_handle
    store['layout_update_cb_t'] = cb
    store['layout_update_cb_t.c_func'] = c_func

    cb_store['layout_update_cb_t.lv_layout_register'] = store
    cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    res = _lib_lvgl.lib.lv_layout_register(  # NOQA
        cb,
        user_data
    )
    return _get_py_obj(res, 'uint32_t')


def obj_set_align(
    obj: _obj_t,
    align: "align_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    align = _get_c_obj(align, 'align_t')
    res = _lib_lvgl.lib.lv_obj_set_align(  # NOQA
        obj,
        align
    )
    return _get_py_obj(res, 'None')


def obj_align(
    obj: _obj_t,
    align: "align_t",
    x_ofs: "coord_t",
    y_ofs: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    align = _get_c_obj(align, 'align_t')
    x_ofs = _get_c_obj(x_ofs, 'coord_t')
    y_ofs = _get_c_obj(y_ofs, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_align(  # NOQA
        obj,
        align,
        x_ofs,
        y_ofs
    )
    return _get_py_obj(res, 'None')


def obj_align_to(
    obj: _obj_t,
    base: _obj_t,
    align: "align_t",
    x_ofs: "coord_t",
    y_ofs: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    base = _get_c_obj(base, '_obj_t')
    align = _get_c_obj(align, 'align_t')
    x_ofs = _get_c_obj(x_ofs, 'coord_t')
    y_ofs = _get_c_obj(y_ofs, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_align_to(  # NOQA
        obj,
        base,
        align,
        x_ofs,
        y_ofs
    )
    return _get_py_obj(res, 'None')


def obj_center(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_center(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_get_coords(
    obj: _obj_t,
    coords: "area_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    coords = _get_c_obj(coords, 'area_t')
    res = _lib_lvgl.lib.lv_obj_get_coords(  # NOQA
        obj,
        coords
    )
    return _get_py_obj(res, 'None')


def obj_get_x(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_x(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_x2(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_x2(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_y(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_y(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_y2(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_y2(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_x_aligned(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_x_aligned(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_y_aligned(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_y_aligned(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_width(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_width(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_height(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_height(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_content_width(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_content_width(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_content_height(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_content_height(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_content_coords(
    obj: _obj_t,
    area: "area_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    area = _get_c_obj(area, 'area_t')
    res = _lib_lvgl.lib.lv_obj_get_content_coords(  # NOQA
        obj,
        area
    )
    return _get_py_obj(res, 'None')


def obj_get_self_width(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_self_width(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_self_height(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_self_height(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_refresh_self_size(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_refresh_self_size(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_refr_pos(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_refr_pos(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_move_to(
    obj: _obj_t,
    x: "coord_t",
    y: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_move_to(  # NOQA
        obj,
        x,
        y
    )
    return _get_py_obj(res, 'None')


def obj_move_children_by(
    obj: _obj_t,
    x_diff: "coord_t",
    y_diff: "coord_t",
    ignore_floating: "bool"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x_diff = _get_c_obj(x_diff, 'coord_t')
    y_diff = _get_c_obj(y_diff, 'coord_t')
    ignore_floating = _get_c_obj(ignore_floating, 'bool')
    res = _lib_lvgl.lib.lv_obj_move_children_by(  # NOQA
        obj,
        x_diff,
        y_diff,
        ignore_floating
    )
    return _get_py_obj(res, 'None')


def obj_transform_point(
    obj: _obj_t,
    p: "point_t",
    recursive: "bool",
    inv: "bool"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    p = _get_c_obj(p, 'point_t')
    recursive = _get_c_obj(recursive, 'bool')
    inv = _get_c_obj(inv, 'bool')
    res = _lib_lvgl.lib.lv_obj_transform_point(  # NOQA
        obj,
        p,
        recursive,
        inv
    )
    return _get_py_obj(res, 'None')


def obj_get_transformed_area(
    obj: _obj_t,
    area: "area_t",
    recursive: "bool",
    inv: "bool"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    area = _get_c_obj(area, 'area_t')
    recursive = _get_c_obj(recursive, 'bool')
    inv = _get_c_obj(inv, 'bool')
    res = _lib_lvgl.lib.lv_obj_get_transformed_area(  # NOQA
        obj,
        area,
        recursive,
        inv
    )
    return _get_py_obj(res, 'None')


def obj_invalidate_area(
    obj: _obj_t,
    area: "area_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    area = _get_c_obj(area, 'area_t')
    res = _lib_lvgl.lib.lv_obj_invalidate_area(  # NOQA
        obj,
        area
    )
    return _get_py_obj(res, 'None')


def obj_invalidate(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_invalidate(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_area_is_visible(
    obj: _obj_t,
    area: "area_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    area = _get_c_obj(area, 'area_t')
    res = _lib_lvgl.lib.lv_obj_area_is_visible(  # NOQA
        obj,
        area
    )
    return _get_py_obj(res, 'bool')


def obj_is_visible(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_is_visible(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_set_ext_click_area(
    obj: _obj_t,
    size: "coord_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    size = _get_c_obj(size, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_ext_click_area(  # NOQA
        obj,
        size
    )
    return _get_py_obj(res, 'None')


def obj_get_click_area(
    obj: _obj_t,
    area: "area_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    area = _get_c_obj(area, 'area_t')
    res = _lib_lvgl.lib.lv_obj_get_click_area(  # NOQA
        obj,
        area
    )
    return _get_py_obj(res, 'None')


def obj_hit_test(
    obj: _obj_t,
    point: "point_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    point = _get_c_obj(point, 'point_t')
    res = _lib_lvgl.lib.lv_obj_hit_test(  # NOQA
        obj,
        point
    )
    return _get_py_obj(res, 'bool')


def clamp_width(
    width: "coord_t",
    min_width: "coord_t",
    max_width: "coord_t",
    ref_width: "coord_t"
) -> "coord_t":

    width = _get_c_obj(width, 'coord_t')
    min_width = _get_c_obj(min_width, 'coord_t')
    max_width = _get_c_obj(max_width, 'coord_t')
    ref_width = _get_c_obj(ref_width, 'coord_t')
    res = _lib_lvgl.lib.lv_clamp_width(  # NOQA
        width,
        min_width,
        max_width,
        ref_width
    )
    return _get_py_obj(res, 'coord_t')


def clamp_height(
    height: "coord_t",
    min_height: "coord_t",
    max_height: "coord_t",
    ref_height: "coord_t"
) -> "coord_t":

    height = _get_c_obj(height, 'coord_t')
    min_height = _get_c_obj(min_height, 'coord_t')
    max_height = _get_c_obj(max_height, 'coord_t')
    ref_height = _get_c_obj(ref_height, 'coord_t')
    res = _lib_lvgl.lib.lv_clamp_height(  # NOQA
        height,
        min_height,
        max_height,
        ref_height
    )
    return _get_py_obj(res, 'coord_t')


def obj_set_scrollbar_mode(
    obj: _obj_t,
    mode: "scrollbar_mode_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    mode = _get_c_obj(mode, 'scrollbar_mode_t')
    res = _lib_lvgl.lib.lv_obj_set_scrollbar_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def obj_set_scroll_dir(
    obj: _obj_t,
    dir: "dir_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    dir = _get_c_obj(dir, 'dir_t')
    res = _lib_lvgl.lib.lv_obj_set_scroll_dir(  # NOQA
        obj,
        dir
    )
    return _get_py_obj(res, 'None')


def obj_set_scroll_snap_x(
    obj: _obj_t,
    align: "scroll_snap_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    align = _get_c_obj(align, 'scroll_snap_t')
    res = _lib_lvgl.lib.lv_obj_set_scroll_snap_x(  # NOQA
        obj,
        align
    )
    return _get_py_obj(res, 'None')


def obj_set_scroll_snap_y(
    obj: _obj_t,
    align: "scroll_snap_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    align = _get_c_obj(align, 'scroll_snap_t')
    res = _lib_lvgl.lib.lv_obj_set_scroll_snap_y(  # NOQA
        obj,
        align
    )
    return _get_py_obj(res, 'None')


def obj_get_scrollbar_mode(
    obj: _obj_t
) -> "scrollbar_mode_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scrollbar_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'scrollbar_mode_t')


def obj_get_scroll_dir(
    obj: _obj_t
) -> "dir_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_dir(  # NOQA
        obj
    )
    return _get_py_obj(res, 'dir_t')


def obj_get_scroll_snap_x(
    obj: _obj_t
) -> "scroll_snap_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_snap_x(  # NOQA
        obj
    )
    return _get_py_obj(res, 'scroll_snap_t')


def obj_get_scroll_snap_y(
    obj: _obj_t
) -> "scroll_snap_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_snap_y(  # NOQA
        obj
    )
    return _get_py_obj(res, 'scroll_snap_t')


def obj_get_scroll_x(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_x(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_y(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_y(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_top(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_top(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_bottom(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_bottom(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_left(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_left(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_right(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_right(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_scroll_end(
    obj: _obj_t,
    end: "point_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    end = _get_c_obj(end, 'point_t')
    res = _lib_lvgl.lib.lv_obj_get_scroll_end(  # NOQA
        obj,
        end
    )
    return _get_py_obj(res, 'None')


def obj_scroll_by(
    obj: _obj_t,
    x: "coord_t",
    y: "coord_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_by(  # NOQA
        obj,
        x,
        y,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_by_bounded(
    obj: _obj_t,
    dx: "coord_t",
    dy: "coord_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    dx = _get_c_obj(dx, 'coord_t')
    dy = _get_c_obj(dy, 'coord_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_by_bounded(  # NOQA
        obj,
        dx,
        dy,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_to(
    obj: _obj_t,
    x: "coord_t",
    y: "coord_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_to(  # NOQA
        obj,
        x,
        y,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_to_x(
    obj: _obj_t,
    x: "coord_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_to_x(  # NOQA
        obj,
        x,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_to_y(
    obj: _obj_t,
    y: "coord_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    y = _get_c_obj(y, 'coord_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_to_y(  # NOQA
        obj,
        y,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_to_view(
    obj: _obj_t,
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_to_view(  # NOQA
        obj,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_scroll_to_view_recursive(
    obj: _obj_t,
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_scroll_to_view_recursive(  # NOQA
        obj,
        anim_en
    )
    return _get_py_obj(res, 'None')


def _obj_scroll_by_raw(
    obj: _obj_t,
    x: "coord_t",
    y: "coord_t"
) -> "res_t":

    obj = _get_c_obj(obj, '_obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib._lv_obj_scroll_by_raw(  # NOQA
        obj,
        x,
        y
    )
    return _get_py_obj(res, 'res_t')


def obj_is_scrolling(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_is_scrolling(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_update_snap(
    obj: _obj_t,
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_update_snap(  # NOQA
        obj,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_get_scrollbar_area(
    obj: _obj_t,
    hor: "area_t",
    ver: "area_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    hor = _get_c_obj(hor, 'area_t')
    ver = _get_c_obj(ver, 'area_t')
    res = _lib_lvgl.lib.lv_obj_get_scrollbar_area(  # NOQA
        obj,
        hor,
        ver
    )
    return _get_py_obj(res, 'None')


def obj_scrollbar_invalidate(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_scrollbar_invalidate(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_readjust_scroll(
    obj: _obj_t,
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_readjust_scroll(  # NOQA
        obj,
        anim_en
    )
    return _get_py_obj(res, 'None')


def _obj_style_init() -> None:

    res = _lib_lvgl.lib._lv_obj_style_init()  # NOQA
    return _get_py_obj(res, 'None')


def obj_add_style(
    obj: _obj_t,
    style: "style_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    style = _get_c_obj(style, 'style_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_add_style(  # NOQA
        obj,
        style,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_replace_style(
    obj: _obj_t,
    old_style: "style_t",
    new_style: "style_t",
    selector: "style_selector_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    old_style = _get_c_obj(old_style, 'style_t')
    new_style = _get_c_obj(new_style, 'style_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_replace_style(  # NOQA
        obj,
        old_style,
        new_style,
        selector
    )
    return _get_py_obj(res, 'bool')


def obj_remove_style(
    obj: _obj_t,
    style: "style_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    style = _get_c_obj(style, 'style_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_remove_style(  # NOQA
        obj,
        style,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_remove_style_all(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_remove_style_all(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_report_style_change(
    style: "style_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    res = _lib_lvgl.lib.lv_obj_report_style_change(  # NOQA
        style
    )
    return _get_py_obj(res, 'None')


def obj_refresh_style(
    obj: _obj_t,
    part: "part_t",
    prop: "style_prop_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'part_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib.lv_obj_refresh_style(  # NOQA
        obj,
        part,
        prop
    )
    return _get_py_obj(res, 'None')


def obj_enable_style_refresh(
    en: "bool"
) -> None:

    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_obj_enable_style_refresh(  # NOQA
        en
    )
    return _get_py_obj(res, 'None')


def obj_get_style_prop(
    obj: _obj_t,
    part: "part_t",
    prop: "style_prop_t"
) -> "style_value_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'part_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    res = _lib_lvgl.lib.lv_obj_get_style_prop(  # NOQA
        obj,
        part,
        prop
    )
    return _get_py_obj(res, 'style_value_t')


def obj_set_local_style_prop(
    obj: _obj_t,
    prop: "style_prop_t",
    value: "style_value_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    value = _get_c_obj(value, 'style_value_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_local_style_prop(  # NOQA
        obj,
        prop,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_local_style_prop_meta(
    obj: _obj_t,
    prop: "style_prop_t",
    meta: "uint16_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    meta = _get_c_obj(meta, 'uint16_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_local_style_prop_meta(  # NOQA
        obj,
        prop,
        meta,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_get_local_style_prop(
    obj: _obj_t,
    prop: "style_prop_t",
    value: "style_value_t",
    selector: "style_selector_t"
) -> "style_res_t":

    obj = _get_c_obj(obj, '_obj_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    value = _get_c_obj(value, 'style_value_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_get_local_style_prop(  # NOQA
        obj,
        prop,
        value,
        selector
    )
    return _get_py_obj(res, 'style_res_t')


def obj_remove_local_style_prop(
    obj: _obj_t,
    prop: "style_prop_t",
    selector: "style_selector_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    prop = _get_c_obj(prop, 'style_prop_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_remove_local_style_prop(  # NOQA
        obj,
        prop,
        selector
    )
    return _get_py_obj(res, 'bool')


def _obj_style_apply_color_filter(
    obj: _obj_t,
    part: "uint32_t",
    v: "style_value_t"
) -> "style_value_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    v = _get_c_obj(v, 'style_value_t')
    res = _lib_lvgl.lib._lv_obj_style_apply_color_filter(  # NOQA
        obj,
        part,
        v
    )
    return _get_py_obj(res, 'style_value_t')


def _obj_style_create_transition(
    obj: _obj_t,
    part: "part_t",
    prev_state: "state_t",
    new_state: "state_t",
    tr: "_obj_style_transition_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'part_t')
    prev_state = _get_c_obj(prev_state, 'state_t')
    new_state = _get_c_obj(new_state, 'state_t')
    tr = _get_c_obj(tr, '_obj_style_transition_dsc_t')
    res = _lib_lvgl.lib._lv_obj_style_create_transition(  # NOQA
        obj,
        part,
        prev_state,
        new_state,
        tr
    )
    return _get_py_obj(res, 'None')


def _obj_style_state_compare(
    obj: _obj_t,
    state1: "state_t",
    state2: "state_t"
) -> "_style_state_cmp_t":

    obj = _get_c_obj(obj, '_obj_t')
    state1 = _get_c_obj(state1, 'state_t')
    state2 = _get_c_obj(state2, 'state_t')
    res = _lib_lvgl.lib._lv_obj_style_state_compare(  # NOQA
        obj,
        state1,
        state2
    )
    return _get_py_obj(res, '_style_state_cmp_t')


def obj_fade_in(
    obj: _obj_t,
    time: "uint32_t",
    delay: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    time = _get_c_obj(time, 'uint32_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_fade_in(  # NOQA
        obj,
        time,
        delay
    )
    return _get_py_obj(res, 'None')


def obj_fade_out(
    obj: _obj_t,
    time: "uint32_t",
    delay: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    time = _get_c_obj(time, 'uint32_t')
    delay = _get_c_obj(delay, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_fade_out(  # NOQA
        obj,
        time,
        delay
    )
    return _get_py_obj(res, 'None')


def obj_style_get_selector_state(
    selector: "style_selector_t"
) -> "state_t":

    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_style_get_selector_state(  # NOQA
        selector
    )
    return _get_py_obj(res, 'state_t')


def obj_style_get_selector_part(
    selector: "style_selector_t"
) -> "part_t":

    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_style_get_selector_part(  # NOQA
        selector
    )
    return _get_py_obj(res, 'part_t')


def obj_get_style_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_min_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_min_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_max_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_max_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_height(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_height(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_min_height(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_min_height(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_max_height(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_max_height(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_x(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_x(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_y(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_y(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_align(
    obj: _obj_t,
    part: "uint32_t"
) -> "align_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'align_t')


def obj_get_style_transform_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_transform_height(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_height(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_translate_x(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_translate_x(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_translate_y(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_translate_y(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_transform_zoom(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_zoom(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_transform_angle(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_angle(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_transform_pivot_x(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_pivot_x(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_transform_pivot_y(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_pivot_y(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_top(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_top(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_bottom(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_bottom(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_left(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_left(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_right(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_right(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_row(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_row(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_pad_column(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_pad_column(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_margin_top(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_margin_top(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_margin_bottom(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_margin_bottom(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_margin_left(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_margin_left(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_margin_right(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_margin_right(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_bg_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_bg_grad_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_grad_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_grad_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_grad_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_grad_dir(
    obj: _obj_t,
    part: "uint32_t"
) -> "grad_dir_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_grad_dir(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grad_dir_t')


def obj_get_style_bg_main_stop(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_main_stop(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_bg_grad_stop(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_grad_stop(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_bg_grad(
    obj: _obj_t,
    part: "uint32_t"
) -> "grad_dsc_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_grad(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grad_dsc_t')


def obj_get_style_bg_dither_mode(
    obj: _obj_t,
    part: "uint32_t"
) -> "dither_mode_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_dither_mode(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'dither_mode_t')


def obj_get_style_bg_img_src(
    obj: _obj_t,
    part: "uint32_t"
) -> Any:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_src(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'void')


def obj_get_style_bg_img_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_bg_img_recolor(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_recolor(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_img_recolor_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_recolor_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_bg_img_recolor_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_recolor_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_bg_img_tiled(
    obj: _obj_t,
    part: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_bg_img_tiled(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'bool')


def obj_get_style_border_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_border_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_border_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_border_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_border_side(
    obj: _obj_t,
    part: "uint32_t"
) -> "border_side_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_side(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'border_side_t')


def obj_get_style_border_post(
    obj: _obj_t,
    part: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_border_post(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'bool')


def obj_get_style_outline_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_outline_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_outline_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_outline_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_outline_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_outline_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_outline_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_outline_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_outline_pad(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_outline_pad(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_shadow_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_shadow_ofs_x(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_ofs_x(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_shadow_ofs_y(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_ofs_y(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_shadow_spread(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_spread(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_shadow_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_shadow_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_shadow_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_shadow_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_img_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_img_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_img_recolor(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_img_recolor(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_img_recolor_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_img_recolor_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_img_recolor_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_img_recolor_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_line_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_line_dash_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_dash_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_line_dash_gap(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_dash_gap(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_line_rounded(
    obj: _obj_t,
    part: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_rounded(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'bool')


def obj_get_style_line_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_line_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_line_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_line_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_arc_width(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_width(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_arc_rounded(
    obj: _obj_t,
    part: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_rounded(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'bool')


def obj_get_style_arc_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_arc_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_arc_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_arc_img_src(
    obj: _obj_t,
    part: "uint32_t"
) -> Any:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_arc_img_src(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'void')


def obj_get_style_text_color(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_color(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_text_color_filtered(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_color_filtered(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_t')


def obj_get_style_text_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_text_font(
    obj: _obj_t,
    part: "uint32_t"
) -> "font_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_font(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'font_t')


def obj_get_style_text_letter_space(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_letter_space(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_text_line_space(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_line_space(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_text_decor(
    obj: _obj_t,
    part: "uint32_t"
) -> "text_decor_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_decor(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'text_decor_t')


def obj_get_style_text_align(
    obj: _obj_t,
    part: "uint32_t"
) -> "text_align_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_text_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'text_align_t')


def obj_get_style_radius(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_radius(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_clip_corner(
    obj: _obj_t,
    part: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_clip_corner(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'bool')


def obj_get_style_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_color_filter_dsc(
    obj: _obj_t,
    part: "uint32_t"
) -> "color_filter_dsc_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_color_filter_dsc(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'color_filter_dsc_t')


def obj_get_style_color_filter_opa(
    obj: _obj_t,
    part: "uint32_t"
) -> "opa_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_color_filter_opa(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'opa_t')


def obj_get_style_anim(
    obj: _obj_t,
    part: "uint32_t"
) -> "anim_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_anim(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'anim_t')


def obj_get_style_anim_time(
    obj: _obj_t,
    part: "uint32_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_anim_time(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'uint32_t')


def obj_get_style_anim_speed(
    obj: _obj_t,
    part: "uint32_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_anim_speed(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'uint32_t')


def obj_get_style_transition(
    obj: _obj_t,
    part: "uint32_t"
) -> "style_transition_dsc_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transition(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'style_transition_dsc_t')


def obj_get_style_blend_mode(
    obj: _obj_t,
    part: "uint32_t"
) -> "blend_mode_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_blend_mode(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'blend_mode_t')


def obj_get_style_layout(
    obj: _obj_t,
    part: "uint32_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_layout(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'uint16_t')


def obj_get_style_base_dir(
    obj: _obj_t,
    part: "uint32_t"
) -> "base_dir_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_base_dir(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'base_dir_t')


def obj_set_style_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_min_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_min_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_max_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_max_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_height(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_height(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_min_height(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_min_height(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_max_height(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_max_height(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_x(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_x(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_y(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_y(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_align(
    obj: _obj_t,
    value: "align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_height(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_height(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_translate_x(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_translate_x(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_translate_y(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_translate_y(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_zoom(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_zoom(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_angle(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_angle(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_pivot_x(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_pivot_x(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transform_pivot_y(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transform_pivot_y(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_top(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_top(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_bottom(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_bottom(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_left(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_left(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_right(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_right(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_row(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_row(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_column(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_column(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_top(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_top(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_bottom(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_bottom(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_left(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_left(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_right(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_right(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_grad_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_grad_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_grad_dir(
    obj: _obj_t,
    value: "grad_dir_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'grad_dir_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_grad_dir(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_main_stop(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_main_stop(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_grad_stop(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_grad_stop(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_grad(
    obj: _obj_t,
    value: "grad_dsc_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'grad_dsc_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_grad(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_dither_mode(
    obj: _obj_t,
    value: "dither_mode_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'dither_mode_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_dither_mode(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_img_src(
    obj: _obj_t,
    value: None,
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'None')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_img_src(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_img_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_img_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_img_recolor(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_img_recolor(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_img_recolor_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_img_recolor_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_bg_img_tiled(
    obj: _obj_t,
    value: "bool",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'bool')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_bg_img_tiled(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_border_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_border_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_border_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_border_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_border_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_border_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_border_side(
    obj: _obj_t,
    value: "border_side_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'border_side_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_border_side(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_border_post(
    obj: _obj_t,
    value: "bool",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'bool')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_border_post(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_outline_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_outline_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_outline_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_outline_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_outline_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_outline_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_outline_pad(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_outline_pad(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_ofs_x(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_ofs_x(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_ofs_y(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_ofs_y(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_spread(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_spread(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_shadow_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_shadow_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_img_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_img_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_img_recolor(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_img_recolor(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_img_recolor_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_img_recolor_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_dash_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_dash_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_dash_gap(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_dash_gap(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_rounded(
    obj: _obj_t,
    value: "bool",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'bool')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_rounded(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_line_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_line_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_arc_width(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_arc_width(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_arc_rounded(
    obj: _obj_t,
    value: "bool",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'bool')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_arc_rounded(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_arc_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_arc_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_arc_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_arc_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_arc_img_src(
    obj: _obj_t,
    value: None,
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'None')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_arc_img_src(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_color(
    obj: _obj_t,
    value: "color_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_color(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_font(
    obj: _obj_t,
    value: "font_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'font_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_font(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_letter_space(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_letter_space(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_line_space(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_line_space(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_decor(
    obj: _obj_t,
    value: "text_decor_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'text_decor_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_decor(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_text_align(
    obj: _obj_t,
    value: "text_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'text_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_text_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_radius(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_radius(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_clip_corner(
    obj: _obj_t,
    value: "bool",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'bool')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_clip_corner(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_color_filter_dsc(
    obj: _obj_t,
    value: "color_filter_dsc_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'color_filter_dsc_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_color_filter_dsc(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_color_filter_opa(
    obj: _obj_t,
    value: "opa_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'opa_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_color_filter_opa(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_anim(
    obj: _obj_t,
    value: "anim_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'anim_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_anim(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_anim_time(
    obj: _obj_t,
    value: "uint32_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'uint32_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_anim_time(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_anim_speed(
    obj: _obj_t,
    value: "uint32_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'uint32_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_anim_speed(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_transition(
    obj: _obj_t,
    value: "style_transition_dsc_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'style_transition_dsc_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_transition(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_blend_mode(
    obj: _obj_t,
    value: "blend_mode_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'blend_mode_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_blend_mode(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_layout(
    obj: _obj_t,
    value: "uint16_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'uint16_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_layout(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_base_dir(
    obj: _obj_t,
    value: "base_dir_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'base_dir_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_base_dir(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_all(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_all(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_hor(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_hor(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_ver(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_ver(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_all(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_all(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_hor(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_hor(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_margin_ver(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_margin_ver(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_pad_gap(
    obj: _obj_t,
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_pad_gap(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_size(
    obj: _obj_t,
    width: "coord_t",
    height: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    width = _get_c_obj(width, 'coord_t')
    height = _get_c_obj(height, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_size(  # NOQA
        obj,
        width,
        height,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_get_style_space_left(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_space_left(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_space_right(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_space_right(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_space_top(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_space_top(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_space_bottom(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_space_bottom(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_calculate_style_text_align(
    obj: _obj_t,
    part: "part_t",
    txt: "char"
) -> "text_align_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'part_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_obj_calculate_style_text_align(  # NOQA
        obj,
        part,
        txt
    )
    return _get_py_obj(res, 'text_align_t')


def obj_get_style_transform_zoom_safe(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_transform_zoom_safe(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def img_buf_set_palette(
    dsc: "img_dsc_t",
    id: "uint8_t",
    c: "color32_t"
) -> None:

    dsc = _get_c_obj(dsc, 'img_dsc_t')
    id = _get_c_obj(id, 'uint8_t')
    c = _get_c_obj(c, 'color32_t')
    res = _lib_lvgl.lib.lv_img_buf_set_palette(  # NOQA
        dsc,
        id,
        c
    )
    return _get_py_obj(res, 'None')


def img_buf_free(
    dsc: "img_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'img_dsc_t')
    res = _lib_lvgl.lib.lv_img_buf_free(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def _img_buf_get_transformed_area(
    res: "area_t",
    w: "coord_t",
    h: "coord_t",
    angle: "int16_t",
    zoom: "uint16_t",
    pivot: "point_t"
) -> None:

    res = _get_c_obj(res, 'area_t')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    angle = _get_c_obj(angle, 'int16_t')
    zoom = _get_c_obj(zoom, 'uint16_t')
    pivot = _get_c_obj(pivot, 'point_t')
    res = _lib_lvgl.lib._lv_img_buf_get_transformed_area(  # NOQA
        res,
        w,
        h,
        angle,
        zoom,
        pivot
    )
    return _get_py_obj(res, 'None')


def _fs_init() -> None:

    res = _lib_lvgl.lib._lv_fs_init()  # NOQA
    return _get_py_obj(res, 'None')


def fs_drv_init(
    drv: "fs_drv_t"
) -> None:

    drv = _get_c_obj(drv, 'fs_drv_t')
    res = _lib_lvgl.lib.lv_fs_drv_init(  # NOQA
        drv
    )
    return _get_py_obj(res, 'None')


def fs_drv_register(
    drv: "fs_drv_t"
) -> None:

    drv = _get_c_obj(drv, 'fs_drv_t')
    res = _lib_lvgl.lib.lv_fs_drv_register(  # NOQA
        drv
    )
    return _get_py_obj(res, 'None')


def fs_get_drv(
    letter: "char"
) -> "fs_drv_t":

    letter = _get_c_obj(letter, 'char')
    res = _lib_lvgl.lib.lv_fs_get_drv(  # NOQA
        letter
    )
    return _get_py_obj(res, 'fs_drv_t')


def fs_is_ready(
    letter: "char"
) -> "bool":

    letter = _get_c_obj(letter, 'char')
    res = _lib_lvgl.lib.lv_fs_is_ready(  # NOQA
        letter
    )
    return _get_py_obj(res, 'bool')


def fs_open(
    file_p: "fs_file_t",
    path: "char",
    mode: "fs_mode_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    path = _get_c_obj(path, 'char')
    mode = _get_c_obj(mode, 'fs_mode_t')
    res = _lib_lvgl.lib.lv_fs_open(  # NOQA
        file_p,
        path,
        mode
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_close(
    file_p: "fs_file_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    res = _lib_lvgl.lib.lv_fs_close(  # NOQA
        file_p
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_read(
    file_p: "fs_file_t",
    buf: None,
    btr: "uint32_t",
    br: "uint32_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    buf = _get_c_obj(buf, 'None')
    btr = _get_c_obj(btr, 'uint32_t')
    br = _get_c_obj(br, 'uint32_t')
    res = _lib_lvgl.lib.lv_fs_read(  # NOQA
        file_p,
        buf,
        btr,
        br
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_write(
    file_p: "fs_file_t",
    buf: None,
    btw: "uint32_t",
    bw: "uint32_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    buf = _get_c_obj(buf, 'None')
    btw = _get_c_obj(btw, 'uint32_t')
    bw = _get_c_obj(bw, 'uint32_t')
    res = _lib_lvgl.lib.lv_fs_write(  # NOQA
        file_p,
        buf,
        btw,
        bw
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_seek(
    file_p: "fs_file_t",
    pos: "uint32_t",
    whence: "fs_whence_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    pos = _get_c_obj(pos, 'uint32_t')
    whence = _get_c_obj(whence, 'fs_whence_t')
    res = _lib_lvgl.lib.lv_fs_seek(  # NOQA
        file_p,
        pos,
        whence
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_tell(
    file_p: "fs_file_t",
    pos: "uint32_t"
) -> "fs_res_t":

    file_p = _get_c_obj(file_p, 'fs_file_t')
    pos = _get_c_obj(pos, 'uint32_t')
    res = _lib_lvgl.lib.lv_fs_tell(  # NOQA
        file_p,
        pos
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_dir_open(
    rddir_p: "fs_dir_t",
    path: "char"
) -> "fs_res_t":

    rddir_p = _get_c_obj(rddir_p, 'fs_dir_t')
    path = _get_c_obj(path, 'char')
    res = _lib_lvgl.lib.lv_fs_dir_open(  # NOQA
        rddir_p,
        path
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_dir_read(
    rddir_p: "fs_dir_t",
    fn: "char"
) -> "fs_res_t":

    rddir_p = _get_c_obj(rddir_p, 'fs_dir_t')
    fn = _get_c_obj(fn, 'char')
    res = _lib_lvgl.lib.lv_fs_dir_read(  # NOQA
        rddir_p,
        fn
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_dir_close(
    rddir_p: "fs_dir_t"
) -> "fs_res_t":

    rddir_p = _get_c_obj(rddir_p, 'fs_dir_t')
    res = _lib_lvgl.lib.lv_fs_dir_close(  # NOQA
        rddir_p
    )
    return _get_py_obj(res, 'fs_res_t')


def fs_get_letters(
    buf: "char"
) -> "char":

    buf = _get_c_obj(buf, 'char')
    res = _lib_lvgl.lib.lv_fs_get_letters(  # NOQA
        buf
    )
    return _get_py_obj(res, 'char')


def fs_get_ext(
    fn: "char"
) -> "char":

    fn = _get_c_obj(fn, 'char')
    res = _lib_lvgl.lib.lv_fs_get_ext(  # NOQA
        fn
    )
    return _get_py_obj(res, 'char')


def fs_up(
    path: "char"
) -> "char":

    path = _get_c_obj(path, 'char')
    res = _lib_lvgl.lib.lv_fs_up(  # NOQA
        path
    )
    return _get_py_obj(res, 'char')


def fs_get_last(
    path: "char"
) -> "char":

    path = _get_c_obj(path, 'char')
    res = _lib_lvgl.lib.lv_fs_get_last(  # NOQA
        path
    )
    return _get_py_obj(res, 'char')


def _img_decoder_init() -> None:

    res = _lib_lvgl.lib._lv_img_decoder_init()  # NOQA
    return _get_py_obj(res, 'None')


def img_decoder_get_info(
    src: None,
    header: "img_header_t"
) -> "res_t":

    src = _get_c_obj(src, 'None')
    header = _get_c_obj(header, 'img_header_t')
    res = _lib_lvgl.lib.lv_img_decoder_get_info(  # NOQA
        src,
        header
    )
    return _get_py_obj(res, 'res_t')


def img_decoder_open(
    dsc: "img_decoder_dsc_t",
    src: None,
    color: "color_t",
    frame_id: "int32_t"
) -> "res_t":

    dsc = _get_c_obj(dsc, 'img_decoder_dsc_t')
    src = _get_c_obj(src, 'None')
    color = _get_c_obj(color, 'color_t')
    frame_id = _get_c_obj(frame_id, 'int32_t')
    res = _lib_lvgl.lib.lv_img_decoder_open(  # NOQA
        dsc,
        src,
        color,
        frame_id
    )
    return _get_py_obj(res, 'res_t')


def img_decoder_read_line(
    dsc: "img_decoder_dsc_t",
    x: "coord_t",
    y: "coord_t",
    len: "coord_t",
    buf: "uint8_t"
) -> "res_t":

    dsc = _get_c_obj(dsc, 'img_decoder_dsc_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    len = _get_c_obj(len, 'coord_t')
    buf = _get_c_obj(buf, 'uint8_t')
    res = _lib_lvgl.lib.lv_img_decoder_read_line(  # NOQA
        dsc,
        x,
        y,
        len,
        buf
    )
    return _get_py_obj(res, 'res_t')


def img_decoder_close(
    dsc: "img_decoder_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'img_decoder_dsc_t')
    res = _lib_lvgl.lib.lv_img_decoder_close(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def img_decoder_create() -> "img_decoder_t":

    res = _lib_lvgl.lib.lv_img_decoder_create()  # NOQA
    return _get_py_obj(res, 'img_decoder_t')


def img_decoder_delete(
    decoder: "img_decoder_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    res = _lib_lvgl.lib.lv_img_decoder_delete(  # NOQA
        decoder
    )
    return _get_py_obj(res, 'None')


def img_decoder_set_info_cb(
    decoder: "img_decoder_t",
    info_cb: "img_decoder_info_f_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    info_cb = _get_c_obj(info_cb, 'img_decoder_info_f_t')
    res = _lib_lvgl.lib.lv_img_decoder_set_info_cb(  # NOQA
        decoder,
        info_cb
    )
    return _get_py_obj(res, 'None')


def img_decoder_set_open_cb(
    decoder: "img_decoder_t",
    open_cb: "img_decoder_open_f_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    open_cb = _get_c_obj(open_cb, 'img_decoder_open_f_t')
    res = _lib_lvgl.lib.lv_img_decoder_set_open_cb(  # NOQA
        decoder,
        open_cb
    )
    return _get_py_obj(res, 'None')


def img_decoder_set_read_line_cb(
    decoder: "img_decoder_t",
    read_line_cb: "img_decoder_read_line_f_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    read_line_cb = _get_c_obj(read_line_cb, 'img_decoder_read_line_f_t')
    res = _lib_lvgl.lib.lv_img_decoder_set_read_line_cb(  # NOQA
        decoder,
        read_line_cb
    )
    return _get_py_obj(res, 'None')


def img_decoder_set_close_cb(
    decoder: "img_decoder_t",
    close_cb: "img_decoder_close_f_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    close_cb = _get_c_obj(close_cb, 'img_decoder_close_f_t')
    res = _lib_lvgl.lib.lv_img_decoder_set_close_cb(  # NOQA
        decoder,
        close_cb
    )
    return _get_py_obj(res, 'None')


def img_decoder_built_in_info(
    decoder: "img_decoder_t",
    src: None,
    header: "img_header_t"
) -> "res_t":

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    src = _get_c_obj(src, 'None')
    header = _get_c_obj(header, 'img_header_t')
    res = _lib_lvgl.lib.lv_img_decoder_built_in_info(  # NOQA
        decoder,
        src,
        header
    )
    return _get_py_obj(res, 'res_t')


def img_decoder_built_in_open(
    decoder: "img_decoder_t",
    dsc: "img_decoder_dsc_t"
) -> "res_t":

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    dsc = _get_c_obj(dsc, 'img_decoder_dsc_t')
    res = _lib_lvgl.lib.lv_img_decoder_built_in_open(  # NOQA
        decoder,
        dsc
    )
    return _get_py_obj(res, 'res_t')


def img_decoder_built_in_close(
    decoder: "img_decoder_t",
    dsc: "img_decoder_dsc_t"
) -> None:

    decoder = _get_c_obj(decoder, 'img_decoder_t')
    dsc = _get_c_obj(dsc, 'img_decoder_dsc_t')
    res = _lib_lvgl.lib.lv_img_decoder_built_in_close(  # NOQA
        decoder,
        dsc
    )
    return _get_py_obj(res, 'None')


def img_cache_manager_init(
    manager: "img_cache_manager_t"
) -> None:

    manager = _get_c_obj(manager, 'img_cache_manager_t')
    res = _lib_lvgl.lib.lv_img_cache_manager_init(  # NOQA
        manager
    )
    return _get_py_obj(res, 'None')


def img_cache_manager_apply(
    manager: "img_cache_manager_t"
) -> None:

    manager = _get_c_obj(manager, 'img_cache_manager_t')
    res = _lib_lvgl.lib.lv_img_cache_manager_apply(  # NOQA
        manager
    )
    return _get_py_obj(res, 'None')


def _img_cache_open(
    src: None,
    color: "color_t",
    frame_id: "int32_t"
) -> "_img_cache_entry_t":

    src = _get_c_obj(src, 'None')
    color = _get_c_obj(color, 'color_t')
    frame_id = _get_c_obj(frame_id, 'int32_t')
    res = _lib_lvgl.lib._lv_img_cache_open(  # NOQA
        src,
        color,
        frame_id
    )
    return _get_py_obj(res, '_img_cache_entry_t')


def img_cache_set_size(
    new_entry_cnt: "uint16_t"
) -> None:

    new_entry_cnt = _get_c_obj(new_entry_cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_img_cache_set_size(  # NOQA
        new_entry_cnt
    )
    return _get_py_obj(res, 'None')


def img_cache_invalidate_src(
    src: None
) -> None:

    src = _get_c_obj(src, 'None')
    res = _lib_lvgl.lib.lv_img_cache_invalidate_src(  # NOQA
        src
    )
    return _get_py_obj(res, 'None')


def gradient_calculate(
    dsc: "grad_dsc_t",
    range: "coord_t",
    frac: "coord_t"
) -> "grad_color_t":

    dsc = _get_c_obj(dsc, 'grad_dsc_t')
    range = _get_c_obj(range, 'coord_t')
    frac = _get_c_obj(frac, 'coord_t')
    res = _lib_lvgl.lib.lv_gradient_calculate(  # NOQA
        dsc,
        range,
        frac
    )
    return _get_py_obj(res, 'grad_color_t')


def gradient_set_cache_size(
    max_bytes: "size_t"
) -> None:

    max_bytes = _get_c_obj(max_bytes, 'size_t')
    res = _lib_lvgl.lib.lv_gradient_set_cache_size(  # NOQA
        max_bytes
    )
    return _get_py_obj(res, 'None')


def gradient_free_cache() -> None:

    res = _lib_lvgl.lib.lv_gradient_free_cache()  # NOQA
    return _get_py_obj(res, 'None')


def gradient_get(
    gradient: "grad_dsc_t",
    w: "coord_t",
    h: "coord_t"
) -> "grad_t":

    gradient = _get_c_obj(gradient, 'grad_dsc_t')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_gradient_get(  # NOQA
        gradient,
        w,
        h
    )
    return _get_py_obj(res, 'grad_t')


def gradient_cleanup(
    grad: "grad_t"
) -> None:

    grad = _get_c_obj(grad, 'grad_t')
    res = _lib_lvgl.lib.lv_gradient_cleanup(  # NOQA
        grad
    )
    return _get_py_obj(res, 'None')


def draw_rect_dsc_init(
    dsc: "draw_rect_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'draw_rect_dsc_t')
    res = _lib_lvgl.lib.lv_draw_rect_dsc_init(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def draw_rect(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_rect_dsc_t",
    coords: "area_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_rect_dsc_t')
    coords = _get_c_obj(coords, 'area_t')
    res = _lib_lvgl.lib.lv_draw_rect(  # NOQA
        draw_ctx,
        dsc,
        coords
    )
    return _get_py_obj(res, 'None')


def draw_label_dsc_init(
    dsc: "draw_label_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'draw_label_dsc_t')
    res = _lib_lvgl.lib.lv_draw_label_dsc_init(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def draw_label(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_label_dsc_t",
    coords: "area_t",
    txt: "char",
    hint: "draw_label_hint_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_label_dsc_t')
    coords = _get_c_obj(coords, 'area_t')
    txt = _get_c_obj(txt, 'char')
    hint = _get_c_obj(hint, 'draw_label_hint_t')
    res = _lib_lvgl.lib.lv_draw_label(  # NOQA
        draw_ctx,
        dsc,
        coords,
        txt,
        hint
    )
    return _get_py_obj(res, 'None')


def draw_letter(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_label_dsc_t",
    pos_p: "point_t",
    letter: "uint32_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_label_dsc_t')
    pos_p = _get_c_obj(pos_p, 'point_t')
    letter = _get_c_obj(letter, 'uint32_t')
    res = _lib_lvgl.lib.lv_draw_letter(  # NOQA
        draw_ctx,
        dsc,
        pos_p,
        letter
    )
    return _get_py_obj(res, 'None')


def draw_img_dsc_init(
    dsc: "draw_img_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'draw_img_dsc_t')
    res = _lib_lvgl.lib.lv_draw_img_dsc_init(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def draw_img(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_img_dsc_t",
    coords: "area_t",
    src: None
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_img_dsc_t')
    coords = _get_c_obj(coords, 'area_t')
    src = _get_c_obj(src, 'None')
    res = _lib_lvgl.lib.lv_draw_img(  # NOQA
        draw_ctx,
        dsc,
        coords,
        src
    )
    return _get_py_obj(res, 'None')


def draw_img_decoded(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_img_dsc_t",
    coords: "area_t",
    map_p: "uint8_t",
    sup: "draw_img_sup_t",
    color_format: "color_format_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_img_dsc_t')
    coords = _get_c_obj(coords, 'area_t')
    map_p = _get_c_obj(map_p, 'uint8_t')
    sup = _get_c_obj(sup, 'draw_img_sup_t')
    color_format = _get_c_obj(color_format, 'color_format_t')
    res = _lib_lvgl.lib.lv_draw_img_decoded(  # NOQA
        draw_ctx,
        dsc,
        coords,
        map_p,
        sup,
        color_format
    )
    return _get_py_obj(res, 'None')


def img_src_get_type(
    src: None
) -> "img_src_t":

    src = _get_c_obj(src, 'None')
    res = _lib_lvgl.lib.lv_img_src_get_type(  # NOQA
        src
    )
    return _get_py_obj(res, 'img_src_t')


def draw_line_dsc_init(
    dsc: "draw_line_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'draw_line_dsc_t')
    res = _lib_lvgl.lib.lv_draw_line_dsc_init(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def draw_line(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_line_dsc_t",
    point1: "point_t",
    point2: "point_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_line_dsc_t')
    point1 = _get_c_obj(point1, 'point_t')
    point2 = _get_c_obj(point2, 'point_t')
    res = _lib_lvgl.lib.lv_draw_line(  # NOQA
        draw_ctx,
        dsc,
        point1,
        point2
    )
    return _get_py_obj(res, 'None')


def draw_polygon(
    draw_ctx: _draw_ctx_t,
    draw_dsc: "draw_rect_dsc_t",
    points: List["point_t"],
    point_cnt: "uint16_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_rect_dsc_t')
    points = _get_c_obj(points, 'List[point_t]')
    point_cnt = _get_c_obj(point_cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_draw_polygon(  # NOQA
        draw_ctx,
        draw_dsc,
        points,
        point_cnt
    )
    return _get_py_obj(res, 'None')


def draw_triangle(
    draw_ctx: _draw_ctx_t,
    draw_dsc: "draw_rect_dsc_t",
    points: List["point_t"]
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_rect_dsc_t')
    points = _get_c_obj(points, 'List[point_t]')
    res = _lib_lvgl.lib.lv_draw_triangle(  # NOQA
        draw_ctx,
        draw_dsc,
        points
    )
    return _get_py_obj(res, 'None')


def draw_arc_dsc_init(
    dsc: "draw_arc_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'draw_arc_dsc_t')
    res = _lib_lvgl.lib.lv_draw_arc_dsc_init(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def draw_arc(
    draw_ctx: _draw_ctx_t,
    dsc: "draw_arc_dsc_t",
    center: "point_t",
    radius: "uint16_t",
    start_angle: "uint16_t",
    end_angle: "uint16_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dsc = _get_c_obj(dsc, 'draw_arc_dsc_t')
    center = _get_c_obj(center, 'point_t')
    radius = _get_c_obj(radius, 'uint16_t')
    start_angle = _get_c_obj(start_angle, 'uint16_t')
    end_angle = _get_c_obj(end_angle, 'uint16_t')
    res = _lib_lvgl.lib.lv_draw_arc(  # NOQA
        draw_ctx,
        dsc,
        center,
        radius,
        start_angle,
        end_angle
    )
    return _get_py_obj(res, 'None')


def draw_arc_get_area(
    x: "coord_t",
    y: "coord_t",
    radius: "uint16_t",
    start_angle: "uint16_t",
    end_angle: "uint16_t",
    w: "coord_t",
    rounded: "bool",
    area: "area_t"
) -> None:

    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    radius = _get_c_obj(radius, 'uint16_t')
    start_angle = _get_c_obj(start_angle, 'uint16_t')
    end_angle = _get_c_obj(end_angle, 'uint16_t')
    w = _get_c_obj(w, 'coord_t')
    rounded = _get_c_obj(rounded, 'bool')
    area = _get_c_obj(area, 'area_t')
    res = _lib_lvgl.lib.lv_draw_arc_get_area(  # NOQA
        x,
        y,
        radius,
        start_angle,
        end_angle,
        w,
        rounded,
        area
    )
    return _get_py_obj(res, 'None')


def draw_mask_add(
    param: None,
    custom_id: None
) -> "int16_t":

    param = _get_c_obj(param, 'None')
    custom_id = _get_c_obj(custom_id, 'None')
    res = _lib_lvgl.lib.lv_draw_mask_add(  # NOQA
        param,
        custom_id
    )
    return _get_py_obj(res, 'int16_t')


def draw_mask_apply(
    mask_buf: "opa_t",
    abs_x: "coord_t",
    abs_y: "coord_t",
    len: "coord_t"
) -> "draw_mask_res_t":

    mask_buf = _get_c_obj(mask_buf, 'opa_t')
    abs_x = _get_c_obj(abs_x, 'coord_t')
    abs_y = _get_c_obj(abs_y, 'coord_t')
    len = _get_c_obj(len, 'coord_t')
    res = _lib_lvgl.lib.lv_draw_mask_apply(  # NOQA
        mask_buf,
        abs_x,
        abs_y,
        len
    )
    return _get_py_obj(res, 'draw_mask_res_t')


def draw_mask_apply_ids(
    mask_buf: "opa_t",
    abs_x: "coord_t",
    abs_y: "coord_t",
    len: "coord_t",
    ids: "int16_t",
    ids_count: "int16_t"
) -> "draw_mask_res_t":

    mask_buf = _get_c_obj(mask_buf, 'opa_t')
    abs_x = _get_c_obj(abs_x, 'coord_t')
    abs_y = _get_c_obj(abs_y, 'coord_t')
    len = _get_c_obj(len, 'coord_t')
    ids = _get_c_obj(ids, 'int16_t')
    ids_count = _get_c_obj(ids_count, 'int16_t')
    res = _lib_lvgl.lib.lv_draw_mask_apply_ids(  # NOQA
        mask_buf,
        abs_x,
        abs_y,
        len,
        ids,
        ids_count
    )
    return _get_py_obj(res, 'draw_mask_res_t')


def draw_mask_remove_id(
    id: "int16_t"
) -> Any:

    id = _get_c_obj(id, 'int16_t')
    res = _lib_lvgl.lib.lv_draw_mask_remove_id(  # NOQA
        id
    )
    return _get_py_obj(res, 'void')


def draw_mask_remove_custom(
    custom_id: None
) -> Any:

    custom_id = _get_c_obj(custom_id, 'None')
    res = _lib_lvgl.lib.lv_draw_mask_remove_custom(  # NOQA
        custom_id
    )
    return _get_py_obj(res, 'void')


def draw_mask_free_param(
    p: None
) -> None:

    p = _get_c_obj(p, 'None')
    res = _lib_lvgl.lib.lv_draw_mask_free_param(  # NOQA
        p
    )
    return _get_py_obj(res, 'None')


def _draw_mask_cleanup() -> None:

    res = _lib_lvgl.lib._lv_draw_mask_cleanup()  # NOQA
    return _get_py_obj(res, 'None')


def draw_mask_get_cnt() -> "uint8_t":

    res = _lib_lvgl.lib.lv_draw_mask_get_cnt()  # NOQA
    return _get_py_obj(res, 'uint8_t')


def draw_mask_is_any(
    a: "area_t"
) -> "bool":

    a = _get_c_obj(a, 'area_t')
    res = _lib_lvgl.lib.lv_draw_mask_is_any(  # NOQA
        a
    )
    return _get_py_obj(res, 'bool')


def draw_mask_line_points_init(
    param: "draw_mask_line_param_t",
    p1x: "coord_t",
    p1y: "coord_t",
    p2x: "coord_t",
    p2y: "coord_t",
    side: "draw_mask_line_side_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_line_param_t')
    p1x = _get_c_obj(p1x, 'coord_t')
    p1y = _get_c_obj(p1y, 'coord_t')
    p2x = _get_c_obj(p2x, 'coord_t')
    p2y = _get_c_obj(p2y, 'coord_t')
    side = _get_c_obj(side, 'draw_mask_line_side_t')
    res = _lib_lvgl.lib.lv_draw_mask_line_points_init(  # NOQA
        param,
        p1x,
        p1y,
        p2x,
        p2y,
        side
    )
    return _get_py_obj(res, 'None')


def draw_mask_line_angle_init(
    param: "draw_mask_line_param_t",
    p1x: "coord_t",
    py: "coord_t",
    angle: "int16_t",
    side: "draw_mask_line_side_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_line_param_t')
    p1x = _get_c_obj(p1x, 'coord_t')
    py = _get_c_obj(py, 'coord_t')
    angle = _get_c_obj(angle, 'int16_t')
    side = _get_c_obj(side, 'draw_mask_line_side_t')
    res = _lib_lvgl.lib.lv_draw_mask_line_angle_init(  # NOQA
        param,
        p1x,
        py,
        angle,
        side
    )
    return _get_py_obj(res, 'None')


def draw_mask_angle_init(
    param: "draw_mask_angle_param_t",
    vertex_x: "coord_t",
    vertex_y: "coord_t",
    start_angle: "coord_t",
    end_angle: "coord_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_angle_param_t')
    vertex_x = _get_c_obj(vertex_x, 'coord_t')
    vertex_y = _get_c_obj(vertex_y, 'coord_t')
    start_angle = _get_c_obj(start_angle, 'coord_t')
    end_angle = _get_c_obj(end_angle, 'coord_t')
    res = _lib_lvgl.lib.lv_draw_mask_angle_init(  # NOQA
        param,
        vertex_x,
        vertex_y,
        start_angle,
        end_angle
    )
    return _get_py_obj(res, 'None')


def draw_mask_radius_init(
    param: "draw_mask_radius_param_t",
    rect: "area_t",
    radius: "coord_t",
    inv: "bool"
) -> None:

    param = _get_c_obj(param, 'draw_mask_radius_param_t')
    rect = _get_c_obj(rect, 'area_t')
    radius = _get_c_obj(radius, 'coord_t')
    inv = _get_c_obj(inv, 'bool')
    res = _lib_lvgl.lib.lv_draw_mask_radius_init(  # NOQA
        param,
        rect,
        radius,
        inv
    )
    return _get_py_obj(res, 'None')


def draw_mask_fade_init(
    param: "draw_mask_fade_param_t",
    coords: "area_t",
    opa_top: "opa_t",
    y_top: "coord_t",
    opa_bottom: "opa_t",
    y_bottom: "coord_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_fade_param_t')
    coords = _get_c_obj(coords, 'area_t')
    opa_top = _get_c_obj(opa_top, 'opa_t')
    y_top = _get_c_obj(y_top, 'coord_t')
    opa_bottom = _get_c_obj(opa_bottom, 'opa_t')
    y_bottom = _get_c_obj(y_bottom, 'coord_t')
    res = _lib_lvgl.lib.lv_draw_mask_fade_init(  # NOQA
        param,
        coords,
        opa_top,
        y_top,
        opa_bottom,
        y_bottom
    )
    return _get_py_obj(res, 'None')


def draw_mask_map_init(
    param: "draw_mask_map_param_t",
    coords: "area_t",
    map: "opa_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_map_param_t')
    coords = _get_c_obj(coords, 'area_t')
    map = _get_c_obj(map, 'opa_t')
    res = _lib_lvgl.lib.lv_draw_mask_map_init(  # NOQA
        param,
        coords,
        map
    )
    return _get_py_obj(res, 'None')


def draw_mask_polygon_init(
    param: "draw_mask_polygon_param_t",
    points: "point_t",
    point_cnt: "uint16_t"
) -> None:

    param = _get_c_obj(param, 'draw_mask_polygon_param_t')
    points = _get_c_obj(points, 'point_t')
    point_cnt = _get_c_obj(point_cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_draw_mask_polygon_init(  # NOQA
        param,
        points,
        point_cnt
    )
    return _get_py_obj(res, 'None')


def draw_transform(
    draw_ctx: _draw_ctx_t,
    dest_area: "area_t",
    src_buf: None,
    src_w: "coord_t",
    src_h: "coord_t",
    src_stride: "coord_t",
    draw_dsc: "draw_img_dsc_t",
    sup: "draw_img_sup_t",
    cf: "color_format_t",
    cbuf: "color_t",
    abuf: "opa_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    dest_area = _get_c_obj(dest_area, 'area_t')
    src_buf = _get_c_obj(src_buf, 'None')
    src_w = _get_c_obj(src_w, 'coord_t')
    src_h = _get_c_obj(src_h, 'coord_t')
    src_stride = _get_c_obj(src_stride, 'coord_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_img_dsc_t')
    sup = _get_c_obj(sup, 'draw_img_sup_t')
    cf = _get_c_obj(cf, 'color_format_t')
    cbuf = _get_c_obj(cbuf, 'color_t')
    abuf = _get_c_obj(abuf, 'opa_t')
    res = _lib_lvgl.lib.lv_draw_transform(  # NOQA
        draw_ctx,
        dest_area,
        src_buf,
        src_w,
        src_h,
        src_stride,
        draw_dsc,
        sup,
        cf,
        cbuf,
        abuf
    )
    return _get_py_obj(res, 'None')


def draw_layer_create(
    draw_ctx: _draw_ctx_t,
    layer_area: "area_t",
    flags: "draw_layer_flags_t"
) -> _draw_layer_ctx_t:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    layer_area = _get_c_obj(layer_area, 'area_t')
    flags = _get_c_obj(flags, 'draw_layer_flags_t')
    res = _lib_lvgl.lib.lv_draw_layer_create(  # NOQA
        draw_ctx,
        layer_area,
        flags
    )
    return _get_py_obj(res, '_draw_layer_ctx_t')


def draw_layer_adjust(
    draw_ctx: _draw_ctx_t,
    layer_ctx: _draw_layer_ctx_t,
    flags: "draw_layer_flags_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    layer_ctx = _get_c_obj(layer_ctx, '_draw_layer_ctx_t')
    flags = _get_c_obj(flags, 'draw_layer_flags_t')
    res = _lib_lvgl.lib.lv_draw_layer_adjust(  # NOQA
        draw_ctx,
        layer_ctx,
        flags
    )
    return _get_py_obj(res, 'None')


def draw_layer_blend(
    draw_ctx: _draw_ctx_t,
    layer_ctx: _draw_layer_ctx_t,
    draw_dsc: "draw_img_dsc_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    layer_ctx = _get_c_obj(layer_ctx, '_draw_layer_ctx_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_img_dsc_t')
    res = _lib_lvgl.lib.lv_draw_layer_blend(  # NOQA
        draw_ctx,
        layer_ctx,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def draw_layer_destroy(
    draw_ctx: _draw_ctx_t,
    layer_ctx: _draw_layer_ctx_t
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, '_draw_ctx_t')
    layer_ctx = _get_c_obj(layer_ctx, '_draw_layer_ctx_t')
    res = _lib_lvgl.lib.lv_draw_layer_destroy(  # NOQA
        draw_ctx,
        layer_ctx
    )
    return _get_py_obj(res, 'None')


def draw_init() -> None:

    res = _lib_lvgl.lib.lv_draw_init()  # NOQA
    return _get_py_obj(res, 'None')


def draw_wait_for_finish(
    draw_ctx: "draw_ctx_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, 'draw_ctx_t')
    res = _lib_lvgl.lib.lv_draw_wait_for_finish(  # NOQA
        draw_ctx
    )
    return _get_py_obj(res, 'None')


def obj_init_draw_rect_dsc(
    obj: _obj_t,
    part: "uint32_t",
    draw_dsc: "draw_rect_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_rect_dsc_t')
    res = _lib_lvgl.lib.lv_obj_init_draw_rect_dsc(  # NOQA
        obj,
        part,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def obj_init_draw_label_dsc(
    obj: _obj_t,
    part: "uint32_t",
    draw_dsc: "draw_label_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_label_dsc_t')
    res = _lib_lvgl.lib.lv_obj_init_draw_label_dsc(  # NOQA
        obj,
        part,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def obj_init_draw_img_dsc(
    obj: _obj_t,
    part: "uint32_t",
    draw_dsc: "draw_img_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_img_dsc_t')
    res = _lib_lvgl.lib.lv_obj_init_draw_img_dsc(  # NOQA
        obj,
        part,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def obj_init_draw_line_dsc(
    obj: _obj_t,
    part: "uint32_t",
    draw_dsc: "draw_line_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_line_dsc_t')
    res = _lib_lvgl.lib.lv_obj_init_draw_line_dsc(  # NOQA
        obj,
        part,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def obj_init_draw_arc_dsc(
    obj: _obj_t,
    part: "uint32_t",
    draw_dsc: "draw_arc_dsc_t"
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_arc_dsc_t')
    res = _lib_lvgl.lib.lv_obj_init_draw_arc_dsc(  # NOQA
        obj,
        part,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def obj_calculate_ext_draw_size(
    obj: _obj_t,
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_calculate_ext_draw_size(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_draw_dsc_init(
    dsc: "obj_draw_part_dsc_t",
    draw_ctx: "draw_ctx_t"
) -> None:

    dsc = _get_c_obj(dsc, 'obj_draw_part_dsc_t')
    draw_ctx = _get_c_obj(draw_ctx, 'draw_ctx_t')
    res = _lib_lvgl.lib.lv_obj_draw_dsc_init(  # NOQA
        dsc,
        draw_ctx
    )
    return _get_py_obj(res, 'None')


def obj_draw_part_check_type(
    dsc: "obj_draw_part_dsc_t",
    class_p: _obj_class_t,
    type: "uint32_t"
) -> "bool":

    dsc = _get_c_obj(dsc, 'obj_draw_part_dsc_t')
    class_p = _get_c_obj(class_p, '_obj_class_t')
    type = _get_c_obj(type, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_draw_part_check_type(  # NOQA
        dsc,
        class_p,
        type
    )
    return _get_py_obj(res, 'bool')


def obj_refresh_ext_draw_size(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_refresh_ext_draw_size(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def _obj_get_ext_draw_size(
    obj: _obj_t
) -> "coord_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib._lv_obj_get_ext_draw_size(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def _obj_get_layer_type(
    obj: _obj_t
) -> "layer_type_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib._lv_obj_get_layer_type(  # NOQA
        obj
    )
    return _get_py_obj(res, 'layer_type_t')


def obj_class_create_obj(
    class_p: _obj_class_t,
    parent: _obj_t
) -> _obj_t:

    class_p = _get_c_obj(class_p, '_obj_class_t')
    parent = _get_c_obj(parent, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_class_create_obj(  # NOQA
        class_p,
        parent
    )
    return _get_py_obj(res, '_obj_t')


def obj_class_init_obj(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_class_init_obj(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def _obj_destruct(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib._lv_obj_destruct(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_is_editable(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_is_editable(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def obj_is_group_def(
    obj: _obj_t
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_is_group_def(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def _ll_init(
    ll_p: "ll_t",
    node_size: "uint32_t"
) -> None:

    ll_p = _get_c_obj(ll_p, 'll_t')
    node_size = _get_c_obj(node_size, 'uint32_t')
    res = _lib_lvgl.lib._lv_ll_init(  # NOQA
        ll_p,
        node_size
    )
    return _get_py_obj(res, 'None')


def _ll_ins_head(
    ll_p: "ll_t"
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_ins_head(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'void')


def _ll_ins_prev(
    ll_p: "ll_t",
    n_act: None
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    n_act = _get_c_obj(n_act, 'None')
    res = _lib_lvgl.lib._lv_ll_ins_prev(  # NOQA
        ll_p,
        n_act
    )
    return _get_py_obj(res, 'void')


def _ll_ins_tail(
    ll_p: "ll_t"
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_ins_tail(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'void')


def _ll_remove(
    ll_p: "ll_t",
    node_p: None
) -> None:

    ll_p = _get_c_obj(ll_p, 'll_t')
    node_p = _get_c_obj(node_p, 'None')
    res = _lib_lvgl.lib._lv_ll_remove(  # NOQA
        ll_p,
        node_p
    )
    return _get_py_obj(res, 'None')


def _ll_clear(
    ll_p: "ll_t"
) -> None:

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_clear(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'None')


def _ll_chg_list(
    ll_ori_p: "ll_t",
    ll_new_p: "ll_t",
    node: None,
    head: "bool"
) -> None:

    ll_ori_p = _get_c_obj(ll_ori_p, 'll_t')
    ll_new_p = _get_c_obj(ll_new_p, 'll_t')
    node = _get_c_obj(node, 'None')
    head = _get_c_obj(head, 'bool')
    res = _lib_lvgl.lib._lv_ll_chg_list(  # NOQA
        ll_ori_p,
        ll_new_p,
        node,
        head
    )
    return _get_py_obj(res, 'None')


def _ll_get_head(
    ll_p: "ll_t"
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_get_head(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'void')


def _ll_get_tail(
    ll_p: "ll_t"
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_get_tail(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'void')


def _ll_get_next(
    ll_p: "ll_t",
    n_act: None
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    n_act = _get_c_obj(n_act, 'None')
    res = _lib_lvgl.lib._lv_ll_get_next(  # NOQA
        ll_p,
        n_act
    )
    return _get_py_obj(res, 'void')


def _ll_get_prev(
    ll_p: "ll_t",
    n_act: None
) -> Any:

    ll_p = _get_c_obj(ll_p, 'll_t')
    n_act = _get_c_obj(n_act, 'None')
    res = _lib_lvgl.lib._lv_ll_get_prev(  # NOQA
        ll_p,
        n_act
    )
    return _get_py_obj(res, 'void')


def _ll_get_len(
    ll_p: "ll_t"
) -> "uint32_t":

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_get_len(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'uint32_t')


def _ll_move_before(
    ll_p: "ll_t",
    n_act: None,
    n_after: None
) -> None:

    ll_p = _get_c_obj(ll_p, 'll_t')
    n_act = _get_c_obj(n_act, 'None')
    n_after = _get_c_obj(n_after, 'None')
    res = _lib_lvgl.lib._lv_ll_move_before(  # NOQA
        ll_p,
        n_act,
        n_after
    )
    return _get_py_obj(res, 'None')


def _ll_is_empty(
    ll_p: "ll_t"
) -> "bool":

    ll_p = _get_c_obj(ll_p, 'll_t')
    res = _lib_lvgl.lib._lv_ll_is_empty(  # NOQA
        ll_p
    )
    return _get_py_obj(res, 'bool')


def _group_init() -> None:

    res = _lib_lvgl.lib._lv_group_init()  # NOQA
    return _get_py_obj(res, 'None')


def group_create() -> "group_t":

    res = _lib_lvgl.lib.lv_group_create()  # NOQA
    return _get_py_obj(res, 'group_t')


def group_del(
    group: "group_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_del(  # NOQA
        group
    )
    return _get_py_obj(res, 'None')


def group_set_default(
    group: "group_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_set_default(  # NOQA
        group
    )
    return _get_py_obj(res, 'None')


def group_get_default() -> "group_t":

    res = _lib_lvgl.lib.lv_group_get_default()  # NOQA
    return _get_py_obj(res, 'group_t')


def group_add_obj(
    group: "group_t",
    obj: _obj_t
) -> None:

    group = _get_c_obj(group, 'group_t')
    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_group_add_obj(  # NOQA
        group,
        obj
    )
    return _get_py_obj(res, 'None')


def group_swap_obj(
    obj1: _obj_t,
    obj2: _obj_t
) -> None:

    obj1 = _get_c_obj(obj1, '_obj_t')
    obj2 = _get_c_obj(obj2, '_obj_t')
    res = _lib_lvgl.lib.lv_group_swap_obj(  # NOQA
        obj1,
        obj2
    )
    return _get_py_obj(res, 'None')


def group_remove_obj(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_group_remove_obj(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def group_remove_all_objs(
    group: "group_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_remove_all_objs(  # NOQA
        group
    )
    return _get_py_obj(res, 'None')


def group_focus_obj(
    obj: _obj_t
) -> None:

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_group_focus_obj(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def group_focus_next(
    group: "group_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_focus_next(  # NOQA
        group
    )
    return _get_py_obj(res, 'None')


def group_focus_prev(
    group: "group_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_focus_prev(  # NOQA
        group
    )
    return _get_py_obj(res, 'None')


def group_focus_freeze(
    group: "group_t",
    en: "bool"
) -> None:

    group = _get_c_obj(group, 'group_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_group_focus_freeze(  # NOQA
        group,
        en
    )
    return _get_py_obj(res, 'None')


def group_send_data(
    group: "group_t",
    c: "uint32_t"
) -> "res_t":

    group = _get_c_obj(group, 'group_t')
    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib.lv_group_send_data(  # NOQA
        group,
        c
    )
    return _get_py_obj(res, 'res_t')


def group_set_focus_cb(
    group: "group_t",
    focus_cb: "group_focus_cb_t"
) -> None:
    try:
        _ = group.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = group.__dict__['__cb_store__']    
    cb_store['group_focus_cb_t'] = focus_cb

    focus_cb = getattr(_lib_lvgl.lib, 'py_lv_group_focus_cb_t')
    cb_store['group_focus_cb_t.c_func'] = focus_cb


    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_set_focus_cb(  # NOQA
        group,
        focus_cb
    )
    return _get_py_obj(res, 'None')


def group_set_edge_cb(
    group: "group_t",
    edge_cb: "group_edge_cb_t"
) -> None:
    try:
        _ = group.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = group.__dict__['__cb_store__']    
    cb_store['group_edge_cb_t'] = edge_cb

    edge_cb = getattr(_lib_lvgl.lib, 'py_lv_group_edge_cb_t')
    cb_store['group_edge_cb_t.c_func'] = edge_cb


    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_set_edge_cb(  # NOQA
        group,
        edge_cb
    )
    return _get_py_obj(res, 'None')


def group_set_refocus_policy(
    group: "group_t",
    policy: "group_refocus_policy_t"
) -> None:

    group = _get_c_obj(group, 'group_t')
    policy = _get_c_obj(policy, 'group_refocus_policy_t')
    res = _lib_lvgl.lib.lv_group_set_refocus_policy(  # NOQA
        group,
        policy
    )
    return _get_py_obj(res, 'None')


def group_set_editing(
    group: "group_t",
    edit: "bool"
) -> None:

    group = _get_c_obj(group, 'group_t')
    edit = _get_c_obj(edit, 'bool')
    res = _lib_lvgl.lib.lv_group_set_editing(  # NOQA
        group,
        edit
    )
    return _get_py_obj(res, 'None')


def group_set_wrap(
    group: "group_t",
    en: "bool"
) -> None:

    group = _get_c_obj(group, 'group_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_group_set_wrap(  # NOQA
        group,
        en
    )
    return _get_py_obj(res, 'None')


def group_get_focused(
    group: "group_t"
) -> _obj_t:

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_focused(  # NOQA
        group
    )
    return _get_py_obj(res, '_obj_t')


def group_get_focus_cb(
    group: "group_t"
) -> "group_focus_cb_t":

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_focus_cb(  # NOQA
        group
    )
    return _get_py_obj(res, 'group_focus_cb_t')


def group_get_edge_cb(
    group: "group_t"
) -> "group_edge_cb_t":

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_edge_cb(  # NOQA
        group
    )
    return _get_py_obj(res, 'group_edge_cb_t')


def group_get_editing(
    group: "group_t"
) -> "bool":

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_editing(  # NOQA
        group
    )
    return _get_py_obj(res, 'bool')


def group_get_wrap(
    group: "group_t"
) -> "bool":

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_wrap(  # NOQA
        group
    )
    return _get_py_obj(res, 'bool')


def group_get_obj_count(
    group: "group_t"
) -> "uint32_t":

    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_group_get_obj_count(  # NOQA
        group
    )
    return _get_py_obj(res, 'uint32_t')


def indev_create() -> "indev_t":

    res = _lib_lvgl.lib.lv_indev_create()  # NOQA
    return _get_py_obj(res, 'indev_t')


def indev_delete(
    indev: "indev_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_delete(  # NOQA
        indev
    )
    return _get_py_obj(res, 'None')


def indev_get_next(
    indev: "indev_t"
) -> "indev_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_next(  # NOQA
        indev
    )
    return _get_py_obj(res, 'indev_t')


def _indev_read(
    indev: "indev_t",
    data: "indev_data_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    data = _get_c_obj(data, 'indev_data_t')
    res = _lib_lvgl.lib._lv_indev_read(  # NOQA
        indev,
        data
    )
    return _get_py_obj(res, 'None')


def indev_read_timer_cb(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib.lv_indev_read_timer_cb(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def indev_enable(
    indev: "indev_t",
    en: "bool"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_indev_enable(  # NOQA
        indev,
        en
    )
    return _get_py_obj(res, 'None')


def indev_get_act() -> "indev_t":

    res = _lib_lvgl.lib.lv_indev_get_act()  # NOQA
    return _get_py_obj(res, 'indev_t')


def indev_set_type(
    indev: "indev_t",
    indev_type: "indev_type_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    indev_type = _get_c_obj(indev_type, 'indev_type_t')
    res = _lib_lvgl.lib.lv_indev_set_type(  # NOQA
        indev,
        indev_type
    )
    return _get_py_obj(res, 'None')


def indev_set_read_cb(
    indev: "indev_t",
    read_cb: "indev_read_cb_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'indev_read_cb_t.lv_indev_set_read_cb' in cb_store:
        store = cb_store['indev_read_cb_t.lv_indev_set_read_cb']
        if read_cb in store:
            del store[read_cb]
    else:
        store = _CBStore()
        cb_store['indev_read_cb_t.lv_indev_set_read_cb'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_indev_read_cb_t')
    store[read_cb] = cb_store_handle
    store['indev_read_cb_t'] = read_cb
    store['indev_read_cb_t.c_func'] = c_func

    cb_store['indev_read_cb_t.lv_indev_set_read_cb'] = store
    read_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_set_read_cb(  # NOQA
        indev,
        read_cb,
        user_data
    )
    return _get_py_obj(res, 'None')


def indev_set_user_data(
    indev: "indev_t",
    user_data: Any
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_set_user_data(  # NOQA
        indev,
        user_data
    )
    return _get_py_obj(res, 'None')


def indev_set_driver_data(
    indev: "indev_t",
    driver_data: None
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    driver_data = _get_c_obj(driver_data, 'None')
    res = _lib_lvgl.lib.lv_indev_set_driver_data(  # NOQA
        indev,
        driver_data
    )
    return _get_py_obj(res, 'None')


def indev_get_type(
    indev: "indev_t"
) -> "indev_type_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_type(  # NOQA
        indev
    )
    return _get_py_obj(res, 'indev_type_t')


def indev_get_state(
    indev: "indev_t"
) -> "indev_state_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_state(  # NOQA
        indev
    )
    return _get_py_obj(res, 'indev_state_t')


def indev_get_group(
    indev: "indev_t"
) -> "group_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_group(  # NOQA
        indev
    )
    return _get_py_obj(res, 'group_t')


def indev_get_disp(
    indev: "indev_t"
) -> _disp_t:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_disp(  # NOQA
        indev
    )
    return _get_py_obj(res, '_disp_t')


def indev_set_disp(
    indev: "indev_t",
    disp: _disp_t
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    disp = _get_c_obj(disp, '_disp_t')
    res = _lib_lvgl.lib.lv_indev_set_disp(  # NOQA
        indev,
        disp
    )
    return _get_py_obj(res, 'None')


def indev_get_user_data(
    indev: "indev_t"
) -> Any:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_user_data(  # NOQA
        indev
    )
    return _get_py_obj(res, 'void')


def indev_get_driver_data(
    indev: "indev_t"
) -> Any:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_driver_data(  # NOQA
        indev
    )
    return _get_py_obj(res, 'void')


def indev_reset(
    indev: "indev_t",
    obj: _obj_t
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_indev_reset(  # NOQA
        indev,
        obj
    )
    return _get_py_obj(res, 'None')


def indev_reset_long_press(
    indev: "indev_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_reset_long_press(  # NOQA
        indev
    )
    return _get_py_obj(res, 'None')


def indev_set_cursor(
    indev: "indev_t",
    cur_obj: _obj_t
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    cur_obj = _get_c_obj(cur_obj, '_obj_t')
    res = _lib_lvgl.lib.lv_indev_set_cursor(  # NOQA
        indev,
        cur_obj
    )
    return _get_py_obj(res, 'None')


def indev_set_group(
    indev: "indev_t",
    group: "group_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    group = _get_c_obj(group, 'group_t')
    res = _lib_lvgl.lib.lv_indev_set_group(  # NOQA
        indev,
        group
    )
    return _get_py_obj(res, 'None')


def indev_set_button_points(
    indev: "indev_t",
    points: List["point_t"]
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    points = _get_c_obj(points, 'List[point_t]')
    res = _lib_lvgl.lib.lv_indev_set_button_points(  # NOQA
        indev,
        points
    )
    return _get_py_obj(res, 'None')


def indev_get_point(
    indev: "indev_t",
    point: "point_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    point = _get_c_obj(point, 'point_t')
    res = _lib_lvgl.lib.lv_indev_get_point(  # NOQA
        indev,
        point
    )
    return _get_py_obj(res, 'None')


def indev_get_gesture_dir(
    indev: "indev_t"
) -> "dir_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_gesture_dir(  # NOQA
        indev
    )
    return _get_py_obj(res, 'dir_t')


def indev_get_key(
    indev: "indev_t"
) -> "uint32_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_key(  # NOQA
        indev
    )
    return _get_py_obj(res, 'uint32_t')


def indev_get_scroll_dir(
    indev: "indev_t"
) -> "dir_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_scroll_dir(  # NOQA
        indev
    )
    return _get_py_obj(res, 'dir_t')


def indev_get_scroll_obj(
    indev: "indev_t"
) -> _obj_t:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_scroll_obj(  # NOQA
        indev
    )
    return _get_py_obj(res, '_obj_t')


def indev_get_vect(
    indev: "indev_t",
    point: "point_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    point = _get_c_obj(point, 'point_t')
    res = _lib_lvgl.lib.lv_indev_get_vect(  # NOQA
        indev,
        point
    )
    return _get_py_obj(res, 'None')


def indev_wait_release(
    indev: "indev_t"
) -> None:

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_wait_release(  # NOQA
        indev
    )
    return _get_py_obj(res, 'None')


def indev_get_obj_act() -> _obj_t:

    res = _lib_lvgl.lib.lv_indev_get_obj_act()  # NOQA
    return _get_py_obj(res, '_obj_t')


def indev_get_read_timer(
    indev: "indev_t"
) -> "timer_t":

    indev = _get_c_obj(indev, 'indev_t')
    res = _lib_lvgl.lib.lv_indev_get_read_timer(  # NOQA
        indev
    )
    return _get_py_obj(res, 'timer_t')


def indev_search_obj(
    obj: _obj_t,
    point: "point_t"
) -> _obj_t:

    obj = _get_c_obj(obj, '_obj_t')
    point = _get_c_obj(point, 'point_t')
    res = _lib_lvgl.lib.lv_indev_search_obj(  # NOQA
        obj,
        point
    )
    return _get_py_obj(res, '_obj_t')


def obj_send_event(
    obj: _obj_t,
    event_code: "event_code_t",
    param: None
) -> "res_t":

    obj = _get_c_obj(obj, '_obj_t')
    event_code = _get_c_obj(event_code, 'event_code_t')
    param = _get_c_obj(param, 'None')
    res = _lib_lvgl.lib.lv_obj_send_event(  # NOQA
        obj,
        event_code,
        param
    )
    return _get_py_obj(res, 'res_t')


def obj_event_base(
    class_p: "obj_class_t",
    e: "event_t"
) -> "res_t":

    class_p = _get_c_obj(class_p, 'obj_class_t')
    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_obj_event_base(  # NOQA
        class_p,
        e
    )
    return _get_py_obj(res, 'res_t')


def event_get_current_target_obj(
    e: "event_t"
) -> _obj_t:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_current_target_obj(  # NOQA
        e
    )
    return _get_py_obj(res, '_obj_t')


def event_get_target_obj(
    e: "event_t"
) -> _obj_t:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_target_obj(  # NOQA
        e
    )
    return _get_py_obj(res, '_obj_t')


def obj_add_event(
    obj: _obj_t,
    event_cb: "event_cb_t",
    filter: "event_code_t",
    user_data: Any
) -> None:
    cb_store = _global_cb_store
    if 'event_cb_t.lv_obj_add_event' in cb_store:
        store = cb_store['event_cb_t.lv_obj_add_event']
        if event_cb in store:
            del store[event_cb]
    else:
        store = _CBStore()
        cb_store['event_cb_t.lv_obj_add_event'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_event_cb_t')
    store[event_cb] = cb_store_handle
    store['event_cb_t'] = event_cb
    store['event_cb_t.c_func'] = c_func

    cb_store['event_cb_t.lv_obj_add_event'] = store
    event_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    obj = _get_c_obj(obj, '_obj_t')
    filter = _get_c_obj(filter, 'event_code_t')
    res = _lib_lvgl.lib.lv_obj_add_event(  # NOQA
        obj,
        event_cb,
        filter,
        user_data
    )
    return _get_py_obj(res, 'None')


def obj_get_event_count(
    obj: _obj_t
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_event_count(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def obj_get_event_dsc(
    obj: _obj_t,
    index: "uint32_t"
) -> "event_dsc_t":

    obj = _get_c_obj(obj, '_obj_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_event_dsc(  # NOQA
        obj,
        index
    )
    return _get_py_obj(res, 'event_dsc_t')


def obj_remove_event(
    obj: _obj_t,
    index: "uint32_t"
) -> "bool":

    obj = _get_c_obj(obj, '_obj_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_remove_event(  # NOQA
        obj,
        index
    )
    return _get_py_obj(res, 'bool')


def event_get_indev(
    e: "event_t"
) -> "indev_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_indev(  # NOQA
        e
    )
    return _get_py_obj(res, 'indev_t')


def event_get_draw_part_dsc(
    e: "event_t"
) -> "obj_draw_part_dsc_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_draw_part_dsc(  # NOQA
        e
    )
    return _get_py_obj(res, 'obj_draw_part_dsc_t')


def event_get_draw_ctx(
    e: "event_t"
) -> "draw_ctx_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_draw_ctx(  # NOQA
        e
    )
    return _get_py_obj(res, 'draw_ctx_t')


def event_get_old_size(
    e: "event_t"
) -> "area_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_old_size(  # NOQA
        e
    )
    return _get_py_obj(res, 'area_t')


def event_get_key(
    e: "event_t"
) -> "uint32_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_key(  # NOQA
        e
    )
    return _get_py_obj(res, 'uint32_t')


def event_get_scroll_anim(
    e: "event_t"
) -> "anim_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_scroll_anim(  # NOQA
        e
    )
    return _get_py_obj(res, 'anim_t')


def event_set_ext_draw_size(
    e: "event_t",
    size: "coord_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    size = _get_c_obj(size, 'coord_t')
    res = _lib_lvgl.lib.lv_event_set_ext_draw_size(  # NOQA
        e,
        size
    )
    return _get_py_obj(res, 'None')


def event_get_self_size_info(
    e: "event_t"
) -> "point_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_self_size_info(  # NOQA
        e
    )
    return _get_py_obj(res, 'point_t')


def event_get_hit_test_info(
    e: "event_t"
) -> "hit_test_info_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_hit_test_info(  # NOQA
        e
    )
    return _get_py_obj(res, 'hit_test_info_t')


def event_get_cover_area(
    e: "event_t"
) -> "area_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_cover_area(  # NOQA
        e
    )
    return _get_py_obj(res, 'area_t')


def event_set_cover_res(
    e: "event_t",
    res: "cover_res_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _get_c_obj(res, 'cover_res_t')
    res = _lib_lvgl.lib.lv_event_set_cover_res(  # NOQA
        e,
        res
    )
    return _get_py_obj(res, 'None')


def init() -> None:

    res = _lib_lvgl.lib.lv_init()  # NOQA
    return _get_py_obj(res, 'None')


def deinit() -> None:

    res = _lib_lvgl.lib.lv_deinit()  # NOQA
    return _get_py_obj(res, 'None')


def is_initialized() -> "bool":

    res = _lib_lvgl.lib.lv_is_initialized()  # NOQA
    return _get_py_obj(res, 'bool')


def obj_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def obj_add_flag(
    obj: "obj_t",
    f: "obj_flag_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    f = _get_c_obj(f, 'obj_flag_t')
    res = _lib_lvgl.lib.lv_obj_add_flag(  # NOQA
        obj,
        f
    )
    return _get_py_obj(res, 'None')


def obj_clear_flag(
    obj: "obj_t",
    f: "obj_flag_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    f = _get_c_obj(f, 'obj_flag_t')
    res = _lib_lvgl.lib.lv_obj_clear_flag(  # NOQA
        obj,
        f
    )
    return _get_py_obj(res, 'None')


def obj_add_state(
    obj: "obj_t",
    state: "state_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    state = _get_c_obj(state, 'state_t')
    res = _lib_lvgl.lib.lv_obj_add_state(  # NOQA
        obj,
        state
    )
    return _get_py_obj(res, 'None')


def obj_clear_state(
    obj: "obj_t",
    state: "state_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    state = _get_c_obj(state, 'state_t')
    res = _lib_lvgl.lib.lv_obj_clear_state(  # NOQA
        obj,
        state
    )
    return _get_py_obj(res, 'None')


def obj_set_user_data(
    obj: "obj_t",
    user_data: Any
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_set_user_data(  # NOQA
        obj,
        user_data
    )
    return _get_py_obj(res, 'None')


def obj_has_flag(
    obj: "obj_t",
    f: "obj_flag_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    f = _get_c_obj(f, 'obj_flag_t')
    res = _lib_lvgl.lib.lv_obj_has_flag(  # NOQA
        obj,
        f
    )
    return _get_py_obj(res, 'bool')


def obj_has_flag_any(
    obj: "obj_t",
    f: "obj_flag_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    f = _get_c_obj(f, 'obj_flag_t')
    res = _lib_lvgl.lib.lv_obj_has_flag_any(  # NOQA
        obj,
        f
    )
    return _get_py_obj(res, 'bool')


def obj_get_state(
    obj: "obj_t"
) -> "state_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_get_state(  # NOQA
        obj
    )
    return _get_py_obj(res, 'state_t')


def obj_has_state(
    obj: "obj_t",
    state: "state_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    state = _get_c_obj(state, 'state_t')
    res = _lib_lvgl.lib.lv_obj_has_state(  # NOQA
        obj,
        state
    )
    return _get_py_obj(res, 'bool')


def obj_get_group(
    obj: "obj_t"
) -> "group_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_get_group(  # NOQA
        obj
    )
    return _get_py_obj(res, 'group_t')


def obj_get_user_data(
    obj: "obj_t"
) -> Any:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_get_user_data(  # NOQA
        obj
    )
    return _get_py_obj(res, 'void')


def obj_allocate_spec_attr(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_allocate_spec_attr(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_check_type(
    obj: "obj_t",
    class_p: "obj_class_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    class_p = _get_c_obj(class_p, 'obj_class_t')
    res = _lib_lvgl.lib.lv_obj_check_type(  # NOQA
        obj,
        class_p
    )
    return _get_py_obj(res, 'bool')


def obj_has_class(
    obj: "obj_t",
    class_p: "obj_class_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    class_p = _get_c_obj(class_p, 'obj_class_t')
    res = _lib_lvgl.lib.lv_obj_has_class(  # NOQA
        obj,
        class_p
    )
    return _get_py_obj(res, 'bool')


def obj_get_class(
    obj: "obj_t"
) -> "obj_class_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_get_class(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_class_t')


def obj_is_valid(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_is_valid(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def _refr_init() -> None:

    res = _lib_lvgl.lib._lv_refr_init()  # NOQA
    return _get_py_obj(res, 'None')


def refr_now(
    disp: "disp_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_refr_now(  # NOQA
        disp
    )
    return _get_py_obj(res, 'None')


def obj_redraw(
    draw_ctx: "draw_ctx_t",
    obj: "obj_t"
) -> None:

    draw_ctx = _get_c_obj(draw_ctx, 'draw_ctx_t')
    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_redraw(  # NOQA
        draw_ctx,
        obj
    )
    return _get_py_obj(res, 'None')


def _inv_area(
    disp: "disp_t",
    area_p: "area_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    area_p = _get_c_obj(area_p, 'area_t')
    res = _lib_lvgl.lib._lv_inv_area(  # NOQA
        disp,
        area_p
    )
    return _get_py_obj(res, 'None')


def _refr_get_disp_refreshing() -> "disp_t":

    res = _lib_lvgl.lib._lv_refr_get_disp_refreshing()  # NOQA
    return _get_py_obj(res, 'disp_t')


def _disp_refr_timer(
    timer: "timer_t"
) -> None:

    timer = _get_c_obj(timer, 'timer_t')
    res = _lib_lvgl.lib._lv_disp_refr_timer(  # NOQA
        timer
    )
    return _get_py_obj(res, 'None')


def theme_get_from_obj(
    obj: "obj_t"
) -> "theme_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_from_obj(  # NOQA
        obj
    )
    return _get_py_obj(res, 'theme_t')


def theme_apply(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_apply(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def theme_set_parent(
    new_theme: "theme_t",
    parent: "theme_t"
) -> None:

    new_theme = _get_c_obj(new_theme, 'theme_t')
    parent = _get_c_obj(parent, 'theme_t')
    res = _lib_lvgl.lib.lv_theme_set_parent(  # NOQA
        new_theme,
        parent
    )
    return _get_py_obj(res, 'None')


def theme_set_apply_cb(
    theme: "theme_t",
    apply_cb: "theme_apply_cb_t"
) -> None:
    try:
        _ = theme.user_data
    except:  # NOQA
        raise RuntimeError(
            'no user_data field available in the first parameter'
        )

    cb_store = theme.__dict__['__cb_store__']    
    cb_store['theme_apply_cb_t'] = apply_cb

    apply_cb = getattr(_lib_lvgl.lib, 'py_lv_theme_apply_cb_t')
    cb_store['theme_apply_cb_t.c_func'] = apply_cb


    theme = _get_c_obj(theme, 'theme_t')
    res = _lib_lvgl.lib.lv_theme_set_apply_cb(  # NOQA
        theme,
        apply_cb
    )
    return _get_py_obj(res, 'None')


def theme_get_font_small(
    obj: "obj_t"
) -> "font_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_font_small(  # NOQA
        obj
    )
    return _get_py_obj(res, 'font_t')


def theme_get_font_normal(
    obj: "obj_t"
) -> "font_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_font_normal(  # NOQA
        obj
    )
    return _get_py_obj(res, 'font_t')


def theme_get_font_large(
    obj: "obj_t"
) -> "font_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_font_large(  # NOQA
        obj
    )
    return _get_py_obj(res, 'font_t')


def theme_get_color_primary(
    obj: "obj_t"
) -> "color_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_color_primary(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color_t')


def theme_get_color_secondary(
    obj: "obj_t"
) -> "color_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_theme_get_color_secondary(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color_t')


def font_load(
    fontName: "char"
) -> "font_t":

    fontName = _get_c_obj(fontName, 'char')
    res = _lib_lvgl.lib.lv_font_load(  # NOQA
        fontName
    )
    return _get_py_obj(res, 'font_t')


def font_free(
    font: "font_t"
) -> None:

    font = _get_c_obj(font, 'font_t')
    res = _lib_lvgl.lib.lv_font_free(  # NOQA
        font
    )
    return _get_py_obj(res, 'None')


def font_get_bitmap_fmt_txt(
    font: "font_t",
    letter: "uint32_t"
) -> "uint8_t":

    font = _get_c_obj(font, 'font_t')
    letter = _get_c_obj(letter, 'uint32_t')
    res = _lib_lvgl.lib.lv_font_get_bitmap_fmt_txt(  # NOQA
        font,
        letter
    )
    return _get_py_obj(res, 'uint8_t')


def font_get_glyph_dsc_fmt_txt(
    font: "font_t",
    dsc_out: "font_glyph_dsc_t",
    unicode_letter: "uint32_t",
    unicode_letter_next: "uint32_t"
) -> "bool":

    font = _get_c_obj(font, 'font_t')
    dsc_out = _get_c_obj(dsc_out, 'font_glyph_dsc_t')
    unicode_letter = _get_c_obj(unicode_letter, 'uint32_t')
    unicode_letter_next = _get_c_obj(unicode_letter_next, 'uint32_t')
    res = _lib_lvgl.lib.lv_font_get_glyph_dsc_fmt_txt(  # NOQA
        font,
        dsc_out,
        unicode_letter,
        unicode_letter_next
    )
    return _get_py_obj(res, 'bool')


def _font_clean_up_fmt_txt() -> None:

    res = _lib_lvgl.lib._lv_font_clean_up_fmt_txt()  # NOQA
    return _get_py_obj(res, 'None')


def img_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_img_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def img_set_src(
    obj: "obj_t",
    src: None
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    src = _get_c_obj(src, 'None')
    res = _lib_lvgl.lib.lv_img_set_src(  # NOQA
        obj,
        src
    )
    return _get_py_obj(res, 'None')


def img_set_offset_x(
    obj: "obj_t",
    x: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    res = _lib_lvgl.lib.lv_img_set_offset_x(  # NOQA
        obj,
        x
    )
    return _get_py_obj(res, 'None')


def img_set_offset_y(
    obj: "obj_t",
    y: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_img_set_offset_y(  # NOQA
        obj,
        y
    )
    return _get_py_obj(res, 'None')


def img_set_angle(
    obj: "obj_t",
    angle: "int16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    angle = _get_c_obj(angle, 'int16_t')
    res = _lib_lvgl.lib.lv_img_set_angle(  # NOQA
        obj,
        angle
    )
    return _get_py_obj(res, 'None')


def img_set_pivot(
    obj: "obj_t",
    x: "coord_t",
    y: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    res = _lib_lvgl.lib.lv_img_set_pivot(  # NOQA
        obj,
        x,
        y
    )
    return _get_py_obj(res, 'None')


def img_set_zoom(
    obj: "obj_t",
    zoom: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    zoom = _get_c_obj(zoom, 'uint16_t')
    res = _lib_lvgl.lib.lv_img_set_zoom(  # NOQA
        obj,
        zoom
    )
    return _get_py_obj(res, 'None')


def img_set_antialias(
    obj: "obj_t",
    antialias: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    antialias = _get_c_obj(antialias, 'bool')
    res = _lib_lvgl.lib.lv_img_set_antialias(  # NOQA
        obj,
        antialias
    )
    return _get_py_obj(res, 'None')


def img_set_size_mode(
    obj: "obj_t",
    mode: "img_size_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'img_size_mode_t')
    res = _lib_lvgl.lib.lv_img_set_size_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def img_get_src(
    obj: "obj_t"
) -> Any:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_src(  # NOQA
        obj
    )
    return _get_py_obj(res, 'void')


def img_get_offset_x(
    obj: "obj_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_offset_x(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def img_get_offset_y(
    obj: "obj_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_offset_y(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def img_get_angle(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_angle(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def img_get_pivot(
    obj: "obj_t",
    pivot: "point_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    pivot = _get_c_obj(pivot, 'point_t')
    res = _lib_lvgl.lib.lv_img_get_pivot(  # NOQA
        obj,
        pivot
    )
    return _get_py_obj(res, 'None')


def img_get_zoom(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_zoom(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def img_get_antialias(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_antialias(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def img_get_size_mode(
    obj: "obj_t"
) -> "img_size_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_img_get_size_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'img_size_mode_t')


def animimg_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def animimg_set_src(
    img: "obj_t",
    dsc: List[None],
    num: "uint8_t"
) -> None:

    img = _get_c_obj(img, 'obj_t')
    dsc = _get_c_obj(dsc, 'List[None]')
    num = _get_c_obj(num, 'uint8_t')
    res = _lib_lvgl.lib.lv_animimg_set_src(  # NOQA
        img,
        dsc,
        num
    )
    return _get_py_obj(res, 'None')


def animimg_start(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_start(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def animimg_set_duration(
    img: "obj_t",
    duration: "uint32_t"
) -> None:

    img = _get_c_obj(img, 'obj_t')
    duration = _get_c_obj(duration, 'uint32_t')
    res = _lib_lvgl.lib.lv_animimg_set_duration(  # NOQA
        img,
        duration
    )
    return _get_py_obj(res, 'None')


def animimg_set_repeat_count(
    img: "obj_t",
    count: "uint16_t"
) -> None:

    img = _get_c_obj(img, 'obj_t')
    count = _get_c_obj(count, 'uint16_t')
    res = _lib_lvgl.lib.lv_animimg_set_repeat_count(  # NOQA
        img,
        count
    )
    return _get_py_obj(res, 'None')


def animimg_get_src(
    img: "obj_t"
) -> Any:

    img = _get_c_obj(img, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_get_src(  # NOQA
        img
    )
    return _get_py_obj(res, 'void')


def animimg_get_src_count(
    img: "obj_t"
) -> "uint8_t":

    img = _get_c_obj(img, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_get_src_count(  # NOQA
        img
    )
    return _get_py_obj(res, 'uint8_t')


def animimg_get_duration(
    img: "obj_t"
) -> "uint32_t":

    img = _get_c_obj(img, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_get_duration(  # NOQA
        img
    )
    return _get_py_obj(res, 'uint32_t')


def animimg_get_repeat_count(
    img: "obj_t"
) -> "uint16_t":

    img = _get_c_obj(img, 'obj_t')
    res = _lib_lvgl.lib.lv_animimg_get_repeat_count(  # NOQA
        img
    )
    return _get_py_obj(res, 'uint16_t')


def arc_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def arc_set_start_angle(
    obj: "obj_t",
    start: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    start = _get_c_obj(start, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_start_angle(  # NOQA
        obj,
        start
    )
    return _get_py_obj(res, 'None')


def arc_set_end_angle(
    obj: "obj_t",
    end: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    end = _get_c_obj(end, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_end_angle(  # NOQA
        obj,
        end
    )
    return _get_py_obj(res, 'None')


def arc_set_angles(
    obj: "obj_t",
    start: "uint16_t",
    end: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    start = _get_c_obj(start, 'uint16_t')
    end = _get_c_obj(end, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_angles(  # NOQA
        obj,
        start,
        end
    )
    return _get_py_obj(res, 'None')


def arc_set_bg_start_angle(
    obj: "obj_t",
    start: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    start = _get_c_obj(start, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_bg_start_angle(  # NOQA
        obj,
        start
    )
    return _get_py_obj(res, 'None')


def arc_set_bg_end_angle(
    obj: "obj_t",
    end: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    end = _get_c_obj(end, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_bg_end_angle(  # NOQA
        obj,
        end
    )
    return _get_py_obj(res, 'None')


def arc_set_bg_angles(
    obj: "obj_t",
    start: "uint16_t",
    end: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    start = _get_c_obj(start, 'uint16_t')
    end = _get_c_obj(end, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_bg_angles(  # NOQA
        obj,
        start,
        end
    )
    return _get_py_obj(res, 'None')


def arc_set_rotation(
    obj: "obj_t",
    rotation: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    rotation = _get_c_obj(rotation, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_rotation(  # NOQA
        obj,
        rotation
    )
    return _get_py_obj(res, 'None')


def arc_set_mode(
    obj: "obj_t",
    type: "arc_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    type = _get_c_obj(type, 'arc_mode_t')
    res = _lib_lvgl.lib.lv_arc_set_mode(  # NOQA
        obj,
        type
    )
    return _get_py_obj(res, 'None')


def arc_set_value(
    obj: "obj_t",
    value: "int16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'int16_t')
    res = _lib_lvgl.lib.lv_arc_set_value(  # NOQA
        obj,
        value
    )
    return _get_py_obj(res, 'None')


def arc_set_range(
    obj: "obj_t",
    min: "int16_t",
    max: "int16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    min = _get_c_obj(min, 'int16_t')
    max = _get_c_obj(max, 'int16_t')
    res = _lib_lvgl.lib.lv_arc_set_range(  # NOQA
        obj,
        min,
        max
    )
    return _get_py_obj(res, 'None')


def arc_set_change_rate(
    obj: "obj_t",
    rate: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    rate = _get_c_obj(rate, 'uint16_t')
    res = _lib_lvgl.lib.lv_arc_set_change_rate(  # NOQA
        obj,
        rate
    )
    return _get_py_obj(res, 'None')


def arc_set_knob_offset(
    arc: "obj_t",
    offset: "int16_t"
) -> None:

    arc = _get_c_obj(arc, 'obj_t')
    offset = _get_c_obj(offset, 'int16_t')
    res = _lib_lvgl.lib.lv_arc_set_knob_offset(  # NOQA
        arc,
        offset
    )
    return _get_py_obj(res, 'None')


def arc_get_angle_start(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_angle_start(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def arc_get_angle_end(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_angle_end(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def arc_get_bg_angle_start(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_bg_angle_start(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def arc_get_bg_angle_end(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_bg_angle_end(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def arc_get_value(
    obj: "obj_t"
) -> "int16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int16_t')


def arc_get_min_value(
    obj: "obj_t"
) -> "int16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_min_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int16_t')


def arc_get_max_value(
    obj: "obj_t"
) -> "int16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_max_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int16_t')


def arc_get_mode(
    obj: "obj_t"
) -> "arc_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'arc_mode_t')


def arc_get_rotation(
    obj: "obj_t"
) -> "int16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_rotation(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int16_t')


def arc_get_knob_offset(
    obj: "obj_t"
) -> "int16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_arc_get_knob_offset(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int16_t')


def arc_align_obj_to_angle(
    obj: "obj_t",
    obj_to_align: "obj_t",
    r_offset: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    obj_to_align = _get_c_obj(obj_to_align, 'obj_t')
    r_offset = _get_c_obj(r_offset, 'coord_t')
    res = _lib_lvgl.lib.lv_arc_align_obj_to_angle(  # NOQA
        obj,
        obj_to_align,
        r_offset
    )
    return _get_py_obj(res, 'None')


def arc_rotate_obj_to_angle(
    obj: "obj_t",
    obj_to_rotate: "obj_t",
    r_offset: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    obj_to_rotate = _get_c_obj(obj_to_rotate, 'obj_t')
    r_offset = _get_c_obj(r_offset, 'coord_t')
    res = _lib_lvgl.lib.lv_arc_rotate_obj_to_angle(  # NOQA
        obj,
        obj_to_rotate,
        r_offset
    )
    return _get_py_obj(res, 'None')


def label_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_label_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def label_set_text(
    obj: "obj_t",
    text: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    text = _get_c_obj(text, 'char')
    res = _lib_lvgl.lib.lv_label_set_text(  # NOQA
        obj,
        text
    )
    return _get_py_obj(res, 'None')


def label_set_text_fmt(
    obj: "obj_t",
    fmt: "char",
    *args
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    fmt = _get_c_obj(fmt, 'char')

    args = list(args)
    for i, arg in enumerate(args):
        args[i] = _get_c_obj(arg, None)
    
    res = _lib_lvgl.lib.lv_label_set_text_fmt(  # NOQA
        obj,
        fmt,
        *args
    )
    return _get_py_obj(res, 'None')


def label_set_text_static(
    obj: "obj_t",
    text: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    text = _get_c_obj(text, 'char')
    res = _lib_lvgl.lib.lv_label_set_text_static(  # NOQA
        obj,
        text
    )
    return _get_py_obj(res, 'None')


def label_set_long_mode(
    obj: "obj_t",
    long_mode: "label_long_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    long_mode = _get_c_obj(long_mode, 'label_long_mode_t')
    res = _lib_lvgl.lib.lv_label_set_long_mode(  # NOQA
        obj,
        long_mode
    )
    return _get_py_obj(res, 'None')


def label_set_recolor(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_label_set_recolor(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def label_set_text_selection_start(
    obj: "obj_t",
    index: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_label_set_text_selection_start(  # NOQA
        obj,
        index
    )
    return _get_py_obj(res, 'None')


def label_set_text_selection_end(
    obj: "obj_t",
    index: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    index = _get_c_obj(index, 'uint32_t')
    res = _lib_lvgl.lib.lv_label_set_text_selection_end(  # NOQA
        obj,
        index
    )
    return _get_py_obj(res, 'None')


def label_get_text(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_label_get_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def label_get_long_mode(
    obj: "obj_t"
) -> "label_long_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_label_get_long_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'label_long_mode_t')


def label_get_recolor(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_label_get_recolor(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def label_get_letter_pos(
    obj: "obj_t",
    char_id: "uint32_t",
    pos: "point_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    char_id = _get_c_obj(char_id, 'uint32_t')
    pos = _get_c_obj(pos, 'point_t')
    res = _lib_lvgl.lib.lv_label_get_letter_pos(  # NOQA
        obj,
        char_id,
        pos
    )
    return _get_py_obj(res, 'None')


def label_get_letter_on(
    obj: "obj_t",
    pos_in: "point_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    pos_in = _get_c_obj(pos_in, 'point_t')
    res = _lib_lvgl.lib.lv_label_get_letter_on(  # NOQA
        obj,
        pos_in
    )
    return _get_py_obj(res, 'uint32_t')


def label_is_char_under_pos(
    obj: "obj_t",
    pos: "point_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    pos = _get_c_obj(pos, 'point_t')
    res = _lib_lvgl.lib.lv_label_is_char_under_pos(  # NOQA
        obj,
        pos
    )
    return _get_py_obj(res, 'bool')


def label_get_text_selection_start(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_label_get_text_selection_start(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def label_get_text_selection_end(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_label_get_text_selection_end(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def label_ins_text(
    obj: "obj_t",
    pos: "uint32_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    pos = _get_c_obj(pos, 'uint32_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_label_ins_text(  # NOQA
        obj,
        pos,
        txt
    )
    return _get_py_obj(res, 'None')


def label_cut_text(
    obj: "obj_t",
    pos: "uint32_t",
    cnt: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    pos = _get_c_obj(pos, 'uint32_t')
    cnt = _get_c_obj(cnt, 'uint32_t')
    res = _lib_lvgl.lib.lv_label_cut_text(  # NOQA
        obj,
        pos,
        cnt
    )
    return _get_py_obj(res, 'None')


def bar_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def bar_set_value(
    obj: "obj_t",
    value: "int32_t",
    anim: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'int32_t')
    anim = _get_c_obj(anim, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_bar_set_value(  # NOQA
        obj,
        value,
        anim
    )
    return _get_py_obj(res, 'None')


def bar_set_start_value(
    obj: "obj_t",
    start_value: "int32_t",
    anim: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    start_value = _get_c_obj(start_value, 'int32_t')
    anim = _get_c_obj(anim, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_bar_set_start_value(  # NOQA
        obj,
        start_value,
        anim
    )
    return _get_py_obj(res, 'None')


def bar_set_range(
    obj: "obj_t",
    min: "int32_t",
    max: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    min = _get_c_obj(min, 'int32_t')
    max = _get_c_obj(max, 'int32_t')
    res = _lib_lvgl.lib.lv_bar_set_range(  # NOQA
        obj,
        min,
        max
    )
    return _get_py_obj(res, 'None')


def bar_set_mode(
    obj: "obj_t",
    mode: "bar_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'bar_mode_t')
    res = _lib_lvgl.lib.lv_bar_set_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def bar_get_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_get_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def bar_get_start_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_get_start_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def bar_get_min_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_get_min_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def bar_get_max_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_get_max_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def bar_get_mode(
    obj: "obj_t"
) -> "bar_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_bar_get_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bar_mode_t')


def btn_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_btn_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def btnmatrix_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_btnmatrix_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def btnmatrix_set_map(
    obj: "obj_t",
    map: List["char"]
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    map = _get_c_obj(map, 'List[char]')
    res = _lib_lvgl.lib.lv_btnmatrix_set_map(  # NOQA
        obj,
        map
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_ctrl_map(
    obj: "obj_t",
    ctrl_map: List["btnmatrix_ctrl_t"]
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ctrl_map = _get_c_obj(ctrl_map, 'List[btnmatrix_ctrl_t]')
    res = _lib_lvgl.lib.lv_btnmatrix_set_ctrl_map(  # NOQA
        obj,
        ctrl_map
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_selected_btn(
    obj: "obj_t",
    btn_id: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    res = _lib_lvgl.lib.lv_btnmatrix_set_selected_btn(  # NOQA
        obj,
        btn_id
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_btn_ctrl(
    obj: "obj_t",
    btn_id: "uint16_t",
    ctrl: "btnmatrix_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'btnmatrix_ctrl_t')
    res = _lib_lvgl.lib.lv_btnmatrix_set_btn_ctrl(  # NOQA
        obj,
        btn_id,
        ctrl
    )
    return _get_py_obj(res, 'None')


def btnmatrix_clear_btn_ctrl(
    obj: "obj_t",
    btn_id: "uint16_t",
    ctrl: "btnmatrix_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'btnmatrix_ctrl_t')
    res = _lib_lvgl.lib.lv_btnmatrix_clear_btn_ctrl(  # NOQA
        obj,
        btn_id,
        ctrl
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_btn_ctrl_all(
    obj: "obj_t",
    ctrl: "btnmatrix_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ctrl = _get_c_obj(ctrl, 'btnmatrix_ctrl_t')
    res = _lib_lvgl.lib.lv_btnmatrix_set_btn_ctrl_all(  # NOQA
        obj,
        ctrl
    )
    return _get_py_obj(res, 'None')


def btnmatrix_clear_btn_ctrl_all(
    obj: "obj_t",
    ctrl: "btnmatrix_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ctrl = _get_c_obj(ctrl, 'btnmatrix_ctrl_t')
    res = _lib_lvgl.lib.lv_btnmatrix_clear_btn_ctrl_all(  # NOQA
        obj,
        ctrl
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_btn_width(
    obj: "obj_t",
    btn_id: "uint16_t",
    width: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    width = _get_c_obj(width, 'uint8_t')
    res = _lib_lvgl.lib.lv_btnmatrix_set_btn_width(  # NOQA
        obj,
        btn_id,
        width
    )
    return _get_py_obj(res, 'None')


def btnmatrix_set_one_checked(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_btnmatrix_set_one_checked(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def btnmatrix_get_map(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_btnmatrix_get_map(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def btnmatrix_get_selected_btn(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_btnmatrix_get_selected_btn(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def btnmatrix_get_btn_text(
    obj: "obj_t",
    btn_id: "uint16_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    res = _lib_lvgl.lib.lv_btnmatrix_get_btn_text(  # NOQA
        obj,
        btn_id
    )
    return _get_py_obj(res, 'char')


def btnmatrix_has_btn_ctrl(
    obj: "obj_t",
    btn_id: "uint16_t",
    ctrl: "btnmatrix_ctrl_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'btnmatrix_ctrl_t')
    res = _lib_lvgl.lib.lv_btnmatrix_has_btn_ctrl(  # NOQA
        obj,
        btn_id,
        ctrl
    )
    return _get_py_obj(res, 'bool')


def btnmatrix_get_one_checked(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_btnmatrix_get_one_checked(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def calendar_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def calendar_set_today_date(
    obj: "obj_t",
    year: "uint32_t",
    month: "uint32_t",
    day: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    year = _get_c_obj(year, 'uint32_t')
    month = _get_c_obj(month, 'uint32_t')
    day = _get_c_obj(day, 'uint32_t')
    res = _lib_lvgl.lib.lv_calendar_set_today_date(  # NOQA
        obj,
        year,
        month,
        day
    )
    return _get_py_obj(res, 'None')


def calendar_set_showed_date(
    obj: "obj_t",
    year: "uint32_t",
    month: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    year = _get_c_obj(year, 'uint32_t')
    month = _get_c_obj(month, 'uint32_t')
    res = _lib_lvgl.lib.lv_calendar_set_showed_date(  # NOQA
        obj,
        year,
        month
    )
    return _get_py_obj(res, 'None')


def calendar_set_highlighted_dates(
    obj: "obj_t",
    highlighted: List["calendar_date_t"],
    date_num: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    highlighted = _get_c_obj(highlighted, 'List[calendar_date_t]')
    date_num = _get_c_obj(date_num, 'uint16_t')
    res = _lib_lvgl.lib.lv_calendar_set_highlighted_dates(  # NOQA
        obj,
        highlighted,
        date_num
    )
    return _get_py_obj(res, 'None')


def calendar_set_day_names(
    obj: "obj_t",
    day_names: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    day_names = _get_c_obj(day_names, 'char')
    res = _lib_lvgl.lib.lv_calendar_set_day_names(  # NOQA
        obj,
        day_names
    )
    return _get_py_obj(res, 'None')


def calendar_get_btnmatrix(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_get_btnmatrix(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def calendar_get_today_date(
    calendar: "obj_t"
) -> "calendar_date_t":

    calendar = _get_c_obj(calendar, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_get_today_date(  # NOQA
        calendar
    )
    return _get_py_obj(res, 'calendar_date_t')


def calendar_get_showed_date(
    calendar: "obj_t"
) -> "calendar_date_t":

    calendar = _get_c_obj(calendar, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_get_showed_date(  # NOQA
        calendar
    )
    return _get_py_obj(res, 'calendar_date_t')


def calendar_get_highlighted_dates(
    calendar: "obj_t"
) -> "calendar_date_t":

    calendar = _get_c_obj(calendar, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_get_highlighted_dates(  # NOQA
        calendar
    )
    return _get_py_obj(res, 'calendar_date_t')


def calendar_get_highlighted_dates_num(
    calendar: "obj_t"
) -> "uint16_t":

    calendar = _get_c_obj(calendar, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_get_highlighted_dates_num(  # NOQA
        calendar
    )
    return _get_py_obj(res, 'uint16_t')


def calendar_get_pressed_date(
    calendar: "obj_t",
    date: "calendar_date_t"
) -> "res_t":

    calendar = _get_c_obj(calendar, 'obj_t')
    date = _get_c_obj(date, 'calendar_date_t')
    res = _lib_lvgl.lib.lv_calendar_get_pressed_date(  # NOQA
        calendar,
        date
    )
    return _get_py_obj(res, 'res_t')


def calendar_header_arrow_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_header_arrow_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def calendar_header_dropdown_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_calendar_header_dropdown_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def canvas_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_canvas_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def canvas_set_buffer(
    canvas: "obj_t",
    buf: None,
    w: "coord_t",
    h: "coord_t",
    cf: "color_format_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    buf = _get_c_obj(buf, 'None')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    cf = _get_c_obj(cf, 'color_format_t')
    res = _lib_lvgl.lib.lv_canvas_set_buffer(  # NOQA
        canvas,
        buf,
        w,
        h,
        cf
    )
    return _get_py_obj(res, 'None')


def canvas_set_px(
    obj: "obj_t",
    x: "coord_t",
    y: "coord_t",
    color: "color_t",
    opa: "opa_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    color = _get_c_obj(color, 'color_t')
    opa = _get_c_obj(opa, 'opa_t')
    res = _lib_lvgl.lib.lv_canvas_set_px(  # NOQA
        obj,
        x,
        y,
        color,
        opa
    )
    return _get_py_obj(res, 'None')


def canvas_set_palette(
    canvas: "obj_t",
    id: "uint8_t",
    c: "color32_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    id = _get_c_obj(id, 'uint8_t')
    c = _get_c_obj(c, 'color32_t')
    res = _lib_lvgl.lib.lv_canvas_set_palette(  # NOQA
        canvas,
        id,
        c
    )
    return _get_py_obj(res, 'None')


def canvas_get_px(
    obj: "obj_t",
    x: "coord_t",
    y: "coord_t",
    color: "color_t",
    opa: "opa_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    color = _get_c_obj(color, 'color_t')
    opa = _get_c_obj(opa, 'opa_t')
    res = _lib_lvgl.lib.lv_canvas_get_px(  # NOQA
        obj,
        x,
        y,
        color,
        opa
    )
    return _get_py_obj(res, 'None')


def canvas_get_img(
    canvas: "obj_t"
) -> "img_dsc_t":

    canvas = _get_c_obj(canvas, 'obj_t')
    res = _lib_lvgl.lib.lv_canvas_get_img(  # NOQA
        canvas
    )
    return _get_py_obj(res, 'img_dsc_t')


def canvas_copy_buf(
    canvas: "obj_t",
    to_copy: None,
    x: "coord_t",
    y: "coord_t",
    w: "coord_t",
    h: "coord_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    to_copy = _get_c_obj(to_copy, 'None')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    res = _lib_lvgl.lib.lv_canvas_copy_buf(  # NOQA
        canvas,
        to_copy,
        x,
        y,
        w,
        h
    )
    return _get_py_obj(res, 'None')


def canvas_transform(
    canvas: "obj_t",
    img: "img_dsc_t",
    angle: "int16_t",
    zoom: "uint16_t",
    offset_x: "coord_t",
    offset_y: "coord_t",
    pivot_x: "int32_t",
    pivot_y: "int32_t",
    antialias: "bool"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    img = _get_c_obj(img, 'img_dsc_t')
    angle = _get_c_obj(angle, 'int16_t')
    zoom = _get_c_obj(zoom, 'uint16_t')
    offset_x = _get_c_obj(offset_x, 'coord_t')
    offset_y = _get_c_obj(offset_y, 'coord_t')
    pivot_x = _get_c_obj(pivot_x, 'int32_t')
    pivot_y = _get_c_obj(pivot_y, 'int32_t')
    antialias = _get_c_obj(antialias, 'bool')
    res = _lib_lvgl.lib.lv_canvas_transform(  # NOQA
        canvas,
        img,
        angle,
        zoom,
        offset_x,
        offset_y,
        pivot_x,
        pivot_y,
        antialias
    )
    return _get_py_obj(res, 'None')


def canvas_blur_hor(
    canvas: "obj_t",
    area: "area_t",
    r: "uint16_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    area = _get_c_obj(area, 'area_t')
    r = _get_c_obj(r, 'uint16_t')
    res = _lib_lvgl.lib.lv_canvas_blur_hor(  # NOQA
        canvas,
        area,
        r
    )
    return _get_py_obj(res, 'None')


def canvas_blur_ver(
    canvas: "obj_t",
    area: "area_t",
    r: "uint16_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    area = _get_c_obj(area, 'area_t')
    r = _get_c_obj(r, 'uint16_t')
    res = _lib_lvgl.lib.lv_canvas_blur_ver(  # NOQA
        canvas,
        area,
        r
    )
    return _get_py_obj(res, 'None')


def canvas_fill_bg(
    canvas: "obj_t",
    color: "color_t",
    opa: "opa_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    opa = _get_c_obj(opa, 'opa_t')
    res = _lib_lvgl.lib.lv_canvas_fill_bg(  # NOQA
        canvas,
        color,
        opa
    )
    return _get_py_obj(res, 'None')


def canvas_draw_rect(
    canvas: "obj_t",
    x: "coord_t",
    y: "coord_t",
    w: "coord_t",
    h: "coord_t",
    draw_dsc: "draw_rect_dsc_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    w = _get_c_obj(w, 'coord_t')
    h = _get_c_obj(h, 'coord_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_rect_dsc_t')
    res = _lib_lvgl.lib.lv_canvas_draw_rect(  # NOQA
        canvas,
        x,
        y,
        w,
        h,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def canvas_draw_text(
    canvas: "obj_t",
    x: "coord_t",
    y: "coord_t",
    max_w: "coord_t",
    draw_dsc: "draw_label_dsc_t",
    txt: "char"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    max_w = _get_c_obj(max_w, 'coord_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_label_dsc_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_canvas_draw_text(  # NOQA
        canvas,
        x,
        y,
        max_w,
        draw_dsc,
        txt
    )
    return _get_py_obj(res, 'None')


def canvas_draw_img(
    canvas: "obj_t",
    x: "coord_t",
    y: "coord_t",
    src: None,
    draw_dsc: "draw_img_dsc_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    src = _get_c_obj(src, 'None')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_img_dsc_t')
    res = _lib_lvgl.lib.lv_canvas_draw_img(  # NOQA
        canvas,
        x,
        y,
        src,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def canvas_draw_line(
    canvas: "obj_t",
    points: List["point_t"],
    point_cnt: "uint32_t",
    draw_dsc: "draw_line_dsc_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    points = _get_c_obj(points, 'List[point_t]')
    point_cnt = _get_c_obj(point_cnt, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_line_dsc_t')
    res = _lib_lvgl.lib.lv_canvas_draw_line(  # NOQA
        canvas,
        points,
        point_cnt,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def canvas_draw_polygon(
    canvas: "obj_t",
    points: List["point_t"],
    point_cnt: "uint32_t",
    draw_dsc: "draw_rect_dsc_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    points = _get_c_obj(points, 'List[point_t]')
    point_cnt = _get_c_obj(point_cnt, 'uint32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_rect_dsc_t')
    res = _lib_lvgl.lib.lv_canvas_draw_polygon(  # NOQA
        canvas,
        points,
        point_cnt,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def canvas_draw_arc(
    canvas: "obj_t",
    x: "coord_t",
    y: "coord_t",
    r: "coord_t",
    start_angle: "int32_t",
    end_angle: "int32_t",
    draw_dsc: "draw_arc_dsc_t"
) -> None:

    canvas = _get_c_obj(canvas, 'obj_t')
    x = _get_c_obj(x, 'coord_t')
    y = _get_c_obj(y, 'coord_t')
    r = _get_c_obj(r, 'coord_t')
    start_angle = _get_c_obj(start_angle, 'int32_t')
    end_angle = _get_c_obj(end_angle, 'int32_t')
    draw_dsc = _get_c_obj(draw_dsc, 'draw_arc_dsc_t')
    res = _lib_lvgl.lib.lv_canvas_draw_arc(  # NOQA
        canvas,
        x,
        y,
        r,
        start_angle,
        end_angle,
        draw_dsc
    )
    return _get_py_obj(res, 'None')


def chart_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def chart_set_type(
    obj: "obj_t",
    type: "chart_type_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    type = _get_c_obj(type, 'chart_type_t')
    res = _lib_lvgl.lib.lv_chart_set_type(  # NOQA
        obj,
        type
    )
    return _get_py_obj(res, 'None')


def chart_set_point_count(
    obj: "obj_t",
    cnt: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    cnt = _get_c_obj(cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_chart_set_point_count(  # NOQA
        obj,
        cnt
    )
    return _get_py_obj(res, 'None')


def chart_set_range(
    obj: "obj_t",
    axis: "chart_axis_t",
    min: "coord_t",
    max: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    axis = _get_c_obj(axis, 'chart_axis_t')
    min = _get_c_obj(min, 'coord_t')
    max = _get_c_obj(max, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_range(  # NOQA
        obj,
        axis,
        min,
        max
    )
    return _get_py_obj(res, 'None')


def chart_set_update_mode(
    obj: "obj_t",
    update_mode: "chart_update_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    update_mode = _get_c_obj(update_mode, 'chart_update_mode_t')
    res = _lib_lvgl.lib.lv_chart_set_update_mode(  # NOQA
        obj,
        update_mode
    )
    return _get_py_obj(res, 'None')


def chart_set_div_line_count(
    obj: "obj_t",
    hdiv: "uint8_t",
    vdiv: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    hdiv = _get_c_obj(hdiv, 'uint8_t')
    vdiv = _get_c_obj(vdiv, 'uint8_t')
    res = _lib_lvgl.lib.lv_chart_set_div_line_count(  # NOQA
        obj,
        hdiv,
        vdiv
    )
    return _get_py_obj(res, 'None')


def chart_set_zoom_x(
    obj: "obj_t",
    zoom_x: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    zoom_x = _get_c_obj(zoom_x, 'uint16_t')
    res = _lib_lvgl.lib.lv_chart_set_zoom_x(  # NOQA
        obj,
        zoom_x
    )
    return _get_py_obj(res, 'None')


def chart_set_zoom_y(
    obj: "obj_t",
    zoom_y: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    zoom_y = _get_c_obj(zoom_y, 'uint16_t')
    res = _lib_lvgl.lib.lv_chart_set_zoom_y(  # NOQA
        obj,
        zoom_y
    )
    return _get_py_obj(res, 'None')


def chart_get_zoom_x(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_get_zoom_x(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def chart_get_zoom_y(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_get_zoom_y(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def chart_set_axis_tick(
    obj: "obj_t",
    axis: "chart_axis_t",
    major_len: "coord_t",
    minor_len: "coord_t",
    major_cnt: "coord_t",
    minor_cnt: "coord_t",
    label_en: "bool",
    draw_size: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    axis = _get_c_obj(axis, 'chart_axis_t')
    major_len = _get_c_obj(major_len, 'coord_t')
    minor_len = _get_c_obj(minor_len, 'coord_t')
    major_cnt = _get_c_obj(major_cnt, 'coord_t')
    minor_cnt = _get_c_obj(minor_cnt, 'coord_t')
    label_en = _get_c_obj(label_en, 'bool')
    draw_size = _get_c_obj(draw_size, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_axis_tick(  # NOQA
        obj,
        axis,
        major_len,
        minor_len,
        major_cnt,
        minor_cnt,
        label_en,
        draw_size
    )
    return _get_py_obj(res, 'None')


def chart_get_type(
    obj: "obj_t"
) -> "chart_type_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_get_type(  # NOQA
        obj
    )
    return _get_py_obj(res, 'chart_type_t')


def chart_get_point_count(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_get_point_count(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def chart_get_x_start_point(
    obj: "obj_t",
    ser: "chart_series_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    res = _lib_lvgl.lib.lv_chart_get_x_start_point(  # NOQA
        obj,
        ser
    )
    return _get_py_obj(res, 'uint16_t')


def chart_get_point_pos_by_id(
    obj: "obj_t",
    ser: "chart_series_t",
    id: "uint16_t",
    p_out: "point_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    id = _get_c_obj(id, 'uint16_t')
    p_out = _get_c_obj(p_out, 'point_t')
    res = _lib_lvgl.lib.lv_chart_get_point_pos_by_id(  # NOQA
        obj,
        ser,
        id,
        p_out
    )
    return _get_py_obj(res, 'None')


def chart_refresh(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_refresh(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def chart_add_series(
    obj: "obj_t",
    color: "color_t",
    axis: "chart_axis_t"
) -> "chart_series_t":

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    axis = _get_c_obj(axis, 'chart_axis_t')
    res = _lib_lvgl.lib.lv_chart_add_series(  # NOQA
        obj,
        color,
        axis
    )
    return _get_py_obj(res, 'chart_series_t')


def chart_remove_series(
    obj: "obj_t",
    series: "chart_series_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    series = _get_c_obj(series, 'chart_series_t')
    res = _lib_lvgl.lib.lv_chart_remove_series(  # NOQA
        obj,
        series
    )
    return _get_py_obj(res, 'None')


def chart_hide_series(
    chart: "obj_t",
    series: "chart_series_t",
    hide: "bool"
) -> None:

    chart = _get_c_obj(chart, 'obj_t')
    series = _get_c_obj(series, 'chart_series_t')
    hide = _get_c_obj(hide, 'bool')
    res = _lib_lvgl.lib.lv_chart_hide_series(  # NOQA
        chart,
        series,
        hide
    )
    return _get_py_obj(res, 'None')


def chart_set_series_color(
    chart: "obj_t",
    series: "chart_series_t",
    color: "color_t"
) -> None:

    chart = _get_c_obj(chart, 'obj_t')
    series = _get_c_obj(series, 'chart_series_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_chart_set_series_color(  # NOQA
        chart,
        series,
        color
    )
    return _get_py_obj(res, 'None')


def chart_set_x_start_point(
    obj: "obj_t",
    ser: "chart_series_t",
    id: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    id = _get_c_obj(id, 'uint16_t')
    res = _lib_lvgl.lib.lv_chart_set_x_start_point(  # NOQA
        obj,
        ser,
        id
    )
    return _get_py_obj(res, 'None')


def chart_get_series_next(
    chart: "obj_t",
    ser: "chart_series_t"
) -> "chart_series_t":

    chart = _get_c_obj(chart, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    res = _lib_lvgl.lib.lv_chart_get_series_next(  # NOQA
        chart,
        ser
    )
    return _get_py_obj(res, 'chart_series_t')


def chart_add_cursor(
    obj: "obj_t",
    color: "color_t",
    dir: "dir_t"
) -> "chart_cursor_t":

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    dir = _get_c_obj(dir, 'dir_t')
    res = _lib_lvgl.lib.lv_chart_add_cursor(  # NOQA
        obj,
        color,
        dir
    )
    return _get_py_obj(res, 'chart_cursor_t')


def chart_set_cursor_pos(
    chart: "obj_t",
    cursor: "chart_cursor_t",
    pos: "point_t"
) -> None:

    chart = _get_c_obj(chart, 'obj_t')
    cursor = _get_c_obj(cursor, 'chart_cursor_t')
    pos = _get_c_obj(pos, 'point_t')
    res = _lib_lvgl.lib.lv_chart_set_cursor_pos(  # NOQA
        chart,
        cursor,
        pos
    )
    return _get_py_obj(res, 'None')


def chart_set_cursor_point(
    chart: "obj_t",
    cursor: "chart_cursor_t",
    ser: "chart_series_t",
    point_id: "uint16_t"
) -> None:

    chart = _get_c_obj(chart, 'obj_t')
    cursor = _get_c_obj(cursor, 'chart_cursor_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    point_id = _get_c_obj(point_id, 'uint16_t')
    res = _lib_lvgl.lib.lv_chart_set_cursor_point(  # NOQA
        chart,
        cursor,
        ser,
        point_id
    )
    return _get_py_obj(res, 'None')


def chart_get_cursor_point(
    chart: "obj_t",
    cursor: "chart_cursor_t"
) -> "point_t":

    chart = _get_c_obj(chart, 'obj_t')
    cursor = _get_c_obj(cursor, 'chart_cursor_t')
    res = _lib_lvgl.lib.lv_chart_get_cursor_point(  # NOQA
        chart,
        cursor
    )
    return _get_py_obj(res, 'point_t')


def chart_set_all_value(
    obj: "obj_t",
    ser: "chart_series_t",
    value: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_all_value(  # NOQA
        obj,
        ser,
        value
    )
    return _get_py_obj(res, 'None')


def chart_set_next_value(
    obj: "obj_t",
    ser: "chart_series_t",
    value: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_next_value(  # NOQA
        obj,
        ser,
        value
    )
    return _get_py_obj(res, 'None')


def chart_set_next_value2(
    obj: "obj_t",
    ser: "chart_series_t",
    x_value: "coord_t",
    y_value: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    x_value = _get_c_obj(x_value, 'coord_t')
    y_value = _get_c_obj(y_value, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_next_value2(  # NOQA
        obj,
        ser,
        x_value,
        y_value
    )
    return _get_py_obj(res, 'None')


def chart_set_value_by_id(
    obj: "obj_t",
    ser: "chart_series_t",
    id: "uint16_t",
    value: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    id = _get_c_obj(id, 'uint16_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_value_by_id(  # NOQA
        obj,
        ser,
        id,
        value
    )
    return _get_py_obj(res, 'None')


def chart_set_value_by_id2(
    obj: "obj_t",
    ser: "chart_series_t",
    id: "uint16_t",
    x_value: "coord_t",
    y_value: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    id = _get_c_obj(id, 'uint16_t')
    x_value = _get_c_obj(x_value, 'coord_t')
    y_value = _get_c_obj(y_value, 'coord_t')
    res = _lib_lvgl.lib.lv_chart_set_value_by_id2(  # NOQA
        obj,
        ser,
        id,
        x_value,
        y_value
    )
    return _get_py_obj(res, 'None')


def chart_set_ext_y_array(
    obj: "obj_t",
    ser: "chart_series_t",
    array: List["coord_t"]
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    array = _get_c_obj(array, 'List[coord_t]')
    res = _lib_lvgl.lib.lv_chart_set_ext_y_array(  # NOQA
        obj,
        ser,
        array
    )
    return _get_py_obj(res, 'None')


def chart_set_ext_x_array(
    obj: "obj_t",
    ser: "chart_series_t",
    array: List["coord_t"]
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    array = _get_c_obj(array, 'List[coord_t]')
    res = _lib_lvgl.lib.lv_chart_set_ext_x_array(  # NOQA
        obj,
        ser,
        array
    )
    return _get_py_obj(res, 'None')


def chart_get_y_array(
    obj: "obj_t",
    ser: "chart_series_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    res = _lib_lvgl.lib.lv_chart_get_y_array(  # NOQA
        obj,
        ser
    )
    return _get_py_obj(res, 'coord_t')


def chart_get_x_array(
    obj: "obj_t",
    ser: "chart_series_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    ser = _get_c_obj(ser, 'chart_series_t')
    res = _lib_lvgl.lib.lv_chart_get_x_array(  # NOQA
        obj,
        ser
    )
    return _get_py_obj(res, 'coord_t')


def chart_get_pressed_point(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_chart_get_pressed_point(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def checkbox_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_checkbox_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def checkbox_set_text(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_checkbox_set_text(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def checkbox_set_text_static(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_checkbox_set_text_static(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def checkbox_get_text(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_checkbox_get_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def colorwheel_create(
    parent: "obj_t",
    knob_recolor: "bool"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    knob_recolor = _get_c_obj(knob_recolor, 'bool')
    res = _lib_lvgl.lib.lv_colorwheel_create(  # NOQA
        parent,
        knob_recolor
    )
    return _get_py_obj(res, 'obj_t')


def colorwheel_set_hsv(
    obj: "obj_t",
    hsv: "color_hsv_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    hsv = _get_c_obj(hsv, 'color_hsv_t')
    res = _lib_lvgl.lib.lv_colorwheel_set_hsv(  # NOQA
        obj,
        hsv
    )
    return _get_py_obj(res, 'bool')


def colorwheel_set_rgb(
    obj: "obj_t",
    color: "color_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_colorwheel_set_rgb(  # NOQA
        obj,
        color
    )
    return _get_py_obj(res, 'bool')


def colorwheel_set_mode(
    obj: "obj_t",
    mode: "colorwheel_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'colorwheel_mode_t')
    res = _lib_lvgl.lib.lv_colorwheel_set_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def colorwheel_set_mode_fixed(
    obj: "obj_t",
    fixed: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    fixed = _get_c_obj(fixed, 'bool')
    res = _lib_lvgl.lib.lv_colorwheel_set_mode_fixed(  # NOQA
        obj,
        fixed
    )
    return _get_py_obj(res, 'None')


def colorwheel_get_hsv(
    obj: "obj_t"
) -> "color_hsv_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_colorwheel_get_hsv(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color_hsv_t')


def colorwheel_get_rgb(
    obj: "obj_t"
) -> "color_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_colorwheel_get_rgb(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color_t')


def colorwheel_get_color_mode(
    obj: "obj_t"
) -> "colorwheel_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_colorwheel_get_color_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'colorwheel_mode_t')


def colorwheel_get_color_mode_fixed(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_colorwheel_get_color_mode_fixed(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def dropdown_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def dropdown_set_text(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_dropdown_set_text(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def dropdown_set_options(
    obj: "obj_t",
    options: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    options = _get_c_obj(options, 'char')
    res = _lib_lvgl.lib.lv_dropdown_set_options(  # NOQA
        obj,
        options
    )
    return _get_py_obj(res, 'None')


def dropdown_set_options_static(
    obj: "obj_t",
    options: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    options = _get_c_obj(options, 'char')
    res = _lib_lvgl.lib.lv_dropdown_set_options_static(  # NOQA
        obj,
        options
    )
    return _get_py_obj(res, 'None')


def dropdown_add_option(
    obj: "obj_t",
    option: "char",
    pos: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    option = _get_c_obj(option, 'char')
    pos = _get_c_obj(pos, 'uint32_t')
    res = _lib_lvgl.lib.lv_dropdown_add_option(  # NOQA
        obj,
        option,
        pos
    )
    return _get_py_obj(res, 'None')


def dropdown_clear_options(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_clear_options(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def dropdown_set_selected(
    obj: "obj_t",
    sel_opt: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    sel_opt = _get_c_obj(sel_opt, 'uint16_t')
    res = _lib_lvgl.lib.lv_dropdown_set_selected(  # NOQA
        obj,
        sel_opt
    )
    return _get_py_obj(res, 'None')


def dropdown_set_dir(
    obj: "obj_t",
    dir: "dir_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    dir = _get_c_obj(dir, 'dir_t')
    res = _lib_lvgl.lib.lv_dropdown_set_dir(  # NOQA
        obj,
        dir
    )
    return _get_py_obj(res, 'None')


def dropdown_set_symbol(
    obj: "obj_t",
    symbol: None
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    symbol = _get_c_obj(symbol, 'None')
    res = _lib_lvgl.lib.lv_dropdown_set_symbol(  # NOQA
        obj,
        symbol
    )
    return _get_py_obj(res, 'None')


def dropdown_set_selected_highlight(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_dropdown_set_selected_highlight(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def dropdown_get_list(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_list(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def dropdown_get_text(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def dropdown_get_options(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_options(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def dropdown_get_selected(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_selected(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def dropdown_get_option_cnt(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_option_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def dropdown_get_selected_str(
    obj: "obj_t",
    buf: "char",
    buf_size: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    buf = _get_c_obj(buf, 'char')
    buf_size = _get_c_obj(buf_size, 'uint32_t')
    res = _lib_lvgl.lib.lv_dropdown_get_selected_str(  # NOQA
        obj,
        buf,
        buf_size
    )
    return _get_py_obj(res, 'None')


def dropdown_get_option_index(
    obj: "obj_t",
    option: "char"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    option = _get_c_obj(option, 'char')
    res = _lib_lvgl.lib.lv_dropdown_get_option_index(  # NOQA
        obj,
        option
    )
    return _get_py_obj(res, 'int32_t')


def dropdown_get_symbol(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_symbol(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def dropdown_get_selected_highlight(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_selected_highlight(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def dropdown_get_dir(
    obj: "obj_t"
) -> "dir_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_get_dir(  # NOQA
        obj
    )
    return _get_py_obj(res, 'dir_t')


def dropdown_open(
    dropdown_obj: "obj_t"
) -> None:

    dropdown_obj = _get_c_obj(dropdown_obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_open(  # NOQA
        dropdown_obj
    )
    return _get_py_obj(res, 'None')


def dropdown_close(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_close(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def dropdown_is_open(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_dropdown_is_open(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def imgbtn_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_imgbtn_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def imgbtn_set_src(
    imgbtn: "obj_t",
    state: "imgbtn_state_t",
    src_left: None,
    src_mid: None,
    src_right: None
) -> None:

    imgbtn = _get_c_obj(imgbtn, 'obj_t')
    state = _get_c_obj(state, 'imgbtn_state_t')
    src_left = _get_c_obj(src_left, 'None')
    src_mid = _get_c_obj(src_mid, 'None')
    src_right = _get_c_obj(src_right, 'None')
    res = _lib_lvgl.lib.lv_imgbtn_set_src(  # NOQA
        imgbtn,
        state,
        src_left,
        src_mid,
        src_right
    )
    return _get_py_obj(res, 'None')


def imgbtn_set_state(
    imgbtn: "obj_t",
    state: "imgbtn_state_t"
) -> None:

    imgbtn = _get_c_obj(imgbtn, 'obj_t')
    state = _get_c_obj(state, 'imgbtn_state_t')
    res = _lib_lvgl.lib.lv_imgbtn_set_state(  # NOQA
        imgbtn,
        state
    )
    return _get_py_obj(res, 'None')


def imgbtn_get_src_left(
    imgbtn: "obj_t",
    state: "imgbtn_state_t"
) -> Any:

    imgbtn = _get_c_obj(imgbtn, 'obj_t')
    state = _get_c_obj(state, 'imgbtn_state_t')
    res = _lib_lvgl.lib.lv_imgbtn_get_src_left(  # NOQA
        imgbtn,
        state
    )
    return _get_py_obj(res, 'void')


def imgbtn_get_src_middle(
    imgbtn: "obj_t",
    state: "imgbtn_state_t"
) -> Any:

    imgbtn = _get_c_obj(imgbtn, 'obj_t')
    state = _get_c_obj(state, 'imgbtn_state_t')
    res = _lib_lvgl.lib.lv_imgbtn_get_src_middle(  # NOQA
        imgbtn,
        state
    )
    return _get_py_obj(res, 'void')


def imgbtn_get_src_right(
    imgbtn: "obj_t",
    state: "imgbtn_state_t"
) -> Any:

    imgbtn = _get_c_obj(imgbtn, 'obj_t')
    state = _get_c_obj(state, 'imgbtn_state_t')
    res = _lib_lvgl.lib.lv_imgbtn_get_src_right(  # NOQA
        imgbtn,
        state
    )
    return _get_py_obj(res, 'void')


def keyboard_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def keyboard_set_textarea(
    kb: "obj_t",
    ta: "obj_t"
) -> None:

    kb = _get_c_obj(kb, 'obj_t')
    ta = _get_c_obj(ta, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_set_textarea(  # NOQA
        kb,
        ta
    )
    return _get_py_obj(res, 'None')


def keyboard_set_mode(
    kb: "obj_t",
    mode: "keyboard_mode_t"
) -> None:

    kb = _get_c_obj(kb, 'obj_t')
    mode = _get_c_obj(mode, 'keyboard_mode_t')
    res = _lib_lvgl.lib.lv_keyboard_set_mode(  # NOQA
        kb,
        mode
    )
    return _get_py_obj(res, 'None')


def keyboard_set_popovers(
    kb: "obj_t",
    en: "bool"
) -> None:

    kb = _get_c_obj(kb, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_keyboard_set_popovers(  # NOQA
        kb,
        en
    )
    return _get_py_obj(res, 'None')


def keyboard_set_map(
    kb: "obj_t",
    mode: "keyboard_mode_t",
    map: List["char"],
    ctrl_map: List["btnmatrix_ctrl_t"]
) -> None:

    kb = _get_c_obj(kb, 'obj_t')
    mode = _get_c_obj(mode, 'keyboard_mode_t')
    map = _get_c_obj(map, 'List[char]')
    ctrl_map = _get_c_obj(ctrl_map, 'List[btnmatrix_ctrl_t]')
    res = _lib_lvgl.lib.lv_keyboard_set_map(  # NOQA
        kb,
        mode,
        map,
        ctrl_map
    )
    return _get_py_obj(res, 'None')


def keyboard_get_textarea(
    kb: "obj_t"
) -> "obj_t":

    kb = _get_c_obj(kb, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_get_textarea(  # NOQA
        kb
    )
    return _get_py_obj(res, 'obj_t')


def keyboard_get_mode(
    kb: "obj_t"
) -> "keyboard_mode_t":

    kb = _get_c_obj(kb, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_get_mode(  # NOQA
        kb
    )
    return _get_py_obj(res, 'keyboard_mode_t')


def btnmatrix_get_popovers(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_btnmatrix_get_popovers(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def keyboard_get_map_array(
    kb: "obj_t"
) -> "char":

    kb = _get_c_obj(kb, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_get_map_array(  # NOQA
        kb
    )
    return _get_py_obj(res, 'char')


def keyboard_get_selected_btn(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_keyboard_get_selected_btn(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def keyboard_get_btn_text(
    obj: "obj_t",
    btn_id: "uint16_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    btn_id = _get_c_obj(btn_id, 'uint16_t')
    res = _lib_lvgl.lib.lv_keyboard_get_btn_text(  # NOQA
        obj,
        btn_id
    )
    return _get_py_obj(res, 'char')


def keyboard_def_event_cb(
    e: "event_t"
) -> None:

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_keyboard_def_event_cb(  # NOQA
        e
    )
    return _get_py_obj(res, 'None')


def led_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_led_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def led_set_color(
    led: "obj_t",
    color: "color_t"
) -> None:

    led = _get_c_obj(led, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_led_set_color(  # NOQA
        led,
        color
    )
    return _get_py_obj(res, 'None')


def led_set_brightness(
    led: "obj_t",
    bright: "uint8_t"
) -> None:

    led = _get_c_obj(led, 'obj_t')
    bright = _get_c_obj(bright, 'uint8_t')
    res = _lib_lvgl.lib.lv_led_set_brightness(  # NOQA
        led,
        bright
    )
    return _get_py_obj(res, 'None')


def led_on(
    led: "obj_t"
) -> None:

    led = _get_c_obj(led, 'obj_t')
    res = _lib_lvgl.lib.lv_led_on(  # NOQA
        led
    )
    return _get_py_obj(res, 'None')


def led_off(
    led: "obj_t"
) -> None:

    led = _get_c_obj(led, 'obj_t')
    res = _lib_lvgl.lib.lv_led_off(  # NOQA
        led
    )
    return _get_py_obj(res, 'None')


def led_toggle(
    led: "obj_t"
) -> None:

    led = _get_c_obj(led, 'obj_t')
    res = _lib_lvgl.lib.lv_led_toggle(  # NOQA
        led
    )
    return _get_py_obj(res, 'None')


def led_get_brightness(
    obj: "obj_t"
) -> "uint8_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_led_get_brightness(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint8_t')


def line_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_line_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def line_set_points(
    obj: "obj_t",
    points: List["point_t"],
    point_num: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    points = _get_c_obj(points, 'List[point_t]')
    point_num = _get_c_obj(point_num, 'uint16_t')
    res = _lib_lvgl.lib.lv_line_set_points(  # NOQA
        obj,
        points,
        point_num
    )
    return _get_py_obj(res, 'None')


def line_set_y_invert(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_line_set_y_invert(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def line_get_y_invert(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_line_get_y_invert(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def list_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_list_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def list_add_text(
    list: "obj_t",
    txt: "char"
) -> "obj_t":

    list = _get_c_obj(list, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_list_add_text(  # NOQA
        list,
        txt
    )
    return _get_py_obj(res, 'obj_t')


def list_add_btn(
    list: "obj_t",
    icon: None,
    txt: "char"
) -> "obj_t":

    list = _get_c_obj(list, 'obj_t')
    icon = _get_c_obj(icon, 'None')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_list_add_btn(  # NOQA
        list,
        icon,
        txt
    )
    return _get_py_obj(res, 'obj_t')


def list_get_btn_text(
    list: "obj_t",
    btn: "obj_t"
) -> "char":

    list = _get_c_obj(list, 'obj_t')
    btn = _get_c_obj(btn, 'obj_t')
    res = _lib_lvgl.lib.lv_list_get_btn_text(  # NOQA
        list,
        btn
    )
    return _get_py_obj(res, 'char')


def list_set_btn_text(
    list: "obj_t",
    btn: "obj_t",
    txt: "char"
) -> None:

    list = _get_c_obj(list, 'obj_t')
    btn = _get_c_obj(btn, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_list_set_btn_text(  # NOQA
        list,
        btn,
        txt
    )
    return _get_py_obj(res, 'None')


def menu_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def menu_page_create(
    parent: "obj_t",
    title: "char"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    title = _get_c_obj(title, 'char')
    res = _lib_lvgl.lib.lv_menu_page_create(  # NOQA
        parent,
        title
    )
    return _get_py_obj(res, 'obj_t')


def menu_cont_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_cont_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def menu_section_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_section_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def menu_separator_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_separator_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def menu_set_page(
    obj: "obj_t",
    page: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    page = _get_c_obj(page, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_set_page(  # NOQA
        obj,
        page
    )
    return _get_py_obj(res, 'None')


def menu_set_page_title(
    page: "obj_t",
    title: "char"
) -> None:

    page = _get_c_obj(page, 'obj_t')
    title = _get_c_obj(title, 'char')
    res = _lib_lvgl.lib.lv_menu_set_page_title(  # NOQA
        page,
        title
    )
    return _get_py_obj(res, 'None')


def menu_set_page_title_static(
    page: "obj_t",
    title: "char"
) -> None:

    page = _get_c_obj(page, 'obj_t')
    title = _get_c_obj(title, 'char')
    res = _lib_lvgl.lib.lv_menu_set_page_title_static(  # NOQA
        page,
        title
    )
    return _get_py_obj(res, 'None')


def menu_set_sidebar_page(
    obj: "obj_t",
    page: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    page = _get_c_obj(page, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_set_sidebar_page(  # NOQA
        obj,
        page
    )
    return _get_py_obj(res, 'None')


def menu_set_mode_header(
    obj: "obj_t",
    mode_header: "menu_mode_header_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode_header = _get_c_obj(mode_header, 'menu_mode_header_t')
    res = _lib_lvgl.lib.lv_menu_set_mode_header(  # NOQA
        obj,
        mode_header
    )
    return _get_py_obj(res, 'None')


def menu_set_mode_root_back_btn(
    obj: "obj_t",
    mode_root_back_btn: "menu_mode_root_back_btn_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode_root_back_btn = _get_c_obj(mode_root_back_btn, 'menu_mode_root_back_btn_t')
    res = _lib_lvgl.lib.lv_menu_set_mode_root_back_btn(  # NOQA
        obj,
        mode_root_back_btn
    )
    return _get_py_obj(res, 'None')


def menu_set_load_page_event(
    menu: "obj_t",
    obj: "obj_t",
    page: "obj_t"
) -> None:

    menu = _get_c_obj(menu, 'obj_t')
    obj = _get_c_obj(obj, 'obj_t')
    page = _get_c_obj(page, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_set_load_page_event(  # NOQA
        menu,
        obj,
        page
    )
    return _get_py_obj(res, 'None')


def menu_get_cur_main_page(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_cur_main_page(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_get_cur_sidebar_page(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_cur_sidebar_page(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_get_main_header(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_main_header(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_get_main_header_back_btn(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_main_header_back_btn(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_get_sidebar_header(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_sidebar_header(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_get_sidebar_header_back_btn(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_get_sidebar_header_back_btn(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def menu_back_btn_is_root(
    menu: "obj_t",
    obj: "obj_t"
) -> "bool":

    menu = _get_c_obj(menu, 'obj_t')
    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_back_btn_is_root(  # NOQA
        menu,
        obj
    )
    return _get_py_obj(res, 'bool')


def menu_clear_history(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_menu_clear_history(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def meter_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_meter_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def meter_set_scale_ticks(
    obj: "obj_t",
    cnt: "uint16_t",
    width: "uint16_t",
    len: "uint16_t",
    color: "color_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    cnt = _get_c_obj(cnt, 'uint16_t')
    width = _get_c_obj(width, 'uint16_t')
    len = _get_c_obj(len, 'uint16_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_meter_set_scale_ticks(  # NOQA
        obj,
        cnt,
        width,
        len,
        color
    )
    return _get_py_obj(res, 'None')


def meter_set_scale_major_ticks(
    obj: "obj_t",
    nth: "uint16_t",
    width: "uint16_t",
    len: "uint16_t",
    color: "color_t",
    label_gap: "int16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    nth = _get_c_obj(nth, 'uint16_t')
    width = _get_c_obj(width, 'uint16_t')
    len = _get_c_obj(len, 'uint16_t')
    color = _get_c_obj(color, 'color_t')
    label_gap = _get_c_obj(label_gap, 'int16_t')
    res = _lib_lvgl.lib.lv_meter_set_scale_major_ticks(  # NOQA
        obj,
        nth,
        width,
        len,
        color,
        label_gap
    )
    return _get_py_obj(res, 'None')


def meter_set_scale_range(
    obj: "obj_t",
    min: "int32_t",
    max: "int32_t",
    angle_range: "uint32_t",
    rotation: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    min = _get_c_obj(min, 'int32_t')
    max = _get_c_obj(max, 'int32_t')
    angle_range = _get_c_obj(angle_range, 'uint32_t')
    rotation = _get_c_obj(rotation, 'uint32_t')
    res = _lib_lvgl.lib.lv_meter_set_scale_range(  # NOQA
        obj,
        min,
        max,
        angle_range,
        rotation
    )
    return _get_py_obj(res, 'None')


def meter_add_needle_line(
    obj: "obj_t",
    width: "uint16_t",
    color: "color_t",
    r_mod: "int16_t"
) -> "meter_indicator_t":

    obj = _get_c_obj(obj, 'obj_t')
    width = _get_c_obj(width, 'uint16_t')
    color = _get_c_obj(color, 'color_t')
    r_mod = _get_c_obj(r_mod, 'int16_t')
    res = _lib_lvgl.lib.lv_meter_add_needle_line(  # NOQA
        obj,
        width,
        color,
        r_mod
    )
    return _get_py_obj(res, 'meter_indicator_t')


def meter_add_needle_img(
    obj: "obj_t",
    src: None,
    pivot_x: "coord_t",
    pivot_y: "coord_t"
) -> "meter_indicator_t":

    obj = _get_c_obj(obj, 'obj_t')
    src = _get_c_obj(src, 'None')
    pivot_x = _get_c_obj(pivot_x, 'coord_t')
    pivot_y = _get_c_obj(pivot_y, 'coord_t')
    res = _lib_lvgl.lib.lv_meter_add_needle_img(  # NOQA
        obj,
        src,
        pivot_x,
        pivot_y
    )
    return _get_py_obj(res, 'meter_indicator_t')


def meter_add_arc(
    obj: "obj_t",
    width: "uint16_t",
    color: "color_t",
    r_mod: "int16_t"
) -> "meter_indicator_t":

    obj = _get_c_obj(obj, 'obj_t')
    width = _get_c_obj(width, 'uint16_t')
    color = _get_c_obj(color, 'color_t')
    r_mod = _get_c_obj(r_mod, 'int16_t')
    res = _lib_lvgl.lib.lv_meter_add_arc(  # NOQA
        obj,
        width,
        color,
        r_mod
    )
    return _get_py_obj(res, 'meter_indicator_t')


def meter_add_scale_lines(
    obj: "obj_t",
    color_start: "color_t",
    color_end: "color_t",
    local: "bool",
    width_mod: "int16_t"
) -> "meter_indicator_t":

    obj = _get_c_obj(obj, 'obj_t')
    color_start = _get_c_obj(color_start, 'color_t')
    color_end = _get_c_obj(color_end, 'color_t')
    local = _get_c_obj(local, 'bool')
    width_mod = _get_c_obj(width_mod, 'int16_t')
    res = _lib_lvgl.lib.lv_meter_add_scale_lines(  # NOQA
        obj,
        color_start,
        color_end,
        local,
        width_mod
    )
    return _get_py_obj(res, 'meter_indicator_t')


def meter_set_indicator_value(
    obj: "obj_t",
    indic: "meter_indicator_t",
    value: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    indic = _get_c_obj(indic, 'meter_indicator_t')
    value = _get_c_obj(value, 'int32_t')
    res = _lib_lvgl.lib.lv_meter_set_indicator_value(  # NOQA
        obj,
        indic,
        value
    )
    return _get_py_obj(res, 'None')


def meter_set_indicator_start_value(
    obj: "obj_t",
    indic: "meter_indicator_t",
    value: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    indic = _get_c_obj(indic, 'meter_indicator_t')
    value = _get_c_obj(value, 'int32_t')
    res = _lib_lvgl.lib.lv_meter_set_indicator_start_value(  # NOQA
        obj,
        indic,
        value
    )
    return _get_py_obj(res, 'None')


def meter_set_indicator_end_value(
    obj: "obj_t",
    indic: "meter_indicator_t",
    value: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    indic = _get_c_obj(indic, 'meter_indicator_t')
    value = _get_c_obj(value, 'int32_t')
    res = _lib_lvgl.lib.lv_meter_set_indicator_end_value(  # NOQA
        obj,
        indic,
        value
    )
    return _get_py_obj(res, 'None')


def msgbox_create(
    parent: "obj_t",
    title: "char",
    txt: "char",
    btn_txts: List["char"],
    add_close_btn: "bool"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    title = _get_c_obj(title, 'char')
    txt = _get_c_obj(txt, 'char')
    btn_txts = _get_c_obj(btn_txts, 'List[char]')
    add_close_btn = _get_c_obj(add_close_btn, 'bool')
    res = _lib_lvgl.lib.lv_msgbox_create(  # NOQA
        parent,
        title,
        txt,
        btn_txts,
        add_close_btn
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_title(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_title(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_close_btn(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_close_btn(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_text(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_content(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_content(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_btns(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_btns(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def msgbox_get_active_btn(
    mbox: "obj_t"
) -> "uint16_t":

    mbox = _get_c_obj(mbox, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_active_btn(  # NOQA
        mbox
    )
    return _get_py_obj(res, 'uint16_t')


def msgbox_get_active_btn_text(
    mbox: "obj_t"
) -> "char":

    mbox = _get_c_obj(mbox, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_get_active_btn_text(  # NOQA
        mbox
    )
    return _get_py_obj(res, 'char')


def msgbox_close(
    mbox: "obj_t"
) -> None:

    mbox = _get_c_obj(mbox, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_close(  # NOQA
        mbox
    )
    return _get_py_obj(res, 'None')


def msgbox_close_async(
    mbox: "obj_t"
) -> None:

    mbox = _get_c_obj(mbox, 'obj_t')
    res = _lib_lvgl.lib.lv_msgbox_close_async(  # NOQA
        mbox
    )
    return _get_py_obj(res, 'None')


def roller_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_roller_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def roller_set_options(
    obj: "obj_t",
    options: "char",
    mode: "roller_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    options = _get_c_obj(options, 'char')
    mode = _get_c_obj(mode, 'roller_mode_t')
    res = _lib_lvgl.lib.lv_roller_set_options(  # NOQA
        obj,
        options,
        mode
    )
    return _get_py_obj(res, 'None')


def roller_set_selected(
    obj: "obj_t",
    sel_opt: "uint16_t",
    anim: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    sel_opt = _get_c_obj(sel_opt, 'uint16_t')
    anim = _get_c_obj(anim, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_roller_set_selected(  # NOQA
        obj,
        sel_opt,
        anim
    )
    return _get_py_obj(res, 'None')


def roller_set_visible_row_count(
    obj: "obj_t",
    row_cnt: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row_cnt = _get_c_obj(row_cnt, 'uint8_t')
    res = _lib_lvgl.lib.lv_roller_set_visible_row_count(  # NOQA
        obj,
        row_cnt
    )
    return _get_py_obj(res, 'None')


def roller_get_selected(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_roller_get_selected(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def roller_get_selected_str(
    obj: "obj_t",
    buf: "char",
    buf_size: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    buf = _get_c_obj(buf, 'char')
    buf_size = _get_c_obj(buf_size, 'uint32_t')
    res = _lib_lvgl.lib.lv_roller_get_selected_str(  # NOQA
        obj,
        buf,
        buf_size
    )
    return _get_py_obj(res, 'None')


def roller_get_options(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_roller_get_options(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def roller_get_option_cnt(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_roller_get_option_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def slider_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def slider_set_value(
    obj: "obj_t",
    value: "int32_t",
    anim: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'int32_t')
    anim = _get_c_obj(anim, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_slider_set_value(  # NOQA
        obj,
        value,
        anim
    )
    return _get_py_obj(res, 'None')


def slider_set_left_value(
    obj: "obj_t",
    value: "int32_t",
    anim: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'int32_t')
    anim = _get_c_obj(anim, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_slider_set_left_value(  # NOQA
        obj,
        value,
        anim
    )
    return _get_py_obj(res, 'None')


def slider_set_range(
    obj: "obj_t",
    min: "int32_t",
    max: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    min = _get_c_obj(min, 'int32_t')
    max = _get_c_obj(max, 'int32_t')
    res = _lib_lvgl.lib.lv_slider_set_range(  # NOQA
        obj,
        min,
        max
    )
    return _get_py_obj(res, 'None')


def slider_set_mode(
    obj: "obj_t",
    mode: "slider_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'slider_mode_t')
    res = _lib_lvgl.lib.lv_slider_set_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def slider_get_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_get_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def slider_get_left_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_get_left_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def slider_get_min_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_get_min_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def slider_get_max_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_get_max_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def slider_is_dragged(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_is_dragged(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def slider_get_mode(
    slider: "obj_t"
) -> "slider_mode_t":

    slider = _get_c_obj(slider, 'obj_t')
    res = _lib_lvgl.lib.lv_slider_get_mode(  # NOQA
        slider
    )
    return _get_py_obj(res, 'slider_mode_t')


def spangroup_create(
    par: "obj_t"
) -> "obj_t":

    par = _get_c_obj(par, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_create(  # NOQA
        par
    )
    return _get_py_obj(res, 'obj_t')


def spangroup_new_span(
    obj: "obj_t"
) -> "span_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_new_span(  # NOQA
        obj
    )
    return _get_py_obj(res, 'span_t')


def spangroup_del_span(
    obj: "obj_t",
    span: "span_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    span = _get_c_obj(span, 'span_t')
    res = _lib_lvgl.lib.lv_spangroup_del_span(  # NOQA
        obj,
        span
    )
    return _get_py_obj(res, 'None')


def span_set_text(
    span: "span_t",
    text: "char"
) -> None:

    span = _get_c_obj(span, 'span_t')
    text = _get_c_obj(text, 'char')
    res = _lib_lvgl.lib.lv_span_set_text(  # NOQA
        span,
        text
    )
    return _get_py_obj(res, 'None')


def span_set_text_static(
    span: "span_t",
    text: "char"
) -> None:

    span = _get_c_obj(span, 'span_t')
    text = _get_c_obj(text, 'char')
    res = _lib_lvgl.lib.lv_span_set_text_static(  # NOQA
        span,
        text
    )
    return _get_py_obj(res, 'None')


def spangroup_set_align(
    obj: "obj_t",
    align: "text_align_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    align = _get_c_obj(align, 'text_align_t')
    res = _lib_lvgl.lib.lv_spangroup_set_align(  # NOQA
        obj,
        align
    )
    return _get_py_obj(res, 'None')


def spangroup_set_overflow(
    obj: "obj_t",
    overflow: "span_overflow_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    overflow = _get_c_obj(overflow, 'span_overflow_t')
    res = _lib_lvgl.lib.lv_spangroup_set_overflow(  # NOQA
        obj,
        overflow
    )
    return _get_py_obj(res, 'None')


def spangroup_set_indent(
    obj: "obj_t",
    indent: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    indent = _get_c_obj(indent, 'coord_t')
    res = _lib_lvgl.lib.lv_spangroup_set_indent(  # NOQA
        obj,
        indent
    )
    return _get_py_obj(res, 'None')


def spangroup_set_mode(
    obj: "obj_t",
    mode: "span_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'span_mode_t')
    res = _lib_lvgl.lib.lv_spangroup_set_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def spangroup_set_lines(
    obj: "obj_t",
    lines: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    lines = _get_c_obj(lines, 'int32_t')
    res = _lib_lvgl.lib.lv_spangroup_set_lines(  # NOQA
        obj,
        lines
    )
    return _get_py_obj(res, 'None')


def spangroup_get_child(
    obj: "obj_t",
    id: "int32_t"
) -> "span_t":

    obj = _get_c_obj(obj, 'obj_t')
    id = _get_c_obj(id, 'int32_t')
    res = _lib_lvgl.lib.lv_spangroup_get_child(  # NOQA
        obj,
        id
    )
    return _get_py_obj(res, 'span_t')


def spangroup_get_child_cnt(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_child_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def spangroup_get_align(
    obj: "obj_t"
) -> "text_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_align(  # NOQA
        obj
    )
    return _get_py_obj(res, 'text_align_t')


def spangroup_get_overflow(
    obj: "obj_t"
) -> "span_overflow_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_overflow(  # NOQA
        obj
    )
    return _get_py_obj(res, 'span_overflow_t')


def spangroup_get_indent(
    obj: "obj_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_indent(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def spangroup_get_mode(
    obj: "obj_t"
) -> "span_mode_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'span_mode_t')


def spangroup_get_lines(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_lines(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def spangroup_get_max_line_h(
    obj: "obj_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_get_max_line_h(  # NOQA
        obj
    )
    return _get_py_obj(res, 'coord_t')


def spangroup_get_expand_width(
    obj: "obj_t",
    max_width: "uint32_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    max_width = _get_c_obj(max_width, 'uint32_t')
    res = _lib_lvgl.lib.lv_spangroup_get_expand_width(  # NOQA
        obj,
        max_width
    )
    return _get_py_obj(res, 'uint32_t')


def spangroup_get_expand_height(
    obj: "obj_t",
    width: "coord_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    width = _get_c_obj(width, 'coord_t')
    res = _lib_lvgl.lib.lv_spangroup_get_expand_height(  # NOQA
        obj,
        width
    )
    return _get_py_obj(res, 'coord_t')


def spangroup_refr_mode(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spangroup_refr_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def textarea_add_char(
    obj: "obj_t",
    c: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    c = _get_c_obj(c, 'uint32_t')
    res = _lib_lvgl.lib.lv_textarea_add_char(  # NOQA
        obj,
        c
    )
    return _get_py_obj(res, 'None')


def textarea_add_text(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_textarea_add_text(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def textarea_del_char(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_del_char(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_del_char_forward(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_del_char_forward(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_set_text(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_textarea_set_text(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def textarea_set_placeholder_text(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_textarea_set_placeholder_text(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def textarea_set_cursor_pos(
    obj: "obj_t",
    pos: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    pos = _get_c_obj(pos, 'int32_t')
    res = _lib_lvgl.lib.lv_textarea_set_cursor_pos(  # NOQA
        obj,
        pos
    )
    return _get_py_obj(res, 'None')


def textarea_set_cursor_click_pos(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_textarea_set_cursor_click_pos(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def textarea_set_password_mode(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_textarea_set_password_mode(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def textarea_set_password_bullet(
    obj: "obj_t",
    bullet: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    bullet = _get_c_obj(bullet, 'char')
    res = _lib_lvgl.lib.lv_textarea_set_password_bullet(  # NOQA
        obj,
        bullet
    )
    return _get_py_obj(res, 'None')


def textarea_set_one_line(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_textarea_set_one_line(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def textarea_set_accepted_chars(
    obj: "obj_t",
    list: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    list = _get_c_obj(list, 'char')
    res = _lib_lvgl.lib.lv_textarea_set_accepted_chars(  # NOQA
        obj,
        list
    )
    return _get_py_obj(res, 'None')


def textarea_set_max_length(
    obj: "obj_t",
    num: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    num = _get_c_obj(num, 'uint32_t')
    res = _lib_lvgl.lib.lv_textarea_set_max_length(  # NOQA
        obj,
        num
    )
    return _get_py_obj(res, 'None')


def textarea_set_insert_replace(
    obj: "obj_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_textarea_set_insert_replace(  # NOQA
        obj,
        txt
    )
    return _get_py_obj(res, 'None')


def textarea_set_text_selection(
    obj: "obj_t",
    en: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    en = _get_c_obj(en, 'bool')
    res = _lib_lvgl.lib.lv_textarea_set_text_selection(  # NOQA
        obj,
        en
    )
    return _get_py_obj(res, 'None')


def textarea_set_password_show_time(
    obj: "obj_t",
    time: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    time = _get_c_obj(time, 'uint16_t')
    res = _lib_lvgl.lib.lv_textarea_set_password_show_time(  # NOQA
        obj,
        time
    )
    return _get_py_obj(res, 'None')


def textarea_set_align(
    obj: "obj_t",
    align: "text_align_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    align = _get_c_obj(align, 'text_align_t')
    res = _lib_lvgl.lib.lv_textarea_set_align(  # NOQA
        obj,
        align
    )
    return _get_py_obj(res, 'None')


def textarea_get_text(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def textarea_get_placeholder_text(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_placeholder_text(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def textarea_get_label(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_label(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def textarea_get_cursor_pos(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_cursor_pos(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def textarea_get_cursor_click_pos(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_cursor_click_pos(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def textarea_get_password_mode(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_password_mode(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def textarea_get_password_bullet(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_password_bullet(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def textarea_get_one_line(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_one_line(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def textarea_get_accepted_chars(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_accepted_chars(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def textarea_get_max_length(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_max_length(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def textarea_text_is_selected(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_text_is_selected(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def textarea_get_text_selection(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_text_selection(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def textarea_get_password_show_time(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_password_show_time(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def textarea_get_current_char(
    obj: "obj_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_get_current_char(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def textarea_clear_selection(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_clear_selection(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_cursor_right(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_cursor_right(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_cursor_left(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_cursor_left(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_cursor_down(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_cursor_down(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def textarea_cursor_up(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_textarea_cursor_up(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def spinbox_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def spinbox_set_value(
    obj: "obj_t",
    i: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    i = _get_c_obj(i, 'int32_t')
    res = _lib_lvgl.lib.lv_spinbox_set_value(  # NOQA
        obj,
        i
    )
    return _get_py_obj(res, 'None')


def spinbox_set_rollover(
    obj: "obj_t",
    b: "bool"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    b = _get_c_obj(b, 'bool')
    res = _lib_lvgl.lib.lv_spinbox_set_rollover(  # NOQA
        obj,
        b
    )
    return _get_py_obj(res, 'None')


def spinbox_set_digit_format(
    obj: "obj_t",
    digit_count: "uint8_t",
    separator_position: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    digit_count = _get_c_obj(digit_count, 'uint8_t')
    separator_position = _get_c_obj(separator_position, 'uint8_t')
    res = _lib_lvgl.lib.lv_spinbox_set_digit_format(  # NOQA
        obj,
        digit_count,
        separator_position
    )
    return _get_py_obj(res, 'None')


def spinbox_set_step(
    obj: "obj_t",
    step: "uint32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    step = _get_c_obj(step, 'uint32_t')
    res = _lib_lvgl.lib.lv_spinbox_set_step(  # NOQA
        obj,
        step
    )
    return _get_py_obj(res, 'None')


def spinbox_set_range(
    obj: "obj_t",
    range_min: "int32_t",
    range_max: "int32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    range_min = _get_c_obj(range_min, 'int32_t')
    range_max = _get_c_obj(range_max, 'int32_t')
    res = _lib_lvgl.lib.lv_spinbox_set_range(  # NOQA
        obj,
        range_min,
        range_max
    )
    return _get_py_obj(res, 'None')


def spinbox_set_cursor_pos(
    obj: "obj_t",
    pos: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    pos = _get_c_obj(pos, 'uint8_t')
    res = _lib_lvgl.lib.lv_spinbox_set_cursor_pos(  # NOQA
        obj,
        pos
    )
    return _get_py_obj(res, 'None')


def spinbox_set_digit_step_direction(
    obj: "obj_t",
    direction: "dir_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    direction = _get_c_obj(direction, 'dir_t')
    res = _lib_lvgl.lib.lv_spinbox_set_digit_step_direction(  # NOQA
        obj,
        direction
    )
    return _get_py_obj(res, 'None')


def spinbox_get_rollover(
    obj: "obj_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_get_rollover(  # NOQA
        obj
    )
    return _get_py_obj(res, 'bool')


def spinbox_get_value(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_get_value(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def spinbox_get_step(
    obj: "obj_t"
) -> "int32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_get_step(  # NOQA
        obj
    )
    return _get_py_obj(res, 'int32_t')


def spinbox_step_next(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_step_next(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def spinbox_step_prev(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_step_prev(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def spinbox_increment(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_increment(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def spinbox_decrement(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_spinbox_decrement(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def spinner_create(
    parent: "obj_t",
    time: "uint32_t",
    arc_length: "uint32_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    time = _get_c_obj(time, 'uint32_t')
    arc_length = _get_c_obj(arc_length, 'uint32_t')
    res = _lib_lvgl.lib.lv_spinner_create(  # NOQA
        parent,
        time,
        arc_length
    )
    return _get_py_obj(res, 'obj_t')


def switch_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_switch_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def table_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_table_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def table_set_cell_value(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t",
    txt: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_table_set_cell_value(  # NOQA
        obj,
        row,
        col,
        txt
    )
    return _get_py_obj(res, 'None')


def table_set_cell_value_fmt(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t",
    fmt: "char",
    *args
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    fmt = _get_c_obj(fmt, 'char')

    args = list(args)
    for i, arg in enumerate(args):
        args[i] = _get_c_obj(arg, None)
    
    res = _lib_lvgl.lib.lv_table_set_cell_value_fmt(  # NOQA
        obj,
        row,
        col,
        fmt,
        *args
    )
    return _get_py_obj(res, 'None')


def table_set_row_cnt(
    obj: "obj_t",
    row_cnt: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row_cnt = _get_c_obj(row_cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_table_set_row_cnt(  # NOQA
        obj,
        row_cnt
    )
    return _get_py_obj(res, 'None')


def table_set_col_cnt(
    obj: "obj_t",
    col_cnt: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    col_cnt = _get_c_obj(col_cnt, 'uint16_t')
    res = _lib_lvgl.lib.lv_table_set_col_cnt(  # NOQA
        obj,
        col_cnt
    )
    return _get_py_obj(res, 'None')


def table_set_col_width(
    obj: "obj_t",
    col_id: "uint16_t",
    w: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    col_id = _get_c_obj(col_id, 'uint16_t')
    w = _get_c_obj(w, 'coord_t')
    res = _lib_lvgl.lib.lv_table_set_col_width(  # NOQA
        obj,
        col_id,
        w
    )
    return _get_py_obj(res, 'None')


def table_add_cell_ctrl(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t",
    ctrl: "table_cell_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'table_cell_ctrl_t')
    res = _lib_lvgl.lib.lv_table_add_cell_ctrl(  # NOQA
        obj,
        row,
        col,
        ctrl
    )
    return _get_py_obj(res, 'None')


def table_clear_cell_ctrl(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t",
    ctrl: "table_cell_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'table_cell_ctrl_t')
    res = _lib_lvgl.lib.lv_table_clear_cell_ctrl(  # NOQA
        obj,
        row,
        col,
        ctrl
    )
    return _get_py_obj(res, 'None')


def table_get_cell_value(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    res = _lib_lvgl.lib.lv_table_get_cell_value(  # NOQA
        obj,
        row,
        col
    )
    return _get_py_obj(res, 'char')


def table_get_row_cnt(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_table_get_row_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def table_get_col_cnt(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_table_get_col_cnt(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def table_get_col_width(
    obj: "obj_t",
    col: "uint16_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    col = _get_c_obj(col, 'uint16_t')
    res = _lib_lvgl.lib.lv_table_get_col_width(  # NOQA
        obj,
        col
    )
    return _get_py_obj(res, 'coord_t')


def table_has_cell_ctrl(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t",
    ctrl: "table_cell_ctrl_t"
) -> "bool":

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    ctrl = _get_c_obj(ctrl, 'table_cell_ctrl_t')
    res = _lib_lvgl.lib.lv_table_has_cell_ctrl(  # NOQA
        obj,
        row,
        col,
        ctrl
    )
    return _get_py_obj(res, 'bool')


def table_get_selected_cell(
    obj: "obj_t",
    row: "uint16_t",
    col: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    row = _get_c_obj(row, 'uint16_t')
    col = _get_c_obj(col, 'uint16_t')
    res = _lib_lvgl.lib.lv_table_get_selected_cell(  # NOQA
        obj,
        row,
        col
    )
    return _get_py_obj(res, 'None')


def tabview_create(
    parent: "obj_t",
    tab_pos: "dir_t",
    tab_size: "coord_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    tab_pos = _get_c_obj(tab_pos, 'dir_t')
    tab_size = _get_c_obj(tab_size, 'coord_t')
    res = _lib_lvgl.lib.lv_tabview_create(  # NOQA
        parent,
        tab_pos,
        tab_size
    )
    return _get_py_obj(res, 'obj_t')


def tabview_add_tab(
    tv: "obj_t",
    name: "char"
) -> "obj_t":

    tv = _get_c_obj(tv, 'obj_t')
    name = _get_c_obj(name, 'char')
    res = _lib_lvgl.lib.lv_tabview_add_tab(  # NOQA
        tv,
        name
    )
    return _get_py_obj(res, 'obj_t')


def tabview_rename_tab(
    obj: "obj_t",
    tab_id: "uint32_t",
    new_name: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    tab_id = _get_c_obj(tab_id, 'uint32_t')
    new_name = _get_c_obj(new_name, 'char')
    res = _lib_lvgl.lib.lv_tabview_rename_tab(  # NOQA
        obj,
        tab_id,
        new_name
    )
    return _get_py_obj(res, 'None')


def tabview_get_content(
    tv: "obj_t"
) -> "obj_t":

    tv = _get_c_obj(tv, 'obj_t')
    res = _lib_lvgl.lib.lv_tabview_get_content(  # NOQA
        tv
    )
    return _get_py_obj(res, 'obj_t')


def tabview_get_tab_btns(
    tv: "obj_t"
) -> "obj_t":

    tv = _get_c_obj(tv, 'obj_t')
    res = _lib_lvgl.lib.lv_tabview_get_tab_btns(  # NOQA
        tv
    )
    return _get_py_obj(res, 'obj_t')


def tabview_set_act(
    obj: "obj_t",
    id: "uint32_t",
    anim_en: "anim_enable_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    id = _get_c_obj(id, 'uint32_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_tabview_set_act(  # NOQA
        obj,
        id,
        anim_en
    )
    return _get_py_obj(res, 'None')


def tabview_get_tab_act(
    tv: "obj_t"
) -> "uint16_t":

    tv = _get_c_obj(tv, 'obj_t')
    res = _lib_lvgl.lib.lv_tabview_get_tab_act(  # NOQA
        tv
    )
    return _get_py_obj(res, 'uint16_t')


def tileview_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_tileview_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def tileview_add_tile(
    tv: "obj_t",
    col_id: "uint8_t",
    row_id: "uint8_t",
    dir: "dir_t"
) -> "obj_t":

    tv = _get_c_obj(tv, 'obj_t')
    col_id = _get_c_obj(col_id, 'uint8_t')
    row_id = _get_c_obj(row_id, 'uint8_t')
    dir = _get_c_obj(dir, 'dir_t')
    res = _lib_lvgl.lib.lv_tileview_add_tile(  # NOQA
        tv,
        col_id,
        row_id,
        dir
    )
    return _get_py_obj(res, 'obj_t')


def obj_set_tile(
    tv: "obj_t",
    tile_obj: "obj_t",
    anim_en: "anim_enable_t"
) -> None:

    tv = _get_c_obj(tv, 'obj_t')
    tile_obj = _get_c_obj(tile_obj, 'obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_set_tile(  # NOQA
        tv,
        tile_obj,
        anim_en
    )
    return _get_py_obj(res, 'None')


def obj_set_tile_id(
    tv: "obj_t",
    col_id: "uint32_t",
    row_id: "uint32_t",
    anim_en: "anim_enable_t"
) -> None:

    tv = _get_c_obj(tv, 'obj_t')
    col_id = _get_c_obj(col_id, 'uint32_t')
    row_id = _get_c_obj(row_id, 'uint32_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_obj_set_tile_id(  # NOQA
        tv,
        col_id,
        row_id,
        anim_en
    )
    return _get_py_obj(res, 'None')


def tileview_get_tile_act(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_tileview_get_tile_act(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def win_create(
    parent: "obj_t",
    header_height: "coord_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    header_height = _get_c_obj(header_height, 'coord_t')
    res = _lib_lvgl.lib.lv_win_create(  # NOQA
        parent,
        header_height
    )
    return _get_py_obj(res, 'obj_t')


def win_add_title(
    win: "obj_t",
    txt: "char"
) -> "obj_t":

    win = _get_c_obj(win, 'obj_t')
    txt = _get_c_obj(txt, 'char')
    res = _lib_lvgl.lib.lv_win_add_title(  # NOQA
        win,
        txt
    )
    return _get_py_obj(res, 'obj_t')


def win_add_btn(
    win: "obj_t",
    icon: None,
    btn_w: "coord_t"
) -> "obj_t":

    win = _get_c_obj(win, 'obj_t')
    icon = _get_c_obj(icon, 'None')
    btn_w = _get_c_obj(btn_w, 'coord_t')
    res = _lib_lvgl.lib.lv_win_add_btn(  # NOQA
        win,
        icon,
        btn_w
    )
    return _get_py_obj(res, 'obj_t')


def win_get_header(
    win: "obj_t"
) -> "obj_t":

    win = _get_c_obj(win, 'obj_t')
    res = _lib_lvgl.lib.lv_win_get_header(  # NOQA
        win
    )
    return _get_py_obj(res, 'obj_t')


def win_get_content(
    win: "obj_t"
) -> "obj_t":

    win = _get_c_obj(win, 'obj_t')
    res = _lib_lvgl.lib.lv_win_get_content(  # NOQA
        win
    )
    return _get_py_obj(res, 'obj_t')


def snapshot_take(
    obj: "obj_t",
    cf: "color_format_t"
) -> "img_dsc_t":

    obj = _get_c_obj(obj, 'obj_t')
    cf = _get_c_obj(cf, 'color_format_t')
    res = _lib_lvgl.lib.lv_snapshot_take(  # NOQA
        obj,
        cf
    )
    return _get_py_obj(res, 'img_dsc_t')


def snapshot_free(
    dsc: "img_dsc_t"
) -> None:

    dsc = _get_c_obj(dsc, 'img_dsc_t')
    res = _lib_lvgl.lib.lv_snapshot_free(  # NOQA
        dsc
    )
    return _get_py_obj(res, 'None')


def snapshot_buf_size_needed(
    obj: "obj_t",
    cf: "color_format_t"
) -> "uint32_t":

    obj = _get_c_obj(obj, 'obj_t')
    cf = _get_c_obj(cf, 'color_format_t')
    res = _lib_lvgl.lib.lv_snapshot_buf_size_needed(  # NOQA
        obj,
        cf
    )
    return _get_py_obj(res, 'uint32_t')


def snapshot_take_to_buf(
    obj: "obj_t",
    cf: "color_format_t",
    dsc: "img_dsc_t",
    buf: None,
    buff_size: "uint32_t"
) -> "res_t":

    obj = _get_c_obj(obj, 'obj_t')
    cf = _get_c_obj(cf, 'color_format_t')
    dsc = _get_c_obj(dsc, 'img_dsc_t')
    buf = _get_c_obj(buf, 'None')
    buff_size = _get_c_obj(buff_size, 'uint32_t')
    res = _lib_lvgl.lib.lv_snapshot_take_to_buf(  # NOQA
        obj,
        cf,
        dsc,
        buf,
        buff_size
    )
    return _get_py_obj(res, 'res_t')


def gridnav_add(
    obj: "obj_t",
    ctrl: "gridnav_ctrl_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    ctrl = _get_c_obj(ctrl, 'gridnav_ctrl_t')
    res = _lib_lvgl.lib.lv_gridnav_add(  # NOQA
        obj,
        ctrl
    )
    return _get_py_obj(res, 'None')


def gridnav_remove(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_gridnav_remove(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def gridnav_set_focused(
    cont: "obj_t",
    to_focus: "obj_t",
    anim_en: "anim_enable_t"
) -> None:

    cont = _get_c_obj(cont, 'obj_t')
    to_focus = _get_c_obj(to_focus, 'obj_t')
    anim_en = _get_c_obj(anim_en, 'anim_enable_t')
    res = _lib_lvgl.lib.lv_gridnav_set_focused(  # NOQA
        cont,
        to_focus,
        anim_en
    )
    return _get_py_obj(res, 'None')


def imgfont_create(
    height: "uint16_t",
    path_cb: "imgfont_get_path_cb_t",
    user_data: Any
) -> "font_t":
    cb_store = _global_cb_store
    if 'imgfont_get_path_cb_t.lv_imgfont_create' in cb_store:
        store = cb_store['imgfont_get_path_cb_t.lv_imgfont_create']
        if path_cb in store:
            del store[path_cb]
    else:
        store = _CBStore()
        cb_store['imgfont_get_path_cb_t.lv_imgfont_create'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_imgfont_get_path_cb_t')
    store[path_cb] = cb_store_handle
    store['imgfont_get_path_cb_t'] = path_cb
    store['imgfont_get_path_cb_t.c_func'] = c_func

    cb_store['imgfont_get_path_cb_t.lv_imgfont_create'] = store
    path_cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    height = _get_c_obj(height, 'uint16_t')
    res = _lib_lvgl.lib.lv_imgfont_create(  # NOQA
        height,
        path_cb,
        user_data
    )
    return _get_py_obj(res, 'font_t')


def imgfont_destroy(
    font: "font_t"
) -> None:

    font = _get_c_obj(font, 'font_t')
    res = _lib_lvgl.lib.lv_imgfont_destroy(  # NOQA
        font
    )
    return _get_py_obj(res, 'None')


def msg_init() -> None:

    res = _lib_lvgl.lib.lv_msg_init()  # NOQA
    return _get_py_obj(res, 'None')


def msg_subscribe(
    msg_id: "msg_id_t",
    cb: "msg_subscribe_cb_t",
    user_data: Any
) -> Any:
    cb_store = _global_cb_store
    if 'msg_subscribe_cb_t.lv_msg_subscribe' in cb_store:
        store = cb_store['msg_subscribe_cb_t.lv_msg_subscribe']
        if cb in store:
            del store[cb]
    else:
        store = _CBStore()
        cb_store['msg_subscribe_cb_t.lv_msg_subscribe'] = store

    cb_store_handle = _lib_lvgl.ffi.new_handle(store)    
    c_func = getattr(_lib_lvgl.lib, 'py_lv_msg_subscribe_cb_t')
    store[cb] = cb_store_handle
    store['msg_subscribe_cb_t'] = cb
    store['msg_subscribe_cb_t.c_func'] = c_func

    cb_store['msg_subscribe_cb_t.lv_msg_subscribe'] = store
    cb = c_func
    
    cb_store['user_data'] = user_data
    user_data = cb_store_handle


    msg_id = _get_c_obj(msg_id, 'msg_id_t')
    res = _lib_lvgl.lib.lv_msg_subscribe(  # NOQA
        msg_id,
        cb,
        user_data
    )
    return _get_py_obj(res, 'void')


def msg_subscribe_obj(
    msg_id: "msg_id_t",
    obj: "obj_t",
    user_data: Any
) -> Any:

    msg_id = _get_c_obj(msg_id, 'msg_id_t')
    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_msg_subscribe_obj(  # NOQA
        msg_id,
        obj,
        user_data
    )
    return _get_py_obj(res, 'void')


def msg_unsubscribe(
    s: None
) -> None:

    s = _get_c_obj(s, 'None')
    res = _lib_lvgl.lib.lv_msg_unsubscribe(  # NOQA
        s
    )
    return _get_py_obj(res, 'None')


def msg_send(
    msg_id: "msg_id_t",
    payload: None
) -> None:

    msg_id = _get_c_obj(msg_id, 'msg_id_t')
    payload = _get_c_obj(payload, 'None')
    res = _lib_lvgl.lib.lv_msg_send(  # NOQA
        msg_id,
        payload
    )
    return _get_py_obj(res, 'None')


def msg_update_value(
    v: None
) -> None:

    v = _get_c_obj(v, 'None')
    res = _lib_lvgl.lib.lv_msg_update_value(  # NOQA
        v
    )
    return _get_py_obj(res, 'None')


def msg_get_id(
    m: "msg_t"
) -> "msg_id_t":

    m = _get_c_obj(m, 'msg_t')
    res = _lib_lvgl.lib.lv_msg_get_id(  # NOQA
        m
    )
    return _get_py_obj(res, 'msg_id_t')


def msg_get_payload(
    m: "msg_t"
) -> Any:

    m = _get_c_obj(m, 'msg_t')
    res = _lib_lvgl.lib.lv_msg_get_payload(  # NOQA
        m
    )
    return _get_py_obj(res, 'void')


def msg_get_user_data(
    m: "msg_t"
) -> Any:

    m = _get_c_obj(m, 'msg_t')
    res = _lib_lvgl.lib.lv_msg_get_user_data(  # NOQA
        m
    )
    return _get_py_obj(res, 'void')


def event_get_msg(
    e: "event_t"
) -> "msg_t":

    e = _get_c_obj(e, 'event_t')
    res = _lib_lvgl.lib.lv_event_get_msg(  # NOQA
        e
    )
    return _get_py_obj(res, 'msg_t')


def ime_pinyin_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def ime_pinyin_set_keyboard(
    obj: "obj_t",
    kb: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    kb = _get_c_obj(kb, 'obj_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_set_keyboard(  # NOQA
        obj,
        kb
    )
    return _get_py_obj(res, 'None')


def ime_pinyin_set_dict(
    obj: "obj_t",
    dict: "pinyin_dict_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    dict = _get_c_obj(dict, 'pinyin_dict_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_set_dict(  # NOQA
        obj,
        dict
    )
    return _get_py_obj(res, 'None')


def ime_pinyin_set_mode(
    obj: "obj_t",
    mode: "ime_pinyin_mode_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    mode = _get_c_obj(mode, 'ime_pinyin_mode_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_set_mode(  # NOQA
        obj,
        mode
    )
    return _get_py_obj(res, 'None')


def ime_pinyin_get_kb(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_get_kb(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def ime_pinyin_get_cand_panel(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_get_cand_panel(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def ime_pinyin_get_dict(
    obj: "obj_t"
) -> "pinyin_dict_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_ime_pinyin_get_dict(  # NOQA
        obj
    )
    return _get_py_obj(res, 'pinyin_dict_t')


def file_explorer_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_set_quick_access_path(
    obj: "obj_t",
    dir: "file_explorer_dir_t",
    path: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    dir = _get_c_obj(dir, 'file_explorer_dir_t')
    path = _get_c_obj(path, 'char')
    res = _lib_lvgl.lib.lv_file_explorer_set_quick_access_path(  # NOQA
        obj,
        dir,
        path
    )
    return _get_py_obj(res, 'None')


def file_explorer_set_sort(
    obj: "obj_t",
    sort: "file_explorer_sort_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    sort = _get_c_obj(sort, 'file_explorer_sort_t')
    res = _lib_lvgl.lib.lv_file_explorer_set_sort(  # NOQA
        obj,
        sort
    )
    return _get_py_obj(res, 'None')


def file_explorer_get_selected_file_name(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_selected_file_name(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def file_explorer_get_current_path(
    obj: "obj_t"
) -> "char":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_current_path(  # NOQA
        obj
    )
    return _get_py_obj(res, 'char')


def file_explorer_get_header(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_header(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_quick_access_area(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_quick_access_area(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_path_label(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_path_label(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_places_list(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_places_list(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_device_list(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_device_list(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_file_table(
    obj: "obj_t"
) -> "obj_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_file_table(  # NOQA
        obj
    )
    return _get_py_obj(res, 'obj_t')


def file_explorer_get_sort(
    obj: "obj_t"
) -> "file_explorer_sort_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_file_explorer_get_sort(  # NOQA
        obj
    )
    return _get_py_obj(res, 'file_explorer_sort_t')


def file_explorer_open_dir(
    obj: "obj_t",
    dir: "char"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    dir = _get_c_obj(dir, 'char')
    res = _lib_lvgl.lib.lv_file_explorer_open_dir(  # NOQA
        obj,
        dir
    )
    return _get_py_obj(res, 'None')


def barcode_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_barcode_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def barcode_set_dark_color(
    obj: "obj_t",
    color: "color32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color32_t')
    res = _lib_lvgl.lib.lv_barcode_set_dark_color(  # NOQA
        obj,
        color
    )
    return _get_py_obj(res, 'None')


def barcode_set_light_color(
    obj: "obj_t",
    color: "color32_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color32_t')
    res = _lib_lvgl.lib.lv_barcode_set_light_color(  # NOQA
        obj,
        color
    )
    return _get_py_obj(res, 'None')


def barcode_set_scale(
    obj: "obj_t",
    scale: "uint16_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    scale = _get_c_obj(scale, 'uint16_t')
    res = _lib_lvgl.lib.lv_barcode_set_scale(  # NOQA
        obj,
        scale
    )
    return _get_py_obj(res, 'None')


def barcode_update(
    obj: "obj_t",
    data: "char"
) -> "res_t":

    obj = _get_c_obj(obj, 'obj_t')
    data = _get_c_obj(data, 'char')
    res = _lib_lvgl.lib.lv_barcode_update(  # NOQA
        obj,
        data
    )
    return _get_py_obj(res, 'res_t')


def barcode_get_dark_color(
    obj: "obj_t"
) -> "color32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_barcode_get_dark_color(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color32_t')


def barcode_get_light_color(
    obj: "obj_t"
) -> "color32_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_barcode_get_light_color(  # NOQA
        obj
    )
    return _get_py_obj(res, 'color32_t')


def barcode_get_scale(
    obj: "obj_t"
) -> "uint16_t":

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_barcode_get_scale(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint16_t')


def bmp_init() -> None:

    res = _lib_lvgl.lib.lv_bmp_init()  # NOQA
    return _get_py_obj(res, 'None')


def png_init() -> None:

    res = _lib_lvgl.lib.lv_png_init()  # NOQA
    return _get_py_obj(res, 'None')


def gd_open_gif_file(
    fname: "char"
) -> "gd_GIF":

    fname = _get_c_obj(fname, 'char')
    res = _lib_lvgl.lib.gd_open_gif_file(  # NOQA
        fname
    )
    return _get_py_obj(res, 'gd_GIF')


def gd_open_gif_data(
    data: None
) -> "gd_GIF":

    data = _get_c_obj(data, 'None')
    res = _lib_lvgl.lib.gd_open_gif_data(  # NOQA
        data
    )
    return _get_py_obj(res, 'gd_GIF')


def gd_render_frame(
    gif: "gd_GIF",
    buffer: "uint8_t"
) -> None:

    gif = _get_c_obj(gif, 'gd_GIF')
    buffer = _get_c_obj(buffer, 'uint8_t')
    res = _lib_lvgl.lib.gd_render_frame(  # NOQA
        gif,
        buffer
    )
    return _get_py_obj(res, 'None')


def gd_get_frame(
    gif: "gd_GIF"
) -> int_:

    gif = _get_c_obj(gif, 'gd_GIF')
    res = _lib_lvgl.lib.gd_get_frame(  # NOQA
        gif
    )
    return _get_py_obj(res, 'int_')


def gd_rewind(
    gif: "gd_GIF"
) -> None:

    gif = _get_c_obj(gif, 'gd_GIF')
    res = _lib_lvgl.lib.gd_rewind(  # NOQA
        gif
    )
    return _get_py_obj(res, 'None')


def gd_close_gif(
    gif: "gd_GIF"
) -> None:

    gif = _get_c_obj(gif, 'gd_GIF')
    res = _lib_lvgl.lib.gd_close_gif(  # NOQA
        gif
    )
    return _get_py_obj(res, 'None')


def gif_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_gif_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def gif_set_src(
    obj: "obj_t",
    src: None
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    src = _get_c_obj(src, 'None')
    res = _lib_lvgl.lib.lv_gif_set_src(  # NOQA
        obj,
        src
    )
    return _get_py_obj(res, 'None')


def gif_restart(
    gif: "obj_t"
) -> None:

    gif = _get_c_obj(gif, 'obj_t')
    res = _lib_lvgl.lib.lv_gif_restart(  # NOQA
        gif
    )
    return _get_py_obj(res, 'None')


def qrcode_create(
    parent: "obj_t"
) -> "obj_t":

    parent = _get_c_obj(parent, 'obj_t')
    res = _lib_lvgl.lib.lv_qrcode_create(  # NOQA
        parent
    )
    return _get_py_obj(res, 'obj_t')


def qrcode_set_size(
    obj: "obj_t",
    size: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    size = _get_c_obj(size, 'coord_t')
    res = _lib_lvgl.lib.lv_qrcode_set_size(  # NOQA
        obj,
        size
    )
    return _get_py_obj(res, 'None')


def qrcode_set_dark_color(
    obj: "obj_t",
    color: "color_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_qrcode_set_dark_color(  # NOQA
        obj,
        color
    )
    return _get_py_obj(res, 'None')


def qrcode_set_light_color(
    obj: "obj_t",
    color: "color_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    color = _get_c_obj(color, 'color_t')
    res = _lib_lvgl.lib.lv_qrcode_set_light_color(  # NOQA
        obj,
        color
    )
    return _get_py_obj(res, 'None')


def qrcode_update(
    obj: "obj_t",
    data: None,
    data_len: "uint32_t"
) -> "res_t":

    obj = _get_c_obj(obj, 'obj_t')
    data = _get_c_obj(data, 'None')
    data_len = _get_c_obj(data_len, 'uint32_t')
    res = _lib_lvgl.lib.lv_qrcode_update(  # NOQA
        obj,
        data,
        data_len
    )
    return _get_py_obj(res, 'res_t')


def split_jpeg_init() -> None:

    res = _lib_lvgl.lib.lv_split_jpeg_init()  # NOQA
    return _get_py_obj(res, 'None')


def tiny_ttf_create_file(
    path: "char",
    line_height: "coord_t"
) -> "font_t":

    path = _get_c_obj(path, 'char')
    line_height = _get_c_obj(line_height, 'coord_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_create_file(  # NOQA
        path,
        line_height
    )
    return _get_py_obj(res, 'font_t')


def tiny_ttf_create_file_ex(
    path: "char",
    line_height: "coord_t",
    cache_size: "size_t"
) -> "font_t":

    path = _get_c_obj(path, 'char')
    line_height = _get_c_obj(line_height, 'coord_t')
    cache_size = _get_c_obj(cache_size, 'size_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_create_file_ex(  # NOQA
        path,
        line_height,
        cache_size
    )
    return _get_py_obj(res, 'font_t')


def tiny_ttf_create_data(
    data: None,
    data_size: "size_t",
    line_height: "coord_t"
) -> "font_t":

    data = _get_c_obj(data, 'None')
    data_size = _get_c_obj(data_size, 'size_t')
    line_height = _get_c_obj(line_height, 'coord_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_create_data(  # NOQA
        data,
        data_size,
        line_height
    )
    return _get_py_obj(res, 'font_t')


def tiny_ttf_create_data_ex(
    data: None,
    data_size: "size_t",
    line_height: "coord_t",
    cache_size: "size_t"
) -> "font_t":

    data = _get_c_obj(data, 'None')
    data_size = _get_c_obj(data_size, 'size_t')
    line_height = _get_c_obj(line_height, 'coord_t')
    cache_size = _get_c_obj(cache_size, 'size_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_create_data_ex(  # NOQA
        data,
        data_size,
        line_height,
        cache_size
    )
    return _get_py_obj(res, 'font_t')


def tiny_ttf_set_size(
    font: "font_t",
    line_height: "coord_t"
) -> None:

    font = _get_c_obj(font, 'font_t')
    line_height = _get_c_obj(line_height, 'coord_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_set_size(  # NOQA
        font,
        line_height
    )
    return _get_py_obj(res, 'None')


def tiny_ttf_destroy(
    font: "font_t"
) -> None:

    font = _get_c_obj(font, 'font_t')
    res = _lib_lvgl.lib.lv_tiny_ttf_destroy(  # NOQA
        font
    )
    return _get_py_obj(res, 'None')


def flex_init() -> None:

    res = _lib_lvgl.lib.lv_flex_init()  # NOQA
    return _get_py_obj(res, 'None')


def obj_set_flex_flow(
    obj: "obj_t",
    flow: "flex_flow_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    flow = _get_c_obj(flow, 'flex_flow_t')
    res = _lib_lvgl.lib.lv_obj_set_flex_flow(  # NOQA
        obj,
        flow
    )
    return _get_py_obj(res, 'None')


def obj_set_flex_align(
    obj: "obj_t",
    main_place: "flex_align_t",
    cross_place: "flex_align_t",
    track_cross_place: "flex_align_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    main_place = _get_c_obj(main_place, 'flex_align_t')
    cross_place = _get_c_obj(cross_place, 'flex_align_t')
    track_cross_place = _get_c_obj(track_cross_place, 'flex_align_t')
    res = _lib_lvgl.lib.lv_obj_set_flex_align(  # NOQA
        obj,
        main_place,
        cross_place,
        track_cross_place
    )
    return _get_py_obj(res, 'None')


def obj_set_flex_grow(
    obj: "obj_t",
    grow: "uint8_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    grow = _get_c_obj(grow, 'uint8_t')
    res = _lib_lvgl.lib.lv_obj_set_flex_grow(  # NOQA
        obj,
        grow
    )
    return _get_py_obj(res, 'None')


def style_set_flex_flow(
    style: "style_t",
    value: "flex_flow_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'flex_flow_t')
    res = _lib_lvgl.lib.lv_style_set_flex_flow(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_flex_main_place(
    style: "style_t",
    value: "flex_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'flex_align_t')
    res = _lib_lvgl.lib.lv_style_set_flex_main_place(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_flex_cross_place(
    style: "style_t",
    value: "flex_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'flex_align_t')
    res = _lib_lvgl.lib.lv_style_set_flex_cross_place(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_flex_track_place(
    style: "style_t",
    value: "flex_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'flex_align_t')
    res = _lib_lvgl.lib.lv_style_set_flex_track_place(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_flex_grow(
    style: "style_t",
    value: "uint8_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'uint8_t')
    res = _lib_lvgl.lib.lv_style_set_flex_grow(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def obj_set_style_flex_flow(
    obj: "obj_t",
    value: "flex_flow_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'flex_flow_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_flex_flow(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_flex_main_place(
    obj: "obj_t",
    value: "flex_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'flex_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_flex_main_place(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_flex_cross_place(
    obj: "obj_t",
    value: "flex_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'flex_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_flex_cross_place(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_flex_track_place(
    obj: "obj_t",
    value: "flex_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'flex_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_flex_track_place(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_flex_grow(
    obj: "obj_t",
    value: "uint8_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'uint8_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_flex_grow(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_get_style_flex_flow(
    obj: "obj_t",
    part: "uint32_t"
) -> "flex_flow_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_flex_flow(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'flex_flow_t')


def obj_get_style_flex_main_place(
    obj: "obj_t",
    part: "uint32_t"
) -> "flex_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_flex_main_place(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'flex_align_t')


def obj_get_style_flex_cross_place(
    obj: "obj_t",
    part: "uint32_t"
) -> "flex_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_flex_cross_place(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'flex_align_t')


def obj_get_style_flex_track_place(
    obj: "obj_t",
    part: "uint32_t"
) -> "flex_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_flex_track_place(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'flex_align_t')


def obj_get_style_flex_grow(
    obj: "obj_t",
    part: "uint32_t"
) -> "uint8_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_flex_grow(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'uint8_t')


def grid_init() -> None:

    res = _lib_lvgl.lib.lv_grid_init()  # NOQA
    return _get_py_obj(res, 'None')


def obj_set_grid_dsc_array(
    obj: "obj_t",
    col_dsc: List["coord_t"],
    row_dsc: List["coord_t"]
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    col_dsc = _get_c_obj(col_dsc, 'List[coord_t]')
    row_dsc = _get_c_obj(row_dsc, 'List[coord_t]')
    res = _lib_lvgl.lib.lv_obj_set_grid_dsc_array(  # NOQA
        obj,
        col_dsc,
        row_dsc
    )
    return _get_py_obj(res, 'None')


def obj_set_grid_align(
    obj: "obj_t",
    column_align: "grid_align_t",
    row_align: "grid_align_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    column_align = _get_c_obj(column_align, 'grid_align_t')
    row_align = _get_c_obj(row_align, 'grid_align_t')
    res = _lib_lvgl.lib.lv_obj_set_grid_align(  # NOQA
        obj,
        column_align,
        row_align
    )
    return _get_py_obj(res, 'None')


def obj_set_grid_cell(
    obj: "obj_t",
    column_align: "grid_align_t",
    col_pos: "coord_t",
    col_span: "coord_t",
    row_align: "grid_align_t",
    row_pos: "coord_t",
    row_span: "coord_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    column_align = _get_c_obj(column_align, 'grid_align_t')
    col_pos = _get_c_obj(col_pos, 'coord_t')
    col_span = _get_c_obj(col_span, 'coord_t')
    row_align = _get_c_obj(row_align, 'grid_align_t')
    row_pos = _get_c_obj(row_pos, 'coord_t')
    row_span = _get_c_obj(row_span, 'coord_t')
    res = _lib_lvgl.lib.lv_obj_set_grid_cell(  # NOQA
        obj,
        column_align,
        col_pos,
        col_span,
        row_align,
        row_pos,
        row_span
    )
    return _get_py_obj(res, 'None')


def grid_fr(
    x: "uint8_t"
) -> "coord_t":

    x = _get_c_obj(x, 'uint8_t')
    res = _lib_lvgl.lib.lv_grid_fr(  # NOQA
        x
    )
    return _get_py_obj(res, 'coord_t')


def style_set_grid_row_dsc_array(
    style: "style_t",
    value: List["coord_t"]
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'List[coord_t]')
    res = _lib_lvgl.lib.lv_style_set_grid_row_dsc_array(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_column_dsc_array(
    style: "style_t",
    value: List["coord_t"]
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'List[coord_t]')
    res = _lib_lvgl.lib.lv_style_set_grid_column_dsc_array(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_row_align(
    style: "style_t",
    value: "grid_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grid_align_t')
    res = _lib_lvgl.lib.lv_style_set_grid_row_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_column_align(
    style: "style_t",
    value: "grid_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grid_align_t')
    res = _lib_lvgl.lib.lv_style_set_grid_column_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_column_pos(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_column_pos(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_column_span(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_column_span(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_row_pos(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_row_pos(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_row_span(
    style: "style_t",
    value: "coord_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'coord_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_row_span(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_x_align(
    style: "style_t",
    value: "grid_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grid_align_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_x_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def style_set_grid_cell_y_align(
    style: "style_t",
    value: "grid_align_t"
) -> None:

    style = _get_c_obj(style, 'style_t')
    value = _get_c_obj(value, 'grid_align_t')
    res = _lib_lvgl.lib.lv_style_set_grid_cell_y_align(  # NOQA
        style,
        value
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_row_dsc_array(
    obj: "obj_t",
    value: List["coord_t"],
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'List[coord_t]')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_row_dsc_array(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_column_dsc_array(
    obj: "obj_t",
    value: List["coord_t"],
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'List[coord_t]')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_column_dsc_array(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_row_align(
    obj: "obj_t",
    value: "grid_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'grid_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_row_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_column_align(
    obj: "obj_t",
    value: "grid_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'grid_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_column_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_column_pos(
    obj: "obj_t",
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_column_pos(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_column_span(
    obj: "obj_t",
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_column_span(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_row_pos(
    obj: "obj_t",
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_row_pos(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_row_span(
    obj: "obj_t",
    value: "coord_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'coord_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_row_span(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_x_align(
    obj: "obj_t",
    value: "grid_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'grid_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_x_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_set_style_grid_cell_y_align(
    obj: "obj_t",
    value: "grid_align_t",
    selector: "style_selector_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    value = _get_c_obj(value, 'grid_align_t')
    selector = _get_c_obj(selector, 'style_selector_t')
    res = _lib_lvgl.lib.lv_obj_set_style_grid_cell_y_align(  # NOQA
        obj,
        value,
        selector
    )
    return _get_py_obj(res, 'None')


def obj_get_style_grid_row_dsc_array(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_row_dsc_array(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_column_dsc_array(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_column_dsc_array(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_row_align(
    obj: "obj_t",
    part: "uint32_t"
) -> "grid_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_row_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grid_align_t')


def obj_get_style_grid_column_align(
    obj: "obj_t",
    part: "uint32_t"
) -> "grid_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_column_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grid_align_t')


def obj_get_style_grid_cell_column_pos(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_column_pos(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_cell_column_span(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_column_span(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_cell_row_pos(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_row_pos(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_cell_row_span(
    obj: "obj_t",
    part: "uint32_t"
) -> "coord_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_row_span(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'coord_t')


def obj_get_style_grid_cell_x_align(
    obj: "obj_t",
    part: "uint32_t"
) -> "grid_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_x_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grid_align_t')


def obj_get_style_grid_cell_y_align(
    obj: "obj_t",
    part: "uint32_t"
) -> "grid_align_t":

    obj = _get_c_obj(obj, 'obj_t')
    part = _get_c_obj(part, 'uint32_t')
    res = _lib_lvgl.lib.lv_obj_get_style_grid_cell_y_align(  # NOQA
        obj,
        part
    )
    return _get_py_obj(res, 'grid_align_t')


def theme_default_init(
    disp: "disp_t",
    color_primary: "color_t",
    color_secondary: "color_t",
    dark: "bool",
    font: "font_t"
) -> "theme_t":

    disp = _get_c_obj(disp, 'disp_t')
    color_primary = _get_c_obj(color_primary, 'color_t')
    color_secondary = _get_c_obj(color_secondary, 'color_t')
    dark = _get_c_obj(dark, 'bool')
    font = _get_c_obj(font, 'font_t')
    res = _lib_lvgl.lib.lv_theme_default_init(  # NOQA
        disp,
        color_primary,
        color_secondary,
        dark,
        font
    )
    return _get_py_obj(res, 'theme_t')


def theme_default_get() -> "theme_t":

    res = _lib_lvgl.lib.lv_theme_default_get()  # NOQA
    return _get_py_obj(res, 'theme_t')


def theme_default_is_inited() -> "bool":

    res = _lib_lvgl.lib.lv_theme_default_is_inited()  # NOQA
    return _get_py_obj(res, 'bool')


def theme_basic_init(
    disp: "disp_t"
) -> "theme_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_theme_basic_init(  # NOQA
        disp
    )
    return _get_py_obj(res, 'theme_t')


def theme_basic_is_inited() -> "bool":

    res = _lib_lvgl.lib.lv_theme_basic_is_inited()  # NOQA
    return _get_py_obj(res, 'bool')


def task_handler() -> "uint32_t":

    res = _lib_lvgl.lib.lv_task_handler()  # NOQA
    return _get_py_obj(res, 'uint32_t')


def obj_move_foreground(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_move_foreground(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_move_background(
    obj: "obj_t"
) -> None:

    obj = _get_c_obj(obj, 'obj_t')
    res = _lib_lvgl.lib.lv_obj_move_background(  # NOQA
        obj
    )
    return _get_py_obj(res, 'None')


def obj_get_child_id(
    obj: _obj_t
) -> "uint32_t":

    obj = _get_c_obj(obj, '_obj_t')
    res = _lib_lvgl.lib.lv_obj_get_child_id(  # NOQA
        obj
    )
    return _get_py_obj(res, 'uint32_t')


def sdl_window_create(
    hor_res: "coord_t",
    ver_res: "coord_t"
) -> "disp_t":

    hor_res = _get_c_obj(hor_res, 'coord_t')
    ver_res = _get_c_obj(ver_res, 'coord_t')
    res = _lib_lvgl.lib.lv_sdl_window_create(  # NOQA
        hor_res,
        ver_res
    )
    return _get_py_obj(res, 'disp_t')


def sdl_window_set_zoom(
    disp: "disp_t",
    zoom: "uint8_t"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    zoom = _get_c_obj(zoom, 'uint8_t')
    res = _lib_lvgl.lib.lv_sdl_window_set_zoom(  # NOQA
        disp,
        zoom
    )
    return _get_py_obj(res, 'None')


def sdl_window_get_zoom(
    disp: "disp_t"
) -> "uint8_t":

    disp = _get_c_obj(disp, 'disp_t')
    res = _lib_lvgl.lib.lv_sdl_window_get_zoom(  # NOQA
        disp
    )
    return _get_py_obj(res, 'uint8_t')


def _sdl_get_disp_from_win_id(
    win_id: "uint32_t"
) -> "disp_t":

    win_id = _get_c_obj(win_id, 'uint32_t')
    res = _lib_lvgl.lib._lv_sdl_get_disp_from_win_id(  # NOQA
        win_id
    )
    return _get_py_obj(res, 'disp_t')


def sdl_window_set_title(
    disp: "disp_t",
    title: "char"
) -> None:

    disp = _get_c_obj(disp, 'disp_t')
    title = _get_c_obj(title, 'char')
    res = _lib_lvgl.lib.lv_sdl_window_set_title(  # NOQA
        disp,
        title
    )
    return _get_py_obj(res, 'None')


def sdl_mouse_create() -> "indev_t":

    res = _lib_lvgl.lib.lv_sdl_mouse_create()  # NOQA
    return _get_py_obj(res, 'indev_t')


def sdl_mousewheel_create() -> "indev_t":

    res = _lib_lvgl.lib.lv_sdl_mousewheel_create()  # NOQA
    return _get_py_obj(res, 'indev_t')


def sdl_keyboard_create() -> "indev_t":

    res = _lib_lvgl.lib.lv_sdl_keyboard_create()  # NOQA
    return _get_py_obj(res, 'indev_t')


def version_major() -> int_:

    res = _lib_lvgl.lib.lv_version_major()  # NOQA
    return _get_py_obj(res, 'int_')


def version_minor() -> int_:

    res = _lib_lvgl.lib.lv_version_minor()  # NOQA
    return _get_py_obj(res, 'int_')


def version_patch() -> int_:

    res = _lib_lvgl.lib.lv_version_patch()  # NOQA
    return _get_py_obj(res, 'int_')


def version_info() -> "char":

    res = _lib_lvgl.lib.lv_version_info()  # NOQA
    return _get_py_obj(res, 'char')


def demo_benchmark(
    mode: "demo_benchmark_mode_t"
) -> None:

    mode = _get_c_obj(mode, 'demo_benchmark_mode_t')
    res = _lib_lvgl.lib.lv_demo_benchmark(  # NOQA
        mode
    )
    return _get_py_obj(res, 'None')


def demo_benchmark_run_scene(
    mode: "demo_benchmark_mode_t",
    scene_no: "uint16_t"
) -> None:

    mode = _get_c_obj(mode, 'demo_benchmark_mode_t')
    scene_no = _get_c_obj(scene_no, 'uint16_t')
    res = _lib_lvgl.lib.lv_demo_benchmark_run_scene(  # NOQA
        mode,
        scene_no
    )
    return _get_py_obj(res, 'None')

# ************************************************


def __build_font(name):
    try:
        f = getattr(_lib_lvgl.lib, name)
        f_pointer = _lib_lvgl.ffi.addressof(f)

        instance = font_t()
        instance._obj = f_pointer
        return instance

    except AttributeError:
        class dummy_class:

            @property
            def _obj(self):
                raise RuntimeError(
                    'LVGL was not compiled with this font ("{0}"'.format(name)
                )

        return dummy_class()


font_montserrat_12_subpx: font_t = __build_font(
    'lv_font_montserrat_12_subpx'
)

font_montserrat_28_compressed: font_t = __build_font(
    'lv_font_montserrat_28_compressed'
)

font_dejavu_16_persian_hebrew: font_t = __build_font(
    'lv_font_dejavu_16_persian_hebrew'
)

font_simsun_16_cjk: font_t = __build_font(
    'lv_font_simsun_16_cjk'
)

font_unscii_8: font_t = __build_font(
    'lv_font_unscii_8'
)

font_unscii_16: font_t = __build_font(
    'lv_font_unscii_16'
)

font_montserrat_8: font_t = __build_font(
    'lv_font_montserrat_8'
)


font_montserrat_10: font_t = __build_font(
    'lv_font_montserrat_10'
)


font_montserrat_12: font_t = __build_font(
    'lv_font_montserrat_12'
)


font_montserrat_14: font_t = __build_font(
    'lv_font_montserrat_14'
)


font_montserrat_16: font_t = __build_font(
    'lv_font_montserrat_16'
)


font_montserrat_18: font_t = __build_font(
    'lv_font_montserrat_18'
)


font_montserrat_20: font_t = __build_font(
    'lv_font_montserrat_20'
)


font_montserrat_22: font_t = __build_font(
    'lv_font_montserrat_22'
)


font_montserrat_24: font_t = __build_font(
    'lv_font_montserrat_24'
)


font_montserrat_26: font_t = __build_font(
    'lv_font_montserrat_26'
)


font_montserrat_28: font_t = __build_font(
    'lv_font_montserrat_28'
)


font_montserrat_30: font_t = __build_font(
    'lv_font_montserrat_30'
)


font_montserrat_32: font_t = __build_font(
    'lv_font_montserrat_32'
)


font_montserrat_34: font_t = __build_font(
    'lv_font_montserrat_34'
)


font_montserrat_36: font_t = __build_font(
    'lv_font_montserrat_36'
)


font_montserrat_38: font_t = __build_font(
    'lv_font_montserrat_38'
)


font_montserrat_40: font_t = __build_font(
    'lv_font_montserrat_40'
)


font_montserrat_42: font_t = __build_font(
    'lv_font_montserrat_42'
)


font_montserrat_44: font_t = __build_font(
    'lv_font_montserrat_44'
)


font_montserrat_46: font_t = __build_font(
    'lv_font_montserrat_46'
)


font_montserrat_48: font_t = __build_font(
    'lv_font_montserrat_48'
)


del __build_font
