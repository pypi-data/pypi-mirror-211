#!/usr/bin/env python3

"""
The plotting program that makes the log(p/(1-p)) v.s. ln(lr) distribution plot

"""

import yaml
import json
import numpy
import sqlite3
import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from optparse import OptionParser

from pastro import pastro

def parse_command_line():
  parser = OptionParser()
  parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
  parser.add_option("--output", help = "output filename")
  parser.add_option("-c", "--config-file", help = "config file")
  parser.add_option("--model-file", help = "provide the model h5 file")
  options, filenames = parser.parse_args()
  process_params = dict(options.__dict__)

  return options, process_params, filenames

options, process_params, filenames = parse_command_line()

with open(options.config_file) as file:
  values = yaml.safe_load(file)
  lr_thresh = values['lr-thresh']

model = pastro.load(options.model_file)
model.finalize(model.prior())

counts = {cat:[] for cat in model.categories}
lr_counts = []
for fn in filenames:
  print(fn)
  connection = sqlite3.connect(fn)
  ts_id, = connection.cursor().execute("SELECT DISTINCT time_slide_id FROM time_slide where time_slide_id NOT IN (SELECT DISTINCT time_slide_id FROM time_slide where offset !=0);").fetchone()
  for mc,lr, in connection.cursor().execute("SELECT mchirp, likelihood FROM coinc_inspiral JOIN coinc_event on coinc_event.coinc_event_id == coinc_inspiral.coinc_event_id WHERE coinc_event.time_slide_id == :tsid;", {"tsid": int(ts_id)}):
     if lr > lr_thresh:
       data = {"mchirp": mc,
	       "likelihood": lr}
       pa = json.loads(model(data))
       for cat in pa:
         counts[cat].append(pa[cat])
       lr_counts.append(lr)

"""
numpy.save('test_lr.npy', lr_counts)
for cat in pa:
  numpy.save('test_'+cat+'.npy', numpy.array(counts[cat]))
"""

lr = numpy.array(lr_counts)
pa_bbh = numpy.array(counts['BBH'])
pa_nsbh = numpy.array(counts['NSBH'])
pa_bns = numpy.array(counts['BNS'])
pa_zl = numpy.array(counts['Terrestrial'])

fontsize = 12
plt.figure(figsize=(12, 9))
plt.subplot(2, 2, 1)
plt.xlabel('log(lr)', fontsize=fontsize)
plt.ylabel('log(p/(1-p))', fontsize=fontsize)
plt.scatter(numpy.log(lr), numpy.log(pa_bbh/(1-pa_bbh)), label='BBH', s=5)
plt.legend(loc='lower left',fontsize=fontsize)

plt.subplot(2, 2, 2)
plt.xlabel('log(lr)', fontsize=fontsize)
plt.ylabel('log(p/(1-p))', fontsize=fontsize)
plt.scatter(numpy.log(lr), numpy.log(pa_nsbh/(1-pa_nsbh)), label='NSBH', s=5)
plt.legend(loc='lower left',fontsize=fontsize)

plt.subplot(2, 2, 3)
plt.xlabel('log(lr)', fontsize=fontsize)
plt.ylabel('log(p/(1-p))', fontsize=fontsize)
plt.scatter(numpy.log(lr), numpy.log(pa_bns/(1-pa_bns)), label='BNS', s=5)
plt.legend(loc='lower left',fontsize=fontsize)

plt.subplot(2, 2, 4)
plt.xlabel('log(lr)', fontsize=fontsize)
plt.ylabel('log(p/(1-p))', fontsize=fontsize)
plt.scatter(numpy.log(lr), numpy.log(pa_zl/(1-pa_zl)), label='Terrestrial', s=5)
plt.legend(loc='lower left', fontsize=fontsize)

plt.savefig(options.output) 
